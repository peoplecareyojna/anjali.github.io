/*!
* Parsley.js
* Version 2.4.4 - built Thu, Aug 4th 2016, 9:54 pm
* http://parsleyjs.org
* Guillaume Potier - <guillaume@wisembly.com>
* Marc-Andre Lafortune - <petroselinum@marc-andre.ca>
* MIT Licensed
*/
function _toConsumableArray(e){if(Array.isArray(e)){for(var t=0,i=Array(e.length);t<e.length;t++)i[t]=e[t];return i}return Array.from(e)}var _slice=Array.prototype.slice;!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],t):e.parsley=t(e.jQuery)}(this,function(e){"use strict";function t(e,t){return e.parsleyAdaptedCallback||(e.parsleyAdaptedCallback=function(){var i=Array.prototype.slice.call(arguments,0);i.unshift(this),e.apply(t||R,i)}),e.parsleyAdaptedCallback}function i(e){return 0===e.lastIndexOf(q,0)?e.substr(q.length):e}/**
   * inputevent - Alleviate browser bugs for input events
   * https://github.com/marcandre/inputevent
   * @version v0.0.3 - (built Thu, Apr 14th 2016, 5:58 pm)
   * @author Marc-Andre Lafortune <github@marc-andre.ca>
   * @license MIT
   */
function n(){var t=this,i=window||global;e.extend(this,{isNativeEvent:function(e){return e.originalEvent&&e.originalEvent.isTrusted!==!1},fakeInputEvent:function(i){t.isNativeEvent(i)&&e(i.target).trigger("input")},misbehaves:function(i){t.isNativeEvent(i)&&(t.behavesOk(i),e(document).on("change.inputevent",i.data.selector,t.fakeInputEvent),t.fakeInputEvent(i))},behavesOk:function(i){t.isNativeEvent(i)&&e(document).off("input.inputevent",i.data.selector,t.behavesOk).off("change.inputevent",i.data.selector,t.misbehaves)},install:function(){if(!i.inputEventPatched){i.inputEventPatched="0.0.3";for(var n=["select",'input[type="checkbox"]','input[type="radio"]','input[type="file"]'],r=0;r<n.length;r++){var s=n[r];e(document).on("input.inputevent",s,{selector:s},t.behavesOk).on("change.inputevent",s,{selector:s},t.misbehaves)}}},uninstall:function(){delete i.inputEventPatched,e(document).off(".inputevent")}})}var r=1,s={},a={attr:function(e,t,i){var n,r,s,a=new RegExp("^"+t,"i");if("undefined"==typeof i)i={};else for(n in i)i.hasOwnProperty(n)&&delete i[n];if("undefined"==typeof e||"undefined"==typeof e[0])return i;for(s=e[0].attributes,n=s.length;n--;)r=s[n],r&&r.specified&&a.test(r.name)&&(i[this.camelize(r.name.slice(t.length))]=this.deserializeValue(r.value));return i},checkAttr:function(e,t,i){return e.is("["+t+i+"]")},setAttr:function(e,t,i,n){e[0].setAttribute(this.dasherize(t+i),String(n))},generateID:function(){return""+r++},deserializeValue:function(t){var i;try{return t?"true"==t||("false"==t?!1:"null"==t?null:isNaN(i=Number(t))?/^[\[\{]/.test(t)?e.parseJSON(t):t:i):t}catch(n){return t}},camelize:function(e){return e.replace(/-+(.)?/g,function(e,t){return t?t.toUpperCase():""})},dasherize:function(e){return e.replace(/::/g,"/").replace(/([A-Z]+)([A-Z][a-z])/g,"$1_$2").replace(/([a-z\d])([A-Z])/g,"$1_$2").replace(/_/g,"-").toLowerCase()},warn:function(){var e;window.console&&"function"==typeof window.console.warn&&(e=window.console).warn.apply(e,arguments)},warnOnce:function(e){s[e]||(s[e]=!0,this.warn.apply(this,arguments))},_resetWarnings:function(){s={}},trimString:function(e){return e.replace(/^\s+|\s+$/g,"")},namespaceEvents:function(t,i){return t=this.trimString(t||"").split(/\s+/),t[0]?e.map(t,function(e){return e+"."+i}).join(" "):""},difference:function(t,i){var n=[];return e.each(t,function(e,t){-1==i.indexOf(t)&&n.push(t)}),n},all:function(t){return e.when.apply(e,_toConsumableArray(t).concat([42,42]))},objectCreate:Object.create||function(){var e=function(){};return function(t){if(arguments.length>1)throw Error("Second argument not supported");if("object"!=typeof t)throw TypeError("Argument must be an object");e.prototype=t;var i=new e;return e.prototype=null,i}}(),_SubmitSelector:'input[type="submit"], button:submit'},o=a,l={namespace:"data-parsley-",inputs:"input, textarea, select",excluded:"input[type=button], input[type=submit], input[type=reset], input[type=hidden]",priorityEnabled:!0,multiple:null,group:null,uiEnabled:!0,validationThreshold:3,focus:"first",trigger:!1,triggerAfterFailure:"input",errorClass:"parsley-error",successClass:"parsley-success",classHandler:function(e){},errorsContainer:function(e){},errorsWrapper:'<ul class="parsley-errors-list"></ul>',errorTemplate:"<li></li>"},u=function(){this.__id__=o.generateID()};u.prototype={asyncSupport:!0,_pipeAccordingToValidationResult:function(){var t=this,i=function(){var i=e.Deferred();return!0!==t.validationResult&&i.reject(),i.resolve().promise()};return[i,i]},actualizeOptions:function(){return o.attr(this.$element,this.options.namespace,this.domOptions),this.parent&&this.parent.actualizeOptions&&this.parent.actualizeOptions(),this},_resetOptions:function(e){this.domOptions=o.objectCreate(this.parent.options),this.options=o.objectCreate(this.domOptions);for(var t in e)e.hasOwnProperty(t)&&(this.options[t]=e[t]);this.actualizeOptions()},_listeners:null,on:function(e,t){this._listeners=this._listeners||{};var i=this._listeners[e]=this._listeners[e]||[];return i.push(t),this},subscribe:function(t,i){e.listenTo(this,t.toLowerCase(),i)},off:function(e,t){var i=this._listeners&&this._listeners[e];if(i)if(t)for(var n=i.length;n--;)i[n]===t&&i.splice(n,1);else delete this._listeners[e];return this},unsubscribe:function(t,i){e.unsubscribeTo(this,t.toLowerCase())},trigger:function(e,t,i){t=t||this;var n,r=this._listeners&&this._listeners[e];if(r)for(var s=r.length;s--;)if(n=r[s].call(t,t,i),n===!1)return n;return this.parent?this.parent.trigger(e,t,i):!0},reset:function(){if("ParsleyForm"!==this.__class__)return this._resetUI(),this._trigger("reset");for(var e=0;e<this.fields.length;e++)this.fields[e].reset();this._trigger("reset")},destroy:function(){if(this._destroyUI(),"ParsleyForm"!==this.__class__)return this.$element.removeData("Parsley"),this.$element.removeData("ParsleyFieldMultiple"),void this._trigger("destroy");for(var e=0;e<this.fields.length;e++)this.fields[e].destroy();this.$element.removeData("Parsley"),this._trigger("destroy")},asyncIsValid:function(e,t){return o.warnOnce("asyncIsValid is deprecated; please use whenValid instead"),this.whenValid({group:e,force:t})},_findRelated:function(){return this.options.multiple?this.parent.$element.find("["+this.options.namespace+'multiple="'+this.options.multiple+'"]'):this.$element}};var d={string:function(e){return e},integer:function(e){if(isNaN(e))throw'Requirement is not an integer: "'+e+'"';return parseInt(e,10)},number:function(e){if(isNaN(e))throw'Requirement is not a number: "'+e+'"';return parseFloat(e)},reference:function(t){var i=e(t);if(0===i.length)throw'No such reference: "'+t+'"';return i},"boolean":function(e){return"false"!==e},object:function(e){return o.deserializeValue(e)},regexp:function(e){var t="";return/^\/.*\/(?:[gimy]*)$/.test(e)?(t=e.replace(/.*\/([gimy]*)$/,"$1"),e=e.replace(new RegExp("^/(.*?)/"+t+"$"),"$1")):e="^"+e+"$",new RegExp(e,t)}},h=function(e,t){var i=e.match(/^\s*\[(.*)\]\s*$/);if(!i)throw'Requirement is not an array: "'+e+'"';var n=i[1].split(",").map(o.trimString);if(n.length!==t)throw"Requirement has "+n.length+" values when "+t+" are needed";return n},p=function(e,t){var i=d[e||"string"];if(!i)throw'Unknown requirement specification: "'+e+'"';return i(t)},c=function(e,t,i){var n=null,r={};for(var s in e)if(s){var a=i(s);"string"==typeof a&&(a=p(e[s],a)),r[s]=a}else n=p(e[s],t);return[n,r]},f=function(t){e.extend(!0,this,t)};f.prototype={validate:function(t,i){if(this.fn)return arguments.length>3&&(i=[].slice.call(arguments,1,-1)),this.fn.call(this,t,i);if(e.isArray(t)){if(!this.validateMultiple)throw"Validator `"+this.name+"` does not handle multiple values";return this.validateMultiple.apply(this,arguments)}if(this.validateNumber)return isNaN(t)?!1:(arguments[0]=parseFloat(arguments[0]),this.validateNumber.apply(this,arguments));if(this.validateString)return this.validateString.apply(this,arguments);throw"Validator `"+this.name+"` only handles multiple values"},parseRequirements:function(t,i){if("string"!=typeof t)return e.isArray(t)?t:[t];var n=this.requirementType;if(e.isArray(n)){for(var r=h(t,n.length),s=0;s<r.length;s++)r[s]=p(n[s],r[s]);return r}return e.isPlainObject(n)?c(n,t,i):[p(n,t)]},requirementType:"string",priority:2};var m=function(e,t){this.__class__="ParsleyValidatorRegistry",this.locale="en",this.init(e||{},t||{})},g={email:/^(([^<>()\[\]\\.,;:\s@\"]+(\.[^<>()\[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/i,number:/^-?(\d*\.)?\d+(e[-+]?\d+)?$/i,integer:/^-?\d+$/,digits:/^\d+$/,alphanum:/^\w+$/i,url:new RegExp("^(?:(?:https?|ftp)://)?(?:\\S+(?::\\S*)?@)?(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:/\\S*)?$","i")};g.range=g.number;var v=function(e){var t=(""+e).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);return t?Math.max(0,(t[1]?t[1].length:0)-(t[2]?+t[2]:0)):0};m.prototype={init:function(t,i){this.catalog=i,this.validators=e.extend({},this.validators);for(var n in t)this.addValidator(n,t[n].fn,t[n].priority);window.Parsley.trigger("parsley:validator:init")},setLocale:function(e){if("undefined"==typeof this.catalog[e])throw new Error(e+" is not available in the catalog");return this.locale=e,this},addCatalog:function(e,t,i){return"object"==typeof t&&(this.catalog[e]=t),!0===i?this.setLocale(e):this},addMessage:function(e,t,i){return"undefined"==typeof this.catalog[e]&&(this.catalog[e]={}),this.catalog[e][t]=i,this},addMessages:function(e,t){for(var i in t)this.addMessage(e,i,t[i]);return this},addValidator:function(e,t,i){if(this.validators[e])o.warn('Validator "'+e+'" is already defined.');else if(l.hasOwnProperty(e))return void o.warn('"'+e+'" is a restricted keyword and is not a valid validator name.');return this._setValidator.apply(this,arguments)},updateValidator:function(e,t,i){return this.validators[e]?this._setValidator.apply(this,arguments):(o.warn('Validator "'+e+'" is not already defined.'),this.addValidator.apply(this,arguments))},removeValidator:function(e){return this.validators[e]||o.warn('Validator "'+e+'" is not defined.'),delete this.validators[e],this},_setValidator:function(e,t,i){"object"!=typeof t&&(t={fn:t,priority:i}),t.validate||(t=new f(t)),this.validators[e]=t;for(var n in t.messages||{})this.addMessage(n,e,t.messages[n]);return this},getErrorMessage:function(e){var t;if("type"===e.name){var i=this.catalog[this.locale][e.name]||{};t=i[e.requirements]}else t=this.formatMessage(this.catalog[this.locale][e.name],e.requirements);return t||this.catalog[this.locale].defaultMessage||this.catalog.en.defaultMessage},formatMessage:function(e,t){if("object"==typeof t){for(var i in t)e=this.formatMessage(e,t[i]);return e}return"string"==typeof e?e.replace(/%s/i,t):""},validators:{notblank:{validateString:function(e){return/\S/.test(e)},priority:2},required:{validateMultiple:function(e){return e.length>0},validateString:function(e){return/\S/.test(e)},priority:512},type:{validateString:function(e,t){var i=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],n=i.step,r=void 0===n?"1":n,s=i.base,a=void 0===s?0:s,o=g[t];if(!o)throw new Error("validator type `"+t+"` is not supported");if(!o.test(e))return!1;if("number"===t&&!/^any$/i.test(r||"")){var l=Number(e),u=Math.max(v(r),v(a));if(v(l)>u)return!1;var d=function(e){return Math.round(e*Math.pow(10,u))};if((d(l)-d(a))%d(r)!=0)return!1}return!0},requirementType:{"":"string",step:"string",base:"number"},priority:256},pattern:{validateString:function(e,t){return t.test(e)},requirementType:"regexp",priority:64},minlength:{validateString:function(e,t){return e.length>=t},requirementType:"integer",priority:30},maxlength:{validateString:function(e,t){return e.length<=t},requirementType:"integer",priority:30},length:{validateString:function(e,t,i){return e.length>=t&&e.length<=i},requirementType:["integer","integer"],priority:30},mincheck:{validateMultiple:function(e,t){return e.length>=t},requirementType:"integer",priority:30},maxcheck:{validateMultiple:function(e,t){return e.length<=t},requirementType:"integer",priority:30},check:{validateMultiple:function(e,t,i){return e.length>=t&&e.length<=i},requirementType:["integer","integer"],priority:30},min:{validateNumber:function(e,t){return e>=t},requirementType:"number",priority:30},max:{validateNumber:function(e,t){return t>=e},requirementType:"number",priority:30},range:{validateNumber:function(e,t,i){return e>=t&&i>=e},requirementType:["number","number"],priority:30},equalto:{validateString:function(t,i){var n=e(i);return n.length?t===n.val():t===i},priority:256}}};var y={},_=function k(e,t,i){for(var n=[],r=[],s=0;s<e.length;s++){for(var a=!1,o=0;o<t.length;o++)if(e[s].assert.name===t[o].assert.name){a=!0;break}a?r.push(e[s]):n.push(e[s])}return{kept:r,added:n,removed:i?[]:k(t,e,!0).added}};y.Form={_actualizeTriggers:function(){var e=this;this.$element.on("submit.Parsley",function(t){e.onSubmitValidate(t)}),this.$element.on("click.Parsley",o._SubmitSelector,function(t){e.onSubmitButton(t)}),!1!==this.options.uiEnabled&&this.$element.attr("novalidate","")},focus:function(){if(this._focusedField=null,!0===this.validationResult||"none"===this.options.focus)return null;for(var e=0;e<this.fields.length;e++){var t=this.fields[e];if(!0!==t.validationResult&&t.validationResult.length>0&&"undefined"==typeof t.options.noFocus&&(this._focusedField=t.$element,"first"===this.options.focus))break}return null===this._focusedField?null:this._focusedField.focus()},_destroyUI:function(){this.$element.off(".Parsley")}},y.Field={_reflowUI:function(){if(this._buildUI(),this._ui){var e=_(this.validationResult,this._ui.lastValidationResult);this._ui.lastValidationResult=this.validationResult,this._manageStatusClass(),this._manageErrorsMessages(e),this._actualizeTriggers(),!e.kept.length&&!e.added.length||this._failedOnce||(this._failedOnce=!0,this._actualizeTriggers())}},getErrorsMessages:function(){if(!0===this.validationResult)return[];for(var e=[],t=0;t<this.validationResult.length;t++)e.push(this.validationResult[t].errorMessage||this._getErrorMessage(this.validationResult[t].assert));return e},addError:function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],i=t.message,n=t.assert,r=t.updateClass,s=void 0===r?!0:r;this._buildUI(),this._addError(e,{message:i,assert:n}),s&&this._errorClass()},updateError:function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],i=t.message,n=t.assert,r=t.updateClass,s=void 0===r?!0:r;this._buildUI(),this._updateError(e,{message:i,assert:n}),s&&this._errorClass()},removeError:function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],i=t.updateClass,n=void 0===i?!0:i;this._buildUI(),this._removeError(e),n&&this._manageStatusClass()},_manageStatusClass:function(){this.hasConstraints()&&this.needsValidation()&&!0===this.validationResult?this._successClass():this.validationResult.length>0?this._errorClass():this._resetClass()},_manageErrorsMessages:function(t){if("undefined"==typeof this.options.errorsMessagesDisabled){if("undefined"!=typeof this.options.errorMessage)return t.added.length||t.kept.length?(this._insertErrorWrapper(),0===this._ui.$errorsWrapper.find(".parsley-custom-error-message").length&&this._ui.$errorsWrapper.append(e(this.options.errorTemplate).addClass("parsley-custom-error-message")),this._ui.$errorsWrapper.addClass("filled").find(".parsley-custom-error-message").html(this.options.errorMessage)):this._ui.$errorsWrapper.removeClass("filled").find(".parsley-custom-error-message").remove();for(var i=0;i<t.removed.length;i++)this._removeError(t.removed[i].assert.name);for(i=0;i<t.added.length;i++)this._addError(t.added[i].assert.name,{message:t.added[i].errorMessage,assert:t.added[i].assert});for(i=0;i<t.kept.length;i++)this._updateError(t.kept[i].assert.name,{message:t.kept[i].errorMessage,assert:t.kept[i].assert})}},_addError:function(t,i){var n=i.message,r=i.assert;this._insertErrorWrapper(),this._ui.$errorsWrapper.addClass("filled").append(e(this.options.errorTemplate).addClass("parsley-"+t).html(n||this._getErrorMessage(r)))},_updateError:function(e,t){var i=t.message,n=t.assert;this._ui.$errorsWrapper.addClass("filled").find(".parsley-"+e).html(i||this._getErrorMessage(n))},_removeError:function(e){this._ui.$errorsWrapper.removeClass("filled").find(".parsley-"+e).remove()},_getErrorMessage:function(e){var t=e.name+"Message";return"undefined"!=typeof this.options[t]?window.Parsley.formatMessage(this.options[t],e.requirements):window.Parsley.getErrorMessage(e)},_buildUI:function(){if(!this._ui&&!1!==this.options.uiEnabled){var t={};this.$element.attr(this.options.namespace+"id",this.__id__),t.$errorClassHandler=this._manageClassHandler(),t.errorsWrapperId="parsley-id-"+(this.options.multiple?"multiple-"+this.options.multiple:this.__id__),t.$errorsWrapper=e(this.options.errorsWrapper).attr("id",t.errorsWrapperId),t.lastValidationResult=[],t.validationInformationVisible=!1,this._ui=t}},_manageClassHandler:function(){if("string"==typeof this.options.classHandler&&e(this.options.classHandler).length)return e(this.options.classHandler);var t=this.options.classHandler.call(this,this);return"undefined"!=typeof t&&t.length?t:this._inputHolder()},_inputHolder:function(){return!this.options.multiple||this.$element.is("select")?this.$element:this.$element.parent()},_insertErrorWrapper:function(){var t;if(0!==this._ui.$errorsWrapper.parent().length)return this._ui.$errorsWrapper.parent();if("string"==typeof this.options.errorsContainer){if(e(this.options.errorsContainer).length)return e(this.options.errorsContainer).append(this._ui.$errorsWrapper);o.warn("The errors container `"+this.options.errorsContainer+"` does not exist in DOM")}else"function"==typeof this.options.errorsContainer&&(t=this.options.errorsContainer.call(this,this));return"undefined"!=typeof t&&t.length?t.append(this._ui.$errorsWrapper):this._inputHolder().after(this._ui.$errorsWrapper)},_actualizeTriggers:function(){var e,t=this,i=this._findRelated();i.off(".Parsley"),this._failedOnce?i.on(o.namespaceEvents(this.options.triggerAfterFailure,"Parsley"),function(){t.validate()}):(e=o.namespaceEvents(this.options.trigger,"Parsley"))&&i.on(e,function(e){t._eventValidate(e)})},_eventValidate:function(e){!(!/key|input/.test(e.type)||this._ui&&this._ui.validationInformationVisible)&&this.getValue().length<=this.options.validationThreshold||this.validate()},_resetUI:function(){this._failedOnce=!1,this._actualizeTriggers(),"undefined"!=typeof this._ui&&(this._ui.$errorsWrapper.removeClass("filled").children().remove(),this._resetClass(),this._ui.lastValidationResult=[],this._ui.validationInformationVisible=!1)},_destroyUI:function(){this._resetUI(),"undefined"!=typeof this._ui&&this._ui.$errorsWrapper.remove(),delete this._ui},_successClass:function(){this._ui.validationInformationVisible=!0,this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass)},_errorClass:function(){this._ui.validationInformationVisible=!0,this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass)},_resetClass:function(){this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass)}};var w=function(t,i,n){this.__class__="ParsleyForm",this.$element=e(t),this.domOptions=i,this.options=n,this.parent=window.Parsley,this.fields=[],this.validationResult=null},b={pending:null,resolved:!0,rejected:!1};w.prototype={onSubmitValidate:function(e){var t=this;if(!0!==e.parsley){var i=this._$submitSource||this.$element.find(o._SubmitSelector).first();if(this._$submitSource=null,this.$element.find(".parsley-synthetic-submit-button").prop("disabled",!0),!i.is("[formnovalidate]")){var n=this.whenValidate({event:e});"resolved"===n.state()&&!1!==this._trigger("submit")||(e.stopImmediatePropagation(),e.preventDefault(),"pending"===n.state()&&n.done(function(){t._submit(i)}))}}},onSubmitButton:function(t){this._$submitSource=e(t.currentTarget)},_submit:function(t){if(!1!==this._trigger("submit")){if(t){var i=this.$element.find(".parsley-synthetic-submit-button").prop("disabled",!1);0===i.length&&(i=e('<input class="parsley-synthetic-submit-button" type="hidden">').appendTo(this.$element)),i.attr({name:t.attr("name"),value:t.attr("value")})}this.$element.trigger(e.extend(e.Event("submit"),{parsley:!0}))}},validate:function(t){if(arguments.length>=1&&!e.isPlainObject(t)){o.warnOnce("Calling validate on a parsley form without passing arguments as an object is deprecated.");var i=_slice.call(arguments),n=i[0],r=i[1],s=i[2];t={group:n,force:r,event:s}}return b[this.whenValidate(t).state()]},whenValidate:function(){var t,i=this,n=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],r=n.group,s=n.force,a=n.event;this.submitEvent=a,a&&(this.submitEvent=e.extend({},a,{preventDefault:function(){o.warnOnce("Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`"),i.validationResult=!1}})),this.validationResult=!0,this._trigger("validate"),this._refreshFields();var l=this._withoutReactualizingFormOptions(function(){return e.map(i.fields,function(e){return e.whenValidate({force:s,group:r})})});return(t=o.all(l).done(function(){i._trigger("success")}).fail(function(){i.validationResult=!1,i.focus(),i._trigger("error")}).always(function(){i._trigger("validated")})).pipe.apply(t,_toConsumableArray(this._pipeAccordingToValidationResult()))},isValid:function(t){if(arguments.length>=1&&!e.isPlainObject(t)){o.warnOnce("Calling isValid on a parsley form without passing arguments as an object is deprecated.");var i=_slice.call(arguments),n=i[0],r=i[1];t={group:n,force:r}}return b[this.whenValid(t).state()]},whenValid:function(){var t=this,i=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],n=i.group,r=i.force;this._refreshFields();var s=this._withoutReactualizingFormOptions(function(){return e.map(t.fields,function(e){return e.whenValid({group:n,force:r})})});return o.all(s)},_refreshFields:function(){return this.actualizeOptions()._bindFields()},_bindFields:function(){var t=this,i=this.fields;return this.fields=[],this.fieldsMappedById={},this._withoutReactualizingFormOptions(function(){t.$element.find(t.options.inputs).not(t.options.excluded).each(function(e,i){var n=new window.Parsley.Factory(i,{},t);"ParsleyField"!==n.__class__&&"ParsleyFieldMultiple"!==n.__class__||!0===n.options.excluded||"undefined"==typeof t.fieldsMappedById[n.__class__+"-"+n.__id__]&&(t.fieldsMappedById[n.__class__+"-"+n.__id__]=n,t.fields.push(n))}),e.each(o.difference(i,t.fields),function(e,t){t._trigger("reset")})}),this},_withoutReactualizingFormOptions:function(e){var t=this.actualizeOptions;this.actualizeOptions=function(){return this};var i=e();return this.actualizeOptions=t,i},_trigger:function(e){return this.trigger("form:"+e)}};var F=function(t,i,n,r,s){if(!/ParsleyField/.test(t.__class__))throw new Error("ParsleyField or ParsleyFieldMultiple instance expected");var a=window.Parsley._validatorRegistry.validators[i],o=new f(a);e.extend(this,{validator:o,name:i,requirements:n,priority:r||t.options[i+"Priority"]||o.priority,isDomConstraint:!0===s}),this._parseRequirements(t.options)},C=function(e){var t=e[0].toUpperCase();return t+e.slice(1)};F.prototype={validate:function(e,t){var i;return(i=this.validator).validate.apply(i,[e].concat(_toConsumableArray(this.requirementList),[t]))},_parseRequirements:function(e){var t=this;this.requirementList=this.validator.parseRequirements(this.requirements,function(i){return e[t.name+C(i)]})}};var $=function(t,i,n,r){this.__class__="ParsleyField",this.$element=e(t),"undefined"!=typeof r&&(this.parent=r),this.options=n,this.domOptions=i,this.constraints=[],this.constraintsByName={},this.validationResult=!0,this._bindConstraints()},x={pending:null,resolved:!0,rejected:!1};$.prototype={validate:function(t){arguments.length>=1&&!e.isPlainObject(t)&&(o.warnOnce("Calling validate on a parsley field without passing arguments as an object is deprecated."),t={options:t});var i=this.whenValidate(t);if(!i)return!0;switch(i.state()){case"pending":return null;case"resolved":return!0;case"rejected":return this.validationResult}},whenValidate:function(){var e,t=this,i=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],n=i.force,r=i.group;return this.refreshConstraints(),!r||this._isInGroup(r)?(this.value=this.getValue(),this._trigger("validate"),(e=this.whenValid({force:n,value:this.value,_refreshed:!0}).always(function(){t._reflowUI()}).done(function(){t._trigger("success")}).fail(function(){t._trigger("error")}).always(function(){t._trigger("validated")})).pipe.apply(e,_toConsumableArray(this._pipeAccordingToValidationResult()))):void 0},hasConstraints:function(){return 0!==this.constraints.length},needsValidation:function(e){return"undefined"==typeof e&&(e=this.getValue()),!(!e.length&&!this._isRequired()&&"undefined"==typeof this.options.validateIfEmpty)},_isInGroup:function(t){return e.isArray(this.options.group)?-1!==e.inArray(t,this.options.group):this.options.group===t},isValid:function(t){if(arguments.length>=1&&!e.isPlainObject(t)){o.warnOnce("Calling isValid on a parsley field without passing arguments as an object is deprecated.");var i=_slice.call(arguments),n=i[0],r=i[1];t={force:n,value:r}}var s=this.whenValid(t);return s?x[s.state()]:!0},whenValid:function(){var t=this,i=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],n=i.force,r=void 0===n?!1:n,s=i.value,a=i.group,l=i._refreshed;if(l||this.refreshConstraints(),!a||this._isInGroup(a)){if(this.validationResult=!0,!this.hasConstraints())return e.when();if("undefined"!=typeof s&&null!==s||(s=this.getValue()),!this.needsValidation(s)&&!0!==r)return e.when();var u=this._getGroupedConstraints(),d=[];return e.each(u,function(i,n){var r=o.all(e.map(n,function(e){return t._validateConstraint(s,e)}));return d.push(r),"rejected"===r.state()?!1:void 0}),o.all(d)}},_validateConstraint:function(t,i){var n=this,r=i.validate(t,this);return!1===r&&(r=e.Deferred().reject()),o.all([r]).fail(function(e){n.validationResult instanceof Array||(n.validationResult=[]),n.validationResult.push({assert:i,errorMessage:"string"==typeof e&&e})})},getValue:function(){var e;return e="function"==typeof this.options.value?this.options.value(this):"undefined"!=typeof this.options.value?this.options.value:this.$element.val(),"undefined"==typeof e||null===e?"":this._handleWhitespace(e)},refreshConstraints:function(){return this.actualizeOptions()._bindConstraints()},addConstraint:function(e,t,i,n){if(window.Parsley._validatorRegistry.validators[e]){var r=new F(this,e,t,i,n);"undefined"!==this.constraintsByName[r.name]&&this.removeConstraint(r.name),this.constraints.push(r),this.constraintsByName[r.name]=r}return this},removeConstraint:function(e){for(var t=0;t<this.constraints.length;t++)if(e===this.constraints[t].name){this.constraints.splice(t,1);break}return delete this.constraintsByName[e],this},updateConstraint:function(e,t,i){return this.removeConstraint(e).addConstraint(e,t,i)},_bindConstraints:function(){for(var e=[],t={},i=0;i<this.constraints.length;i++)!1===this.constraints[i].isDomConstraint&&(e.push(this.constraints[i]),t[this.constraints[i].name]=this.constraints[i]);this.constraints=e,this.constraintsByName=t;for(var n in this.options)this.addConstraint(n,this.options[n],void 0,!0);return this._bindHtml5Constraints()},_bindHtml5Constraints:function(){(this.$element.hasClass("required")||this.$element.attr("required"))&&this.addConstraint("required",!0,void 0,!0),"string"==typeof this.$element.attr("pattern")&&this.addConstraint("pattern",this.$element.attr("pattern"),void 0,!0),"undefined"!=typeof this.$element.attr("min")&&"undefined"!=typeof this.$element.attr("max")?this.addConstraint("range",[this.$element.attr("min"),this.$element.attr("max")],void 0,!0):"undefined"!=typeof this.$element.attr("min")?this.addConstraint("min",this.$element.attr("min"),void 0,!0):"undefined"!=typeof this.$element.attr("max")&&this.addConstraint("max",this.$element.attr("max"),void 0,!0),"undefined"!=typeof this.$element.attr("minlength")&&"undefined"!=typeof this.$element.attr("maxlength")?this.addConstraint("length",[this.$element.attr("minlength"),this.$element.attr("maxlength")],void 0,!0):"undefined"!=typeof this.$element.attr("minlength")?this.addConstraint("minlength",this.$element.attr("minlength"),void 0,!0):"undefined"!=typeof this.$element.attr("maxlength")&&this.addConstraint("maxlength",this.$element.attr("maxlength"),void 0,!0);var e=this.$element.attr("type");return"undefined"==typeof e?this:"number"===e?this.addConstraint("type",["number",{step:this.$element.attr("step"),base:this.$element.attr("min")||this.$element.attr("value")}],void 0,!0):/^(email|url|range)$/i.test(e)?this.addConstraint("type",e,void 0,!0):this},_isRequired:function(){return"undefined"==typeof this.constraintsByName.required?!1:!1!==this.constraintsByName.required.requirements},_trigger:function(e){return this.trigger("field:"+e)},_handleWhitespace:function(e){return!0===this.options.trimValue&&o.warnOnce('data-parsley-trim-value="true" is deprecated, please use data-parsley-whitespace="trim"'),"squish"===this.options.whitespace&&(e=e.replace(/\s{2,}/g," ")),"trim"!==this.options.whitespace&&"squish"!==this.options.whitespace&&!0!==this.options.trimValue||(e=o.trimString(e)),e},_getGroupedConstraints:function(){if(!1===this.options.priorityEnabled)return[this.constraints];for(var e=[],t={},i=0;i<this.constraints.length;i++){var n=this.constraints[i].priority;t[n]||e.push(t[n]=[]),t[n].push(this.constraints[i])}return e.sort(function(e,t){return t[0].priority-e[0].priority}),e}};var E=$,P=function(){this.__class__="ParsleyFieldMultiple"};P.prototype={addElement:function(e){return this.$elements.push(e),this},refreshConstraints:function(){var t;if(this.constraints=[],this.$element.is("select"))return this.actualizeOptions()._bindConstraints(),this;for(var i=0;i<this.$elements.length;i++)if(e("html").has(this.$elements[i]).length){t=this.$elements[i].data("ParsleyFieldMultiple").refreshConstraints().constraints;for(var n=0;n<t.length;n++)this.addConstraint(t[n].name,t[n].requirements,t[n].priority,t[n].isDomConstraint)}else this.$elements.splice(i,1);return this},getValue:function(){if("function"==typeof this.options.value)return this.options.value(this);if("undefined"!=typeof this.options.value)return this.options.value;if(this.$element.is("input[type=radio]"))return this._findRelated().filter(":checked").val()||"";if(this.$element.is("input[type=checkbox]")){var t=[];return this._findRelated().filter(":checked").each(function(){t.push(e(this).val())}),t}return this.$element.is("select")&&null===this.$element.val()?[]:this.$element.val()},_init:function(){return this.$elements=[this.$element],this}};var V=function(t,i,n){this.$element=e(t);var r=this.$element.data("Parsley");if(r)return"undefined"!=typeof n&&r.parent===window.Parsley&&(r.parent=n,r._resetOptions(r.options)),"object"==typeof i&&e.extend(r.options,i),r;if(!this.$element.length)throw new Error("You must bind Parsley on an existing element.");if("undefined"!=typeof n&&"ParsleyForm"!==n.__class__)throw new Error("Parent instance must be a ParsleyForm instance");return this.parent=n||window.Parsley,this.init(i)};V.prototype={init:function(e){return this.__class__="Parsley",this.__version__="2.4.4",this.__id__=o.generateID(),this._resetOptions(e),this.$element.is("form")||o.checkAttr(this.$element,this.options.namespace,"validate")&&!this.$element.is(this.options.inputs)?this.bind("parsleyForm"):this.isMultiple()?this.handleMultiple():this.bind("parsleyField")},isMultiple:function(){return this.$element.is("input[type=radio], input[type=checkbox]")||this.$element.is("select")&&"undefined"!=typeof this.$element.attr("multiple")},handleMultiple:function(){var t,i,n=this;if(this.options.multiple||("undefined"!=typeof this.$element.attr("name")&&this.$element.attr("name").length?this.options.multiple=t=this.$element.attr("name"):"undefined"!=typeof this.$element.attr("id")&&this.$element.attr("id").length&&(this.options.multiple=this.$element.attr("id"))),
this.$element.is("select")&&"undefined"!=typeof this.$element.attr("multiple"))return this.options.multiple=this.options.multiple||this.__id__,this.bind("parsleyFieldMultiple");if(!this.options.multiple)return o.warn("To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.",this.$element),this;this.options.multiple=this.options.multiple.replace(/(:|\.|\[|\]|\{|\}|\$)/g,""),"undefined"!=typeof t&&e('input[name="'+t+'"]').each(function(t,i){e(i).is("input[type=radio], input[type=checkbox]")&&e(i).attr(n.options.namespace+"multiple",n.options.multiple)});for(var r=this._findRelated(),s=0;s<r.length;s++)if(i=e(r.get(s)).data("Parsley"),"undefined"!=typeof i){this.$element.data("ParsleyFieldMultiple")||i.addElement(this.$element);break}return this.bind("parsleyField",!0),i||this.bind("parsleyFieldMultiple")},bind:function(t,i){var n;switch(t){case"parsleyForm":n=e.extend(new w(this.$element,this.domOptions,this.options),new u,window.ParsleyExtend)._bindFields();break;case"parsleyField":n=e.extend(new E(this.$element,this.domOptions,this.options,this.parent),new u,window.ParsleyExtend);break;case"parsleyFieldMultiple":n=e.extend(new E(this.$element,this.domOptions,this.options,this.parent),new P,new u,window.ParsleyExtend)._init();break;default:throw new Error(t+"is not a supported Parsley type")}return this.options.multiple&&o.setAttr(this.$element,this.options.namespace,"multiple",this.options.multiple),"undefined"!=typeof i?(this.$element.data("ParsleyFieldMultiple",n),n):(this.$element.data("Parsley",n),n._actualizeTriggers(),n._trigger("init"),n)}};var M=e.fn.jquery.split(".");if(parseInt(M[0])<=1&&parseInt(M[1])<8)throw"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.";M.forEach||o.warn("Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim");var O=e.extend(new u,{$element:e(document),actualizeOptions:null,_resetOptions:null,Factory:V,version:"2.4.4"});e.extend(E.prototype,y.Field,u.prototype),e.extend(w.prototype,y.Form,u.prototype),e.extend(V.prototype,u.prototype),e.fn.parsley=e.fn.psly=function(t){if(this.length>1){var i=[];return this.each(function(){i.push(e(this).parsley(t))}),i}return e(this).length?new V(this,t):void o.warn("You must bind Parsley on an existing element.")},"undefined"==typeof window.ParsleyExtend&&(window.ParsleyExtend={}),O.options=e.extend(o.objectCreate(l),window.ParsleyConfig),window.ParsleyConfig=O.options,window.Parsley=window.psly=O,window.ParsleyUtils=o;var A=window.Parsley._validatorRegistry=new m(window.ParsleyConfig.validators,window.ParsleyConfig.i18n);window.ParsleyValidator={},e.each("setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator".split(" "),function(t,i){window.Parsley[i]=e.proxy(A,i),window.ParsleyValidator[i]=function(){var e;return o.warnOnce("Accessing the method '"+i+"' through ParsleyValidator is deprecated. Simply call 'window.Parsley."+i+"(...)'"),(e=window.Parsley)[i].apply(e,arguments)}}),window.Parsley.UI=y,window.ParsleyUI={removeError:function(e,t,i){var n=!0!==i;return o.warnOnce("Accessing ParsleyUI is deprecated. Call 'removeError' on the instance directly. Please comment in issue 1073 as to your need to call this method."),e.removeError(t,{updateClass:n})},getErrorsMessages:function(e){return o.warnOnce("Accessing ParsleyUI is deprecated. Call 'getErrorsMessages' on the instance directly."),e.getErrorsMessages()}},e.each("addError updateError".split(" "),function(e,t){window.ParsleyUI[t]=function(e,i,n,r,s){var a=!0!==s;return o.warnOnce("Accessing ParsleyUI is deprecated. Call '"+t+"' on the instance directly. Please comment in issue 1073 as to your need to call this method."),e[t](i,{message:n,assert:r,updateClass:a})}}),!1!==window.ParsleyConfig.autoBind&&e(function(){e("[data-parsley-validate]").length&&e("[data-parsley-validate]").parsley()});var R=e({}),T=function(){o.warnOnce("Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley")},q="parsley:";e.listen=function(e,n){var r;if(T(),"object"==typeof arguments[1]&&"function"==typeof arguments[2]&&(r=arguments[1],n=arguments[2]),"function"!=typeof n)throw new Error("Wrong parameters");window.Parsley.on(i(e),t(n,r))},e.listenTo=function(e,n,r){if(T(),!(e instanceof E||e instanceof w))throw new Error("Must give Parsley instance");if("string"!=typeof n||"function"!=typeof r)throw new Error("Wrong parameters");e.on(i(n),t(r))},e.unsubscribe=function(e,t){if(T(),"string"!=typeof e||"function"!=typeof t)throw new Error("Wrong arguments");window.Parsley.off(i(e),t.parsleyAdaptedCallback)},e.unsubscribeTo=function(e,t){if(T(),!(e instanceof E||e instanceof w))throw new Error("Must give Parsley instance");e.off(i(t))},e.unsubscribeAll=function(t){T(),window.Parsley.off(i(t)),e("form,input,textarea,select").each(function(){var n=e(this).data("Parsley");n&&n.off(i(t))})},e.emit=function(e,t){var n;T();var r=t instanceof E||t instanceof w,s=Array.prototype.slice.call(arguments,r?2:1);s.unshift(i(e)),r||(t=window.Parsley),(n=t).trigger.apply(n,_toConsumableArray(s))};e.extend(!0,O,{asyncValidators:{"default":{fn:function(e){return e.status>=200&&e.status<300},url:!1},reverse:{fn:function(e){return e.status<200||e.status>=300},url:!1}},addAsyncValidator:function(e,t,i,n){return O.asyncValidators[e]={fn:t,url:i||!1,options:n||{}},this}}),O.addValidator("remote",{requirementType:{"":"string",validator:"string",reverse:"boolean",options:"object"},validateString:function(t,i,n,r){var s,a,o={},l=n.validator||(!0===n.reverse?"reverse":"default");if("undefined"==typeof O.asyncValidators[l])throw new Error("Calling an undefined async validator: `"+l+"`");i=O.asyncValidators[l].url||i,i.indexOf("{value}")>-1?i=i.replace("{value}",encodeURIComponent(t)):o[r.$element.attr("name")||r.$element.attr("id")]=t;var u=e.extend(!0,n.options||{},O.asyncValidators[l].options);s=e.extend(!0,{},{url:i,data:o,type:"GET"},u),r.trigger("field:ajaxoptions",r,s),a=e.param(s),"undefined"==typeof O._remoteCache&&(O._remoteCache={});var d=O._remoteCache[a]=O._remoteCache[a]||e.ajax(s),h=function(){var t=O.asyncValidators[l].fn.call(r,d,i,n);return t||(t=e.Deferred().reject()),e.when(t)};return d.then(h,h)},priority:-1}),O.on("form:submit",function(){O._remoteCache={}}),window.ParsleyExtend.addAsyncValidator=function(){return ParsleyUtils.warnOnce("Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`"),O.addAsyncValidator.apply(O,arguments)},O.addMessages("en",{defaultMessage:"This value seems to be invalid.",type:{email:"This value should be a valid email.",url:"This value should be a valid url.",number:"This value should be a valid number.",integer:"This value should be a valid integer.",digits:"This value should be digits.",alphanum:"This value should be alphanumeric."},notblank:"This value should not be blank.",required:"This value is required.",pattern:"This value seems to be invalid.",min:"This value should be greater than or equal to %s.",max:"This value should be lower than or equal to %s.",range:"This value should be between %s and %s.",minlength:"This value is too short. It should have %s characters or more.",maxlength:"This value is too long. It should have %s characters or fewer.",length:"This value length is invalid. It should be between %s and %s characters long.",mincheck:"You must select at least %s choices.",maxcheck:"You must select %s choices or fewer.",check:"You must select between %s and %s choices.",equalto:"This value should be the same."}),O.setLocale("en");var D=new n;D.install();var I=O;return I});
//# sourceMappingURL=parsley.min.js.map
		/*global document, location, window, DF */
		/**bin
		* @fileOverview Functionality for component <b>/path/components/dynamicform</b>
		*/
		var DF = (function () {
		/**
		* Functionality related to behavior for the dynamic form creation
		* <p>
		* /path/components/dynamicform component.
		* @namespace Contains functionality for the dynamic form creation
		*/
		// ------------------------------------------------------------------------------------------------------------------
		var //VARIABLES
			cookieKey = 'CampaignVistorID',
			globalBlindSubmit=false,
			existed=false,
			isExpired=false,
			displayFormjsonInp = $('#displayFormjson').val(),
			displayFormjson = JSON.parse(displayFormjsonInp),
			contactJsonPath = '/corpcomsvc/campaign/campaignformprocess',
			assetsLookupData = '/corpcomsvc/campaign/assetlookup',
			lastSubmittedData={}, restFormData={}, onlyStateOptions ='', selZipRequired=false, selStateRequired=false, gridSize = 12,
			isCookie, lookupData, formInnerHtml, cookieVal, docID, docIdParam, errorPage,formMode,responseType,assetLookupFlag,queryString,authoredQueryString,
			foundCountry,code,countryCodeVal,onLoadCountry,geoOnLoad,optInMsg,optOutMsg,
			//getting values from contact lookup
			gfLastRegistrationTimestamp,geo, optIn, optInValue, softOptInValue,blogSubscriptionSHNValue,

			//getting values from display lookup
			formAction, lookup, globalBlindSubmit, blindSubmit, campaignFormType, thankyoupage, formid, customFieldInfo,

			//ARRAYS and Objects
			formDataObj= {},
			formDataString= '',
			arrDisplayJSON = [],
			formActionObj = [],
			countries =[],
			assetsLookupReturnArr = [],
			arrDisplayHidden= [],


			//METHODS
			createRandomString, readCookie,readRepeatCookie, setCookie, getDocId, getCountryByCode, getRegionCode, getDisplayJSON, getAssetsLookupData, getParameterByName, getLookupData, getSNSLookupData, getLookupType, existingUser, createDynamicForm, updateHiddenFields, showLoader, hideLoader,
			submitForm,submitSNSForm, autoBlindSubmit,autoSubmitSNS, getCountryByGeo, manualBlindSubmit, countDays, init;

			//new arrays for country recognition logic
			var countryListData = [{"country":"Afghanistan","code":"AF","region":"EMEA"},{"country":"Aland Islands","code":"AX","region":"EMEA"},{"country":"Albania","code":"AL","region":"EMEA"},
									{"country":"Algeria","code":"DZ","region":"EMEA"},{"country":"Samoa American","code":"AS","region":"APAC"},{"country":"Andorra","code":"AD","region":"EMEA"},
									{"country":"Angola","code":"AO","region":"EMEA"},{"country":"Anguilla","code":"AI","region":"LTAM"},{"country":"Antarctica","code":"AQ","region":"APAC"},
									{"country":"Antigua/Barbuda","code":"AG","region":"LTAM"},{"country":"Argentina","code":"AR","region":"LTAM"},{"country":"Armenia","code":"AM","region":"EMEA"},
									{"country":"Aruba","code":"AW","region":"LTAM"},{"country":"Australia","code":"AU","region":"APAC"},{"country":"Austria","code":"AT","region":"EMEA"},
									{"country":"Azerbaijan","code":"AZ","region":"EMEA"},{"country":"Bahamas","code":"BS","region":"LTAM"},{"country":"Bahrain","code":"BH","region":"EMEA"},
									{"country":"Bangladesh","code":"BD","region":"APAC"},{"country":"Barbados","code":"BB","region":"LTAM"},{"country":"Belarus","code":"BY","region":"EMEA"},
									{"country":"Belgium","code":"BE","region":"EMEA"},{"country":"Belize","code":"BZ","region":"LTAM"},{"country":"Benin","code":"BJ","region":"EMEA"},
									{"country":"Bermuda","code":"BM","region":"LTAM"},{"country":"Bhutan","code":"BT","region":"APAC"},{"country":"Bolivia","code":"BO","region":"LTAM"},
									{"country":"Bonaire","code":"BQ","region":"LTAM"},{"country":"Bosnia-Herz.","code":"BA","region":"EMEA"},{"country":"Botswana","code":"BW","region":"EMEA"},
									{"country":"Bouvet Island","code":"BV","region":"EMEA"},{"country":"Brazil","code":"BR","region":"LTAM"},{"country":"Brit.Ind.Oc.Ter","code":"IO","region":"APAC"},
									{"country":"Brunei Darussalam","code":"BN","region":"APAC"},{"country":"Bulgaria","code":"BG","region":"EMEA"},
									{"country":"Burkina-Faso","code":"BF","region":"EMEA"},{"country":"Burundi","code":"BI","region":"EMEA"},{"country":"Cambodia","code":"KH","region":"APAC"},
									{"country":"Cameroon","code":"CM","region":"EMEA"},{"country":"Canada","code":"CA","region":"EMEA"},{"country":"Cape Verde","code":"CV","region":"EMEA"},
									{"country":"Cayman Islands","code":"KY","region":"LTAM"},{"country":"Central African Republic","code":"CF","region":"EMEA"},
									{"country":"Chad","code":"TD","region":"EMEA"},{"country":"Chile","code":"CL","region":"LTAM"},{"country":"China","code":"CN","region":"APAC"},
									{"country":"Christmas Island","code":"CX","region":"APAC"},{"country":"Coconut Islands","code":"CC","region":"APAC"},{"country":"Colombia","code":"CO","region":"LTAM"},
									{"country":"Comoros","code":"KM","region":"EMEA"},{"country":"Congo","code":"CG","region":"EMEA"},
									{"country":"Cook Islands","code":"CK","region":"APAC"},{"country":"Costa Rica","code":"CR","region":"LTAM"},{"country":"Ivory Coast","code":"CI","region":"EMEA"},
									{"country":"Croatia","code":"HR","region":"EMEA"},{"country":"Cuba","code":"CU","region":"LTAM"},{"country":"Curacao","code":"CW","region":"LTAM"},
									{"country":"Cyprus","code":"CY","region":"EMEA"},{"country":"Czech Republic","code":"CZ","region":"EMEA"},{"country":"Denmark","code":"DK","region":"EMEA"},
									{"country":"Djibouti","code":"DJ","region":"EMEA"},{"country":"Dominica","code":"DM","region":"LTAM"},{"country":"Dominican Republic","code":"DO","region":"LTAM"},
									{"country":"Ecuador","code":"EC","region":"LTAM"},{"country":"Egypt","code":"EG","region":"EMEA"},{"country":"El Salvador","code":"SV","region":"LTAM"},
									{"country":"Equatorial Guinea","code":"GQ","region":"EMEA"},{"country":"Eritrea","code":"ER","region":"EMEA"},{"country":"Estonia","code":"EE","region":"EMEA"},
									{"country":"Ethiopia","code":"ET","region":"EMEA"},{"country":"Falkland Islnds","code":"FK","region":"LTAM"},{"country":"Faroe Islands","code":"FO","region":"EMEA"},
									{"country":"Fiji","code":"FJ","region":"APAC"},{"country":"Finland","code":"FI","region":"EMEA"},{"country":"France","code":"FR","region":"EMEA"},
									{"country":"French Guiana","code":"GF","region":"LTAM"},{"country":"French Polynesia","code":"PF","region":"APAC"},
									{"country":"French Southern Territories","code":"TF","region":"APAC"},{"country":"Gabon","code":"GA","region":"EMEA"},{"country":"Gambia","code":"GM","region":"EMEA"},
									{"country":"Georgia","code":"GE","region":"EMEA"},{"country":"Germany","code":"DE","region":"EMEA"},{"country":"Ghana","code":"GH","region":"EMEA"},
									{"country":"Gibraltar","code":"GI","region":"EMEA"},{"country":"Greece","code":"GR","region":"EMEA"},{"country":"Greenland","code":"GL","region":"EMEA"},
									{"country":"Grenada","code":"GD","region":"LTAM"},{"country":"Guadeloupe","code":"GP","region":"LTAM"},{"country":"Guam","code":"GU","region":"LTAM"},
									{"country":"Guatemala","code":"GT","region":"LTAM"},{"country":"Guernsey","code":"GG","region":"EMEA"},{"country":"Guinea","code":"GN","region":"EMEA"},
									{"country":"Guinea-Bissau","code":"GW","region":"EMEA"},{"country":"Guyana","code":"GY","region":"LTAM"},{"country":"Haiti","code":"HT","region":"LTAM"},
									{"country":"Heard and Mc Donald Islands","code":"HM","region":"APAC"},{"country":"Vatican City","code":"VA","region":"EMEA"},{"country":"Honduras","code":"HN","region":"LTAM"},
									{"country":"Hong Kong","code":"HK","region":"APAC"},{"country":"Hungary","code":"HU","region":"EMEA"},{"country":"Iceland","code":"IS","region":"EMEA"},
									{"country":"India","code":"IN","region":"APAC"},{"country":"Indonesia","code":"ID","region":"APAC"},{"country":"Iran","code":"IR","region":"EMEA"},
									{"country":"Iraq","code":"IQ","region":"EMEA"},{"country":"Ireland","code":"IE","region":"EMEA"},{"country":"Isle of Man","code":"IM","region":"EMEA"},
									{"country":"Israel","code":"IL","region":"EMEA"},{"country":"Italy","code":"IT","region":"EMEA"},{"country":"Jamaica","code":"JM","region":"LTAM"},
									{"country":"Japan","code":"JP","region":"APAC"},{"country":"Jersey","code":"JE","region":"EMEA"},{"country":"Jordan","code":"JO","region":"EMEA"},
									{"country":"Kazakhstan","code":"KZ","region":"EMEA"},{"country":"Kenya","code":"KE","region":"EMEA"},{"country":"Kiribati","code":"KI","region":"APAC"},
									{"country":"South Korea","code":"KV","region":"APAC"},{"country":"Korea","code":"KR","region":"APAC"},{"country":"Kosovo","code":"KO","region":"EMEA"},
									{"country":"Kuwait","code":"KW","region":"EMEA"},{"country":"Kyrgyzstan","code":"KG","region":"EMEA"},{"country":"Laos","code":"LA","region":"APAC"},
									{"country":"Latvia","code":"LV","region":"EMEA"},{"country":"Lebanon","code":"LB","region":"EMEA"},{"country":"Lesotho","code":"LS","region":"EMEA"},
									{"country":"Liberia","code":"LR","region":"EMEA"},{"country":"Libya","code":"LY","region":"EMEA"},{"country":"Liechtenstein","code":"LI","region":"EMEA"},
									{"country":"Lithuania","code":"LT","region":"EMEA"},{"country":"Luxembourg","code":"LU","region":"EMEA"},{"country":"Macau","code":"MO","region":"APAC"},
									{"country":"Macedonia","code":"MK","region":"EMEA"},{"country":"Madagascar","code":"MG","region":"EMEA"},{"country":"Malawi","code":"MW","region":"EMEA"},
									{"country":"Malaysia","code":"MY","region":"APAC"},{"country":"Maldives","code":"MV","region":"APAC"},{"country":"Mali","code":"ML","region":"EMEA"},
									{"country":"Malta","code":"MT","region":"EMEA"},{"country":"Marshall Islnds","code":"MH","region":"APAC"},{"country":"Martinique","code":"MQ","region":"LTAM"},
									{"country":"Mauritania","code":"MR","region":"EMEA"},{"country":"Mauritius","code":"MU","region":"EMEA"},{"country":"Mayotte","code":"YT","region":"EMEA"},
									{"country":"Mexico","code":"MX","region":"LTAM"},{"country":"Micronesia","code":"FM","region":"APAC"},{"country":"Moldova","code":"MD","region":"EMEA"},
									{"country":"Monaco","code":"MC","region":"EMEA"},{"country":"Mongolia","code":"MN","region":"APAC"},{"country":"Montenegro","code":"ME","region":"EMEA"},
									{"country":"Montserrat","code":"MS","region":"LTAM"},{"country":"Morocco","code":"MA","region":"EMEA"},{"country":"Mozambique","code":"MZ","region":"EMEA"},
									{"country":"Myanmar","code":"MM","region":"APAC"},{"country":"Namibia","code":"NA","region":"EMEA"},{"country":"Nauru","code":"NR","region":"APAC"},{"country":"Nepal","code":"NP","region":"APAC"},
									{"country":"Netherlands","code":"NL","region":"EMEA"},{"country":"Netherlands Antilles","code":"NL","region":"LTAM"},{"country":"New Caledonia","code":"NC","region":"EMEA"},{"country":"New Zealand","code":"NZ","region":"APAC"},
									{"country":"Nicaragua","code":"NI","region":"LTAM"},{"country":"Niger","code":"NE","region":"EMEA"},{"country":"Nigeria","code":"NG","region":"EMEA"},{"country":"Niue Islands","code":"NU","region":"APAC"},
									{"country":"Norfolk Island","code":"NF","region":"APAC"},{"country":"N.Mariana Islnd","code":"MP","region":"APAC"},{"country":"Norway","code":"NO","region":"EMEA"},{"country":"Oman","code":"OM","region":"EMEA"},
									{"country":"Pakistan","code":"PK","region":"EMEA"},{"country":"Palau","code":"PW","region":"APAC"},{"country":"Palestine State","code":"PS","region":"EMEA"},{"country":"Panama","code":"PA","region":"LTAM"},
									{"country":"Papua New Guinea","code":"PG","region":"APAC"},{"country":"Paraguay","code":"PY","region":"LTAM"},{"country":"Peru","code":"PE","region":"LTAM"},{"country":"Philippines","code":"PH","region":"APAC"},
									{"country":"Pitcairn Islnds","code":"PN","region":"APAC"},{"country":"Poland","code":"PL","region":"EMEA"},{"country":"Portugal","code":"PT","region":"EMEA"},{"country":"Puerto Rico","code":"PR","region":"LTAM"},
									{"country":"Qatar","code":"QA","region":"EMEA"},{"country":"Reunion","code":"RE","region":"EMEA"},{"country":"Romania","code":"RO","region":"EMEA"},{"country":"Russian Federation","code":"RU","region":"EMEA"},
									{"country":"Rwanda","code":"RW","region":"EMEA"},{"country":"St. Barthelemy","code":"BL","region":"LTAM"},{"country":"St. Helena","code":"SH","region":"EMEA"},{"country":"Saint Kitts and Nevis","code":"KN","region":"LTAM"},
									{"country":"St. Lucia","code":"LC","region":"LTAM"},{"country":"St. Martin","code":"MF","region":"LTAM"},{"country":"St. Pierre and Miquelon","code":"PM","region":"LTAM"},{"country":"St. Vincent","code":"VC","region":"LTAM"},
									{"country":"Western Samoa","code":"WS","region":"APAC"},{"country":"San Marino","code":"SM","region":"EMEA"},{"country":"Sao Tome and Principe","code":"ST","region":"EMEA"},{"country":"Saudi Arabia","code":"SA","region":"EMEA"},
									{"country":"Senegal","code":"SN","region":"EMEA"},{"country":"Serbia","code":"RS","region":"EMEA"},{"country":"Seychelles","code":"SC","region":"EMEA"},{"country":"Sierra Leone","code":"SL","region":"EMEA"},
									{"country":"Singapore","code":"SG","region":"APAC"},{"country":"Sint Maarten","code":"SX","region":"LTAM"},{"country":"Slovak Republic","code":"SK","region":"EMEA"},{"country":"Slovenia","code":"SI","region":"EMEA"},
									{"country":"Solomon Islands","code":"SB","region":"APAC"},{"country":"Somalia","code":"SO","region":"EMEA"},{"country":"South Africa","code":"ZA","region":"EMEA"},{"country":"S. Sandwich Ins","code":"GS","region":"LTAM"},
									{"country":"South Sudan","code":"SS","region":"EMEA"},{"country":"Spain","code":"ES","region":"EMEA"},{"country":"Sri Lanka","code":"LK","region":"APAC"},{"country":"Sudan","code":"SD","region":"EMEA"},
									{"country":"Suriname","code":"SR","region":"LTAM"},{"country":"Svalbard","code":"SJ","region":"EMEA"},{"country":"Swaziland","code":"SZ","region":"EMEA"},{"country":"Sweden","code":"SE","region":"EMEA"},
									{"country":"Switzerland","code":"CH","region":"EMEA"},{"country":"Syria","code":"SY","region":"EMEA"},{"country":"Taiwan","code":"TW","region":"APAC"},{"country":"Tajikistan","code":"TJ","region":"EMEA"},
									{"country":"Tanzania","code":"TZ","region":"EMEA"},{"country":"Thailand","code":"TH","region":"APAC"},{"country":"Timor-Leste","code":"TL","region":"APAC"},{"country":"Togo","code":"TG","region":"EMEA"},
									{"country":"Tokelau Islands","code":"TK","region":"APAC"},{"country":"Tonga","code":"TO","region":"APAC"},{"country":"Trinidad and Tobago","code":"TT","region":"LTAM"},{"country":"Tunisia","code":"TN","region":"EMEA"},
									{"country":"Turkey","code":"TR","region":"EMEA"},{"country":"Turkmenistan","code":"TM","region":"EMEA"},{"country":"Turks and Caicos Islands","code":"TC","region":"LTAM"},{"country":"Tuvalu","code":"TV","region":"APAC"},
									{"country":"Uganda","code":"UG","region":"EMEA"},{"country":"Ukraine","code":"UA","region":"EMEA"},{"country":"United Arab Emirates","code":"AE","region":"EMEA"},{"country":"United Kingdom","code":"GB","region":"EMEA"},
									{"country":"USA","code":"US","region":"US"},{"country":"United States Minor Outlying","code":"UM","region":"APAC"},{"country":"Uruguay","code":"UY","region":"LTAM"},{"country":"Uzbekistan","code":"UZ","region":"EMEA"},
									{"country":"Vanuatu","code":"VU","region":"APAC"},{"country":"Venezuela","code":"VE","region":"LTAM"},{"country":"Vietnam","code":"VN","region":"APAC"},{"country":"Virgin Islands British","code":"VG","region":"LTAM"},
									{"country":"Virgin Islands U.S.","code":"VI","region":"LTAM"},{"country":"Wallis and Futuna Islands","code":"WF","region":"APAC"},{"country":"Western Sahara","code":"EH","region":"EMEA"},
									{"country":"Yemen","code":"YE","region":"EMEA"},{"country":"Zambia","code":"ZM","region":"EMEA"},{"country":"Zimbabwe","code":"ZW","region":"EMEA"}];

				var checkThree= ['Australia','Chile','China','Colombia','Dominican Republic','Poland','South Korea','Taiwan'];

		/**
		* @function: to create random string to use cookie name
		* @memberOf DF
		* @param: none.
		* @returns: string.
		*/
		// ------------------------------------------------------------------------------------------------------------------
		createRandomString = function () {
			var randomVal = '';
			var str = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
			for (var i = 0; i < 8; i++)
					randomVal += str.charAt(Math.floor(Math.random() * str.length));
					return randomVal;
				};

		/**
		* @function: to get/set cookie expiry
		* @memberOf DF
		* @param: none.
		* @returns:
		*/
		// ------------------------------------------------------------------------------------------------------------------
		setCookie = function () {
			setTimeout(function(){
				var expiryDays = $(document).find('#cookieExpiryDays').val();
					var d = new Date();
					d.setTime(d.getTime() + (expiryDays*24*60*60*1000));
					var expires = ";expires="+d.toUTCString();
					expires ? ';expires=' + expires : '';
					//console.log(cookieKey + '=' + escape(cookieVal) + expires);
					if(!isCookie){
						document.cookie = cookieKey + '=' + escape(readRepeatCookie()) + expires;
					}
			},200)
			};


		/**
		* @function: to read cookie
		* @memberOf DF
		* @param: string (cookie keyname)
		* @returns: updates global vars values
		*/
		// ------------------------------------------------------------------------------------------------------------------
		readCookie = (function (cookieKey) {
				var pairs = document.cookie.split(";");
                             				var cookieTempValue = "";
                             				var cookieValSplit;
                             				var pointer = -1;
                             				for (var i=0; i<pairs.length; i++){
                             					var pair = pairs[i].split("=");
                             					if(pair[0] != null && pair[0].indexOf("AMCV_0FD024EB6135CAAB0A495CAF")>-1){
                             						pointer = pair[1].indexOf("MCMID");
                             						if(pointer > -1 ){
                             							cookieTempValue = pair[1].substring(pointer, pair[1].length);
                             							cookieValSplit = cookieTempValue.split("%7C");
                             							if(cookieValSplit.length >= 2 ){
                             								cookieVal = cookieValSplit[1];
                             							}
                             						}
                             					}else{
                             						continue;
                             					}
                             				}
			 }(cookieKey));

			 readRepeatCookie=function (){
			 var pairs = document.cookie.split(";");
             				var cookieTempValue = "";
             				var cookieValSplit;
             				var pointer = -1;
             				for (var i=0; i<pairs.length; i++){
             					var pair = pairs[i].split("=");
             					if(pair[0] != null && pair[0].indexOf("AMCV_0FD024EB6135CAAB0A495CAF")>-1){
             						pointer = pair[1].indexOf("MCMID");
             						if(pointer > -1 ){
             							cookieTempValue = pair[1].substring(pointer, pair[1].indexOf("MCAAMLH"));
             							cookieValSplit = cookieTempValue.split("%7C");
             							if(cookieValSplit.length >= 2 ){
             								cookieVal = cookieValSplit[1];
             							}
             						}
             					}else{
             						continue;
             					}
             				}
             				return cookieVal;
			 };

		/**
		* @function: to create random string to use cookie keyname
		* @memberOf DF
		* @param: query param name.
		* @returns: string.
		*/
		// ------------------------------------------------------------------------------------------------------------------
		getParameterByName = function (name) {
				var match = RegExp('[?&]' + name + '=([^&]*)',"i").exec(window.location.search);
				return match && decodeURIComponent(match[1]);
			}

		    /**
		     * @function: to create random string to use cookie keyname
		     * @memberOf DF
		     * @param: query param name.
		     * @returns: string.
		     */
		    // ------------------------------------------------------------------------------------------------------------------
		    getRegion = function () {
						region = (window.location.href.match(/\/..-..\//g)!= null) ?window.location.href.match(/\/..-..\//g)[0]:'en-us' ;
                        region = region.replace(/\//ig,'');
						return  region;
				   };


			var regionCode = getRegion().split('-');
			var finalCode = regionCode[1].toUpperCase();


			//take us,fr as input and search the list for full name of country
			function getCountryByCode(code) {
  								return countryListData.filter(
    						function(countryListData) {
      							return countryListData.code == code
    							});
							}


					//save the name of country into foundCountry var
					var countryCodeJ = getCountryByCode(finalCode);
						countryCodeVal = countryCodeJ[0].country;
						onLoadCountry = countryCodeJ[0].country;

					//console.log("country code eval is-"+countryCodeVal);
					//console.log("on load country is-"+onLoadCountry);


			function getGeoByCode(code){
							return countryListData.filter(
								function(countryListData){
									return countryListData.code == code
								});
							}

					var geoJ = getGeoByCode(finalCode);
						geoOnLoad = geoJ[0].region;

					//console.log("loaded geo is-"+geoOnLoad);


            		getCountryByGeo = function (name) {
  							return countryListData.filter(
      						function(countryListData){
      							return countryListData.country == name
      						});
							}


                    function changeLabelText(label, text) {
 						 var children = label.childNodes;
 							 [].forEach.call(children, function(child) {
    						if (child.nodeType == 3) {
      					child.textContent = text;
   						 }
  					});
					}


				collectHiddenObj = function () {
		        var url = window.location.href.split("?"),
		            myReferer = ''
		        for (i = 0; i < url.length; i++) {
		            formDataObj.formURL = url[0];
					if(url.length>1){
						formDataObj.querystring = url[1].replace(new RegExp('&','g'), '::');
					}
		        }
		        if (document.referrer) {
		            myReferer = document.referrer;
		        }
						var userAgent = navigator.userAgent;
		        formDataObj.referrer = myReferer;
				formDataObj.formType = formType;
		        formDataObj.formName = formName.replace('’','\'');
		        formDataObj.formid = formid;
		        formDataObj.campaignId = readRepeatCookie();//cookieVal;
		        if(thankyoupage == null){
               		 thankyoupage = "";
               	}
                    formDataObj.redirect = thankyoupage.replace("en-us/",getRegion() + "/" );
				if(queryString!=undefined){
					formDataObj.authoredQueryString = queryString.replace(new RegExp('&','g'), '::');
				}
		        formDataObj.lookup = lookup;
		        formDataObj.errorPage = errorPage;
		        formDataObj.docID = docID;
		        formDataObj.docIdParam = docIdParam;
		        formDataObj.geo = geo;
		        formDataObj.region = getRegion();
		        formDataObj.userAgent = userAgent;
				formDataObj.responseType = "Form Submit";
				if(assetLookup){
					formDataObj.assetLookupFlag = assetLookup;
				}
				if(formDataObj.formMode == undefined ){
                  formDataObj.formMode = "full";
				}
		       // $.each(formDataObj, function (key, val) {
				//	if(val!=undefined){
				//		formDataString += '&' + key + '=' + val;
				//	}
		       // });
						//console.log(formDataString);
		       // return formDataString;
		       return formDataObj;
		    };
		/**
		* @function: to get docId
		* @memberOf DF
		* @param: query param name.
		* @returns: string.
		*/
		// ------------------------------------------------------------------------------------------------------------------
		getDocId = function () {
			var docIdParamVal = getParameterByName(docIdParam);
			if(docIdParamVal != null){
			 docID = docIdParamVal;
			}
		};

		/**
		* @function: to get user type new/existing
		* @memberOf DF
		* @param: string
		* @returns: updates global vars values
		*/
		// ------------------------------------------------------------------------------------------------------------------
		getLookupType = function (lookup) {
			var addParam, cid = getParameterByName('contactid');
			//cid = cid == null ? cookieVal : cid;
			var dataObj = {};
				switch (lookup) {
					case "cookie":
					case "contactid":
					case "both":
						dataObj.lookup = lookup;
						dataObj.campaignFormType = campaignFormType;
						dataObj.cid = cid;
						dataObj.campaignId = readRepeatCookie();//cookieVal;
						getLookupData(dataObj)
						break;
					case "email":
					dataObj.lookup = lookup;
					dataObj.campaignFormType = campaignFormType;
					dataObj.campaignId = readRepeatCookie();//cookieVal;
					getSNSLookupData();
					break;
					default:
						createDynamicForm(arrDisplayJSON)
					}
					//console.log('lookup ==> ' + lookup);
				};

			  getSNSLookupData = function () {
                  var hiddenObj = collectHiddenObj();
				var blindFormData = hiddenObj;
				  $.ajax({
		            url: '/corpcomsvc/campaign/snsBlindformprocess',
		            type: 'GET',
		            dataType: 'json',
					data: blindFormData,
		            beforeSend: function () {
		                //showLoader();
		            },
		            success: function (data) {
		                lookupData = data;
						 if(! ($.isEmptyObject(lookupData))){
					         autoSubmitSNS(lookupData.preferenceData.email);
							}else{
								createDynamicForm(arrDisplayJSON);
							}
						},
					error: function(msg){
                    //console.log("SNS Lookup Ajax Fail");
					}
				});
			  };

			  autoSubmitSNS=function (email) {
				var hiddenObj = collectHiddenObj();
				var blindFormData = hiddenObj;
				//$.extend(blindFormData, email);
				for (i = 0; i < arrDisplayJSON.length; i++) {
					if(arrDisplayJSON[i].type == 'hidden'){
					    var hiddenEleName = arrDisplayJSON[i].name;
						var hiddenVal;
						if(arrDisplayJSON[i].queryparam != undefined){
							hiddenVal = getParameterByName(arrDisplayJSON[i].queryparam);
						}else{
							hiddenVal = arrDisplayJSON[i].value;
						}
						if(hiddenVal){
						    var obj = {};
                            obj[hiddenEleName] = hiddenVal;
                            $.extend(blindFormData, obj);
						}
					}
				}
				 setTimeout(function () {
				 $.ajax({
						 url: '/corpcomsvc/campaign/snsBlindformprocess?email='+email,
						 type: "POST",
						 data: blindFormData,
						 beforeSend: function(){
								//showLoader();
							 },
						 success: function (resp) {
									window.location = resp;
								}
						 })
					 }, 200);

			}

		submitSNSForm=function () {
			$(document).on('click', '.dynFormCta',  function(e){
			$('button.dynFormCta').prop("disabled", true);
			e.preventDefault();
            var hiddenObj = collectHiddenObj();
			var form = $('#dynForm-SNS .dynForm');
			form.parsley().validate();
			if (form.parsley().isValid()){
			var formData = $('form.dynForm').serializeObject();
             $.extend(formData, hiddenObj);
			setTimeout(function () {
				$.ajax({
		            url: '/corpcomsvc/campaign/snsBlindformprocess',
		            type: 'POST',
		            data: formData,
		            beforeSend: function () {
		                //showLoader();
		            },
		            success: function (data) {
		               window.location = data;},
					error: function(msg){
                    //console.log("Error in SNS blind form submission");
					}
				})
				 }, 300);
			}else{

					 $('button.dynFormCta').prop("disabled", false);
						}
						});
};

		    /**
		     * Returns the html decoded string contained within content.
		     * @memberOf DF
		     * @name htmlDecode
		     * @param {String} content The html decoded string.
		     * @returns {String} Returns an html decoded string.
		     * @function: to check cookie exist on browser
		     */
		    // ------------------------------------------------------------------------------------------------------------------
		    getLookupData = function (dataObj) {
		        var lookupReturnArr = [];
		        $.ajax({
		            url: contactJsonPath,
		            type: 'GET',
		            dataType: 'json',
		            data: dataObj,
		            beforeSend: function () {
		                //showLoader();
		            },
		            error: function () {
		                //console.log('Lookup Ajax Fail');
		                gfLastRegistrationTimestamp = '';
		                   createDynamicForm(arrDisplayJSON);
		            },
		            success: function (data) {
		                lookupData = data;
		                if (lookupData == null || lookupData.error) {
		                    gfLastRegistrationTimestamp = '';
		                    //console.log('lookup response is null');
		                    createDynamicForm(arrDisplayJSON);
		                    //setCookie();
		                } else {
                            geo	= lookupData.geo;
                            optIn	= lookupData.optIn;
                            existed = true;
                            //console.log("getting lookupdata");
                            //console.log("existed is true in lookup");
		                    gfLastRegistrationTimestamp = lookupData.dateModified;
		                    if (gfLastRegistrationTimestamp == undefined || gfLastRegistrationTimestamp == null) {
		                        //console.log('response = not null: but  gfLastRegistrationTimestamp is empty or undefined');

		                        createDynamicForm(arrDisplayJSON);
		                        //setCookie();
		                    } else {
								//check expiry based on gfLastRegistrationTimestamp
								var gfDate = new Date(gfLastRegistrationTimestamp);
								var midExpiry = $('#cookieExpiryDays').val();
								if(midExpiry != undefined && midExpiry != null ){
									midExpiry = midExpiry * 1;
									if(isNaN(midExpiry)){
										midExpiry = 180;
									}
								}else{
									//default value set to 180 days
									midExpiry = 180;
								}
								var expiryDate = new Date(gfDate.setDate(gfDate.getDate() + midExpiry));
								if( (new Date().getTime() - expiryDate.getTime()) > 0){
									//expired - lookup set as none
									lookupData = null;
									isExpired = true;
									createDynamicForm(arrDisplayJSON);

                                    // console.log("form for expired user");
								}else{
									//Do lookup
									//console.log('lookupData data for existing user');
									$.each(lookupData, function (key, val) {
										var obj = {};
										obj.name = key;
										obj.value = lookupData[key];
										lookupReturnArr.push(obj);
									});
									//console.log('lookupData.country ==> ' + lookupData.country);
									if (lookupData.country != undefined) {
										$.each(countries, function (key, val) {
											if (countries[key].countrycode == lookupData.country) {
												selZipRequired = countries[key].zipcode;
												  selStateRequired = countries[key].states[1].code;
												//console.log(' selZipRequired --> ' + selZipRequired)
												if(lookupData.stateProvince == null){
													$.each(countries[key].states, function (i, j) {
														onlyStateOptions += '<option id="' + countries[key].states[i].code + '" value="' + countries[key].states[i].code + '" >' + countries[key].states[i].state + '</option>';
													});
												}
											}
										});
									}
									existingUser(lookupReturnArr);
								}
		                    }
		                }
		            }
		        }).done(function () {
		            //hideLoader();
		        });
		    };

		/**
		* Returns the html decoded string contained within content.
		* @memberOf DF
		* @name htmlDecode
		* @param {String} content The html decoded string.
		* @returns number.
		* @function: to check cookie exist on browser
		*/
		// ------------------------------------------------------------------------------------------------------------------
		countDays = function (){
				var da= '4/12/2018', d1 = new Date(da), currentDate = new Date();
				currentDate = currentDate.getMonth()+1 + '/' + currentDate.getDate() + '/' + currentDate.getFullYear();
				var d2 = new Date(currentDate), timeDiff = d2.getTime() - d1.getTime(), DaysDiff = timeDiff / (1000 * 3600 * 24);
				return DaysDiff;
			};


		/**
		* Returns the html decoded string contained within content.
		* @memberOf DF
		* @name htmlDecode
		* @param {String} content The html decoded string.
		* @returns {String} Returns an html decoded string.
		* @function: to check cookie exist on browser
		*/
		// ------------------------------------------------------------------------------------------------------------------
		existingUser = function (lookupReturnArr) {
			if(globalBlindSubmit == true){
					autoBlindSubmit()
				}
			else{
          formDataObj.formMode = "partial";
				// Merge lookupReturnArr into assetsLookupReturnArr, recursively
				//$.extend( true, lookupReturnArr, assetsLookupReturnArr );
				var filteredArr = [], hash = Object.create(null), blindArr= [], isBlindEligible=[];
				lookupReturnArr.forEach(function (a) {
						hash[a.name] = true;
						lastSubmittedData[a.name] = a.value;
						if(a.name == 'globalOptIn'){
							optInValue = a.value;
						}
						if(a.name == 'softOptIn'){
							softOptInValue = a.value;
						}
						if(a.name == 'blogSubscriptionSHN'){
							blogSubscriptionSHNValue = a.value;
						}
						if(a.name == 'country'){
						    countryCodeVal = a.value;
						   // console.log("existing user country is"+countryCodeVal)
						}
				});
				arrDisplayJSON.filter(function (a) {
						if(hash[a.name]){
							blindArr.push(a);

						}else{
							if((a.name == "zipCode" && selZipRequired == "Not Required") || (a.name == "stateProvince" && selStateRequired == "Not Required") ) {
								lastSubmittedData[a.name] = "";
								//console.log(a.name + " added in blind arr");
								blindArr.push(a);
							}else{

								filteredArr.push(a);
							}
						}

						if(a.name == 'email'){
							filteredArr.push(a);
						}

						if(a.name == 'globalOptIn'){
							filteredArr.push(a);

						}

						if(a.name == 'blogSubscriptionSHN'){
							if(blogSubscriptionSHNValue == 0)
							{
								filteredArr.push(a);
							}
						}


				});
				filteredArr.forEach(function (obj) {
					if(obj.type != undefined){
						if(!(obj.type == 'button' || obj.type == 'hidden' || obj.name == 'email' || obj.type == 'description')){
							 if (!(obj.name == 'globalOptIn'  && optInValue == 1)){
								isBlindEligible.push(obj);
							}
						}
					}
				});
				if(isBlindEligible.length > 0){


                    createDynamicForm(filteredArr);
                    if(countryCodeVal){
                        onCountryChangeUpdateState(countryCodeVal);
                        $.each(countries, function(key, val) {
                            if (countries[key].countrycode == countryCodeVal) {
                                onCountryChangeUpdateZipcode(countries[key].zipcode);
                                return false;
                            }
                        });
                    }
				}
				else{
					blindSubmit == 'true' ? autoBlindSubmit() : manualBlindSubmit();
				}
			}
		 };

		/**
		* Returns the html decoded string contained within content.
		*
		* <p>
		* </p>
		*
		* @memberOf DF
		* @name htmlDecode
		* @param {String} content The html decoded string.
		* @returns {String} Returns an html decoded string.
		* @function: to check cookie exist on browser
		*/
		// ------------------------------------------------------------------------------------------------------------------
		createDynamicForm = function (elemObj) {
			var actionDataHtml = '',actAttr = '';
            //console.log("lookup createDynamicForm:: "+formActionObj.formType);
			// -----Form Open
			if(formActionObj.formType=="SNS-Form"){
				formInnerHtml = '<div id="dynForm-SNS"><form class="dynForm form-horizontal" data-campaignvistorid="' + readRepeatCookie() + '" data-redirect-url="' + formActionObj.thankyoupage + '" data-parsley-validate="" acceptcharset="UTF-8">';
			}else{

				var formid = formActionObj.formName ;
                  if (formid != null){
                         formid = formid.toLowerCase().replace(" " , "-");
                   }

				formInnerHtml = '<div id="dynForm" class="custom-form"><form id="'+ formid +'" class="dynForm form-horizontal needs-validation" data-campaignvistorid="' + readRepeatCookie() + '" data-redirect-url="' + formActionObj.thankyoupage + '" data-parsley-validate="" acceptcharset="UTF-8">';
			}

			// -----Form fields creattion
			for (i = 0; i < elemObj.length; i++) {
					createFormElements(elemObj[i])
			};
			// -----Form Close
			formInnerHtml += '</form></div>'

			// -----Placing "form html" to placeholder
			$('.dynFormWrapper').html(formInnerHtml);
				getCountryState();


			if(lookupData != null){
				if(lookupData.country!= undefined && lookupData.stateProvince == null){
					$(document).find('#dynForm form.dynForm select[name=stateProvince]').html(onlyStateOptions);
						if($(document).find('form.dynForm input[name=zipCode]').length > 0){
							setTimeout(function(){
							if(selZipRequired == true || selZipRequired == "Required"){
									 if($('form.dynForm input[name=zipCode]').attr('required') == undefined && $('form.dynForm input[name=zipCode]').attr('required') == null){
											//$(document).find('form.dynForm label[name=zipCode]').append('<i class="required">*</i>');
									}
									$(document).find('form.dynForm input[name=zipCode]').attr('required', 'required');

								}
							else{
								$(document).find('form.dynForm label[name=zipCode] i.required').remove();
								$(document).find('input[name=zipCode]').removeAttr('required');
							}
							}, 200)

						}

					}
			}


			setTimeout(function(){
				//$(document).find('#dynForm form.dynForm').parsley();
					updateHiddenFields();
				},500)
			};


		/**
		* Returns the html decoded string contained within content.
		*
		* <p>
		* </p>
		*
		* @memberOf DF
		* @name htmlDecode
		* @param {String} content The html decoded string.
		* @returns {String} Returns an html decoded string.
		* @function: to check cookie exist on browser
		*/
		// ------------------------------------------------------------------------------------------------------------------
		updateHiddenFields = function(){
				for (i = 0; i < arrDisplayHidden.length; i++) {
					var elName = arrDisplayHidden[i].name,  elQP = arrDisplayHidden[i].queryparam, getQPVal = getParameterByName(elQP);
					if (getQPVal != null){
						//console.log($(document).find('#dynForm .dynForm input[name='+qp+']').length);
						$(document).find('#dynForm .dynForm input[name='+elName+']').val(getQPVal);
					}
				}
				for (i = 0; i < assetsLookupReturnArr.length; i++) {
					var objAL = assetsLookupReturnArr[i];
					if(objAL.name == "thumbnailImage"){
						var objALEle = $('#'+objAL.name);
					    if(objALEle.length > 0){
							 if(objAL.value == ""){
									var imageDamPath = "/_jcr_content/renditions/cq5dam.web.1280.1280.jpeg";
									var assetURL = "";
									for (j = 0; j < assetsLookupReturnArr.length; j++) {
										   var obj = assetsLookupReturnArr[j];
										   if(obj.name == "docURL"){ assetURL = obj.value; break;};
									}
									objAL.value = assetURL + imageDamPath;
							 }
							 objALEle.attr("src", objAL.value);
						}
					}else{
						if(objAL.value != '' || objAL.value == null ){
							$(document).find('#dynForm .dynForm input[name='+objAL.name+']').val(objAL.value);

							var objALEle = $('#'+objAL.name);
							if(objALEle.length > 0){
								//console.log("HTML element found with ID: "+ objAL.name);
								//console.log("Assigned the value to the element::: " + objAL.value);

								if(objAL.name == "description"){
									objALEle.append(objAL.value);
									//console.log( 'description ' + objAL.value);
								}else{
									objALEle.text(objAL.value);
								}
								if(objAL.value != ""){
									objALEle.show();
								}
							}
						}
					}
				}
			}

		/**
		* Returns the html decoded string contained within content.
		*
		* <p>
		* </p>
		*
		* @memberOf DF
		* @name htmlDecode
		* @param {String} content The html decoded string.
		* @returns {String} Returns an html decoded string.
		* @function: to check cookie exist on browser
		*/
		// ------------------------------------------------------------------------------------------------------------------
		getCountryState = function(){
            var countryOptions ='<option id="" value="">Select Country</option>',
            stateOptions ='';

            $.each(countries, function (key, val) {
                countryOptions+= '<option data-zip="'+countries[key].zipcode+'" id="'+countries[key].countrycode+'" value="'+countries[key].countrycode+'" >'+countries[key].countryLabel+'</option>';
            });

            //setTimeout(function(){
                $(document).find('#dynForm form.dynForm select[name=country]').html(countryOptions);
				if(!isExpired){
					$(document).find('#dynForm form.dynForm select[name=stateProvince]').html(stateOptions);
				}
                if(lookupData != null  && !(lookupData.country == '' || lookupData.country == undefined || gfLastRegistrationTimestamp=="" || gfLastRegistrationTimestamp == "undefined")){
					$('select[name="country"]').find("option[value='" + lookupData.country + "']").attr("selected", true);
                }
            //},200);

            $(document).on('change', '#dynForm form.dynForm select[name=country]', function(){
            	optOutMsg = $("#dynForm form.dynForm input[name='globalOptOut']").val();
								//console.log("optout"+optOutMsg);
                 var changedGeo ="";
                  countryCodeVal = $(this).val(), zipRequired = $(this).find(':selected').data('zip');

                    onCountryChangeUpdateState(countryCodeVal);
                    onCountryChangeUpdateZipcode(zipRequired);
                    var geoP = getCountryByGeo(countryCodeVal);
                if(geoP.length>0){
                    changedGeo = geoP[0].region;
                }else{
					// for geoP country not present
					changedGeo = geoOnLoad;
					countryCodeVal = onLoadCountry;
				}

				$("#dynForm form.dynForm input[name='globalOptIn']").prop('checked',false);
				$("#dynForm form.dynForm input[name='globalOptIn']").val("0");

                   // console.log("changed country is"+countryCodeVal);
                    //console.log("changed country so geo is"+changedGeo);
                   // console.log("check user existed or not-"+existed);

                  if(existed && (softOptInValue == 1 ||  optInValue == 1)){
                  	if((changedGeo =='US' || changedGeo =='LTAM') && !checkThree.includes(countryCodeVal)){

                  		//console.log("existed-step 1 check after country dropdown changed");
                  		if($('#global').text().includes(optOutMsg)){
                  			var label =  document.querySelector('#global');
                  			changeLabelText(label, optInMsg);
                  		}

                  		var optOut_exist = document.querySelector('#globalOptOut');
                  		if(optOut_exist){
                  			$("#dynForm form.dynForm input[name=globalOptIn]").removeAttr('id');
                  			//console.log("removing in step1");
                  		}

                  		$("#dynForm form.dynForm input[name=globalOptIn]").val("1");
                    		$("#dynForm form.dynForm input[name=globalOptIn]").hide();

                  	}else if((changedGeo == 'EMEA' || changedGeo == 'APAC') && (!checkThree.includes(countryCodeVal))){
                    		//console.log("existed-step 2 check after country dropdown changed");
                        		var label =  document.querySelector('#global');
                        		var label_text = $("#dynForm form.dynForm input[name='globalOptOut']").val();
                        		if((label_text != "")&&(label_text != undefined)){
							changeLabelText(label, label_text);
						}
                    		$("#dynForm form.dynForm input[name='globalOptIn']").val("1");
                        $("#dynForm form.dynForm input[name=globalOptIn]").attr('id','globalOptOut');
                        //console.log("appending in step2");
                    		$("#dynForm form.dynForm input[name='globalOptIn']").prop('checked',false);
								$("#dynForm form.dynForm input[name=globalOptIn]").show();

                    }else if(checkThree.includes(countryCodeVal)){

                    	if($('#global').text().includes(optOutMsg)){
                  			var label =  document.querySelector('#global');
                  			changeLabelText(label, optInMsg);
                  		}

                  		var optOut_exist = document.querySelector('#globalOptOut');
                  		if(optOut_exist){
                  			$("#dynForm form.dynForm input[name=globalOptIn]").removeAttr('id');
                  			//console.log("removing in step3");
                  		}

                    	//console.log("existed-step 3 check after country dropdown changed");
                    	$("#dynForm form.dynForm input[name='globalOptIn']").prop('checked',true);
                    	$("#dynForm form.dynForm input[name='globalOptIn']").val("1");
                    	$("#dynForm form.dynForm input[name=globalOptIn]").show();

                    	//console.log("country dropdown changed so checkbox changed-3");

                    }}else{
                    	if((changedGeo =='US' || changedGeo =='LTAM') && (!checkThree.includes(countryCodeVal))){
                    		//console.log("not existed-country dropdown changed to US/LTAM");
                    		$("#dynForm form.dynForm input[name=globalOptIn]").val("1");
                    		$("#dynForm form.dynForm input[name=globalOptIn]").hide();
                    	}else{
                    		//console.log("not existed-with checkbox-unchecked")
                    		$("#dynForm form.dynForm input[name=globalOptIn]").attr('style','margin-top:2px;');
                            if(!$("#dynForm form.dynForm input[name=globalOptIn]").is(':checked')){
								$("#dynForm form.dynForm input[name=globalOptIn]").val("0");
                            }
                    	}
                    }
                	            });


		};

		onCountryChangeUpdateZipcode = function(zipRequired) {
			//console.log("zipRequired::"+zipRequired);
		    if(zipRequired == true || (zipRequired != undefined && zipRequired.toLowerCase() == "required")){
                if($('form.dynForm input[name=zipCode]').attr('required') == undefined && $('form.dynForm input[name=zipCode]').attr('required') == null){
                    //$('form.dynForm label[name=zipCode]').append('<i class="required">*</i>');
                }
                $('form.dynForm input[name=zipCode]').attr('required', 'required');
                $('input[name=zipCode]').closest('.form-group').show();
            }
            else{
                $('form.dynForm label[name=zipCode] i.required').remove();
                $('input[name=zipCode]').removeAttr('required');
                $('input[name=zipCode]').removeAttr('data-parsley-required');
                $('input[name=zipCode]').closest('.form-group').hide();
            }
		}

		onCountryChangeUpdateState = function(countryCodeVal){
		    var stateRequired = false;

            if(countryCodeVal == '' || countryCodeVal == undefined){
                $(document).find('#dynForm form.dynForm select[name=stateProvince]').html('<option id="" value="">Select State</option>');
            }
            else{
                stateOptions ='';
                $.each(countries, function (key, val) {
                    if(countries[key].countrycode == countryCodeVal){
                        $.each(countries[key].states, function (i, j) {
                                stateOptions +='<option id="'+countries[key].states[i].code+'" value="'+countries[key].states[i].code+'" >'+countries[key].states[i].state+'</option>';
                            });
                        //code to check if state is mandatory or not
                        if(countries[key].states.length <= 2  && countries[key].states[1].code == "Not Required"){
                            stateRequired = false;
                        }else{
                            stateRequired = true;
                        }
                        return false;
                    }
                });
                $(document).find('#dynForm form.dynForm select[name=stateProvince]').html(stateOptions);
            }
            if(!stateRequired) {
                $('#dynForm form.dynForm select[name=stateProvince]').closest('.form-group').hide();
                $('#dynForm form.dynForm select[name=stateProvince]').removeAttr("required");
                $('#dynForm form.dynForm select[name=stateProvince]').removeAttr("data-parsley-required");
            }else{
                $('#dynForm form.dynForm select[name=stateProvince]').closest('.form-group').show();
                $('#dynForm form.dynForm select[name=stateProvince]').attr('required', 'required');
            }

		}

		/**
		* Returns the html decoded string contained within content.
		*
		* <p>
		* </p>
		*
		* @memberOf DF
		* @name htmlDecode
		* @param {String} content The html decoded string.
		* @returns {String} Returns an html decoded string.
		* @function: to check cookie exist on browser
		*/
		// ------------------------------------------------------------------------------------------------------------------
		createFormElements = function (elObj) {
				var elAttr = ''
				var inputElementClass = "";
				var inputContainerClass = "";
				for (var key in elObj) {
						if(key === "inputElementClass" ){
							inputElementClass = elObj[key];
						}else if(key === "inputContainerClass" ){
							inputContainerClass = elObj[key];
						}else{
							
							elAttr += key + '="' + elObj[key];
							elAttr += '" '
						}
					}
				var hideRow = elObj.type == 'hidden' ? 'hide' : '';
				if(elObj.type =='hidden' && elObj.name =='globalOptOut'){
					optOutMsg = elObj.value;
					//console.log("optout while load-"+optOutMsg);

				}
				
				inputContainerClass = inputContainerClass ==="" ? "form-floating mb-32" : inputContainerClass;
				inputElementClass = inputElementClass ==="" ? "form-control" : inputElementClass;
				
				formInnerHtml += '<div class="'+inputContainerClass +' col-' + gridSize + ' ' + hideRow + '">';



				switch (elObj.type) {
					case "text":
					case "email":
					case "url":
					case "tel":
					case "date":
					case "number":
							if (elObj.required == 'true' && elObj.type != 'text') {
									var req = 'required= '+ elObj.required+'';
							}
								formInnerHtml += '<input class="'+inputElementClass+'" ' + elAttr + '  '+req+'    />';
							break;

					case "radio":
							var selRadio = '';
							if (elObj.required == 'true') {
									var req = 'required='+ elObj.required+'';
							}
							for (r in elObj.multiRadio) {

									selRadio += '<div class="radio"><label><input style="margin-top:2px;" type="radio" value=' + elObj.multiRadio[r].idRadio + ' name=' + elObj.name + '   '+req+' '+'>' + elObj.multiRadio[r].radioLabel + '</label></div>';

							}
							formInnerHtml += '<div class="radio-group">' + selRadio + '</div>';
							break;

					case "checkbox":
							var selCheckBox = '';
							if (elObj.required == 'true') {
									var req = 'required='+ elObj.required+'';
							}
							if(elObj.multiCheckbox && Object.keys(elObj.multiCheckbox).length == 1){
								var sublabel=''
								var subIdcheckbox = '';
								var subClass = 'form-check-input';

								if (elObj.multiCheckbox[1] != undefined && elObj.multiCheckbox[1].checkboxLabel){
									sublabel = elObj.multiCheckbox[1].checkboxLabel;
								}else{
									if(elObj.multiCheckbox["item0"] !=undefined && elObj.multiCheckbox["item0"].checkboxLabel){
										sublabel = elObj.multiCheckbox["item0"].checkboxLabel;
									}
									if(elObj.multiCheckbox["item0"] !=undefined && elObj.multiCheckbox["item0"].idCheckbox){
                                    		subIdcheckbox = elObj.multiCheckbox["item0"].idCheckbox;
                                    }
                                    if(elObj.multiCheckbox["item0"] !=undefined && elObj.multiCheckbox["item0"].class){
                                          subClass = elObj.multiCheckbox["item0"].subClass;
                                                                        }
								}
								//new logic starts
								if(elObj.name == 'globalOptIn'){
									optInMsg = sublabel;
									//console.log("optin"+optInMsg);
								}

								if(existed && (softOptInValue == 1 ||  optInValue == 1)){
									if(elObj.name != 'globalOptIn'){
									selCheckBox += '<div class="form-check"><input  type="checkbox" class="'+subClass+'" value=' + '0' + ' id="' + subIdcheckbox +  '" name=' + elObj.name + ' '+req+' '+'><label for="'+ elObj.name +'">' + sublabel + '</label></div>';

									}else if(elObj.name == 'globalOptIn' && (geoOnLoad =='US' || geoOnLoad =='LTAM')){
										//console.log("step1 check");

										selCheckBox += '<div class="form-check col-12 mb-2"><input type="checkbox" class="'+subClass+'" id="globalOptIn" name="globalOptIn" ckbx-val-sync="#globalOptIn"><label for="globalOptIn">'+sublabel+'</label></div>';

									}else if(elObj.name == 'globalOptIn' && (!checkThree.includes(onLoadCountry))){
										//console.log("step 2 check country");
										var resLabel="";
										if((geoOnLoad == 'EMEA' || geoOnLoad == 'APAC')){
											//console.log("step 2 geo check");
											if(optOutMsg !='' && optOutMsg != undefined){

											 resLabel = optOutMsg;
										}else{
											resLabel = sublabel;
										}
										selCheckBox += '<div class="checkbox"><label id="global"><input style="margin-top:2px;" type="checkbox" id="globalOptOut" value=' + '1' + '  name=' + elObj.name + ' '+req+' '+'>' + resLabel + '</label></div>';
											}
									}else if(elObj.name == 'globalOptIn' && checkThree.includes(onLoadCountry)){

										selCheckBox += '<div class="checkbox"><label id="global"><input style="margin-top:2px;" checked="true" type="checkbox" value=' + '1' + '  name=' + elObj.name + ' '+req+' '+'>' + sublabel + '</label></div>';
											//console.log("step 3 check");
									}

								}else{

									//console.log("on-load user dont exist");

									if(elObj.name == 'globalOptIn' && (geoOnLoad =='US' || geoOnLoad =='LTAM') && (!checkThree.includes(onLoadCountry))){
										//console.log("onload-irrespective of user, checkbox for us and ltam");
										//selCheckBox += '<div class="checkbox"><label id="global"><input style="display: none;" type="checkbox" value=' + '1' + '  name=' + elObj.name + ' '+req+' '+reqValidation+'>' + sublabel + '</label></div>';
											selCheckBox += '<div class="form-check col-12 mb-2"><input type="checkbox" class="'+subClass+'" id="globalOptIn" name="globalOptIn" ckbx-val-sync="#globalOptIn"><label for="globalOptIn">'+sublabel+'</label></div>';
									}else{
											//console.log("onload-not a us or ltam")
										if(elObj.name == 'globalOptIn'){
										//selCheckBox += '<div class="checkbox"><label id="global"><input style="margin-top:2px;" type="checkbox" value=' + '0' + '  name=' + elObj.name + ' '+req+' '+reqValidation+'>' + sublabel + '</label></div>';
										selCheckBox += '<div class="form-check col-12 mb-2"><input type="checkbox" class="'+subClass+'" id="globalOptIn" name="globalOptIn" ckbx-val-sync="#globalOptIn"><label for="globalOptIn">'+sublabel+'</label></div>';

											}else{
												selCheckBox += '<div class="form-check"><input  type="checkbox" class="'+subClass+'" value=' + '0' + ' id="' + subIdcheckbox +  '" name="' + elObj.name + '"  '+req+' '+'><label for="'+ elObj.name +'">' + sublabel + '</label></div>';
											}
									}
								}

								//new logic ends

							}else{
								for (c in elObj.multiCheckbox) {
									var sublabel=''
									if (typeof elObj.multiCheckbox[c].checkboxLabel != "undefined" && elObj.multiCheckbox[c].checkboxLabel){
										sublabel = elObj.multiCheckbox[c].checkboxLabel;
									}
									var subVal='';
									if (typeof elObj.multiCheckbox[c].idCheckbox != "undefined" && elObj.multiCheckbox[c].idCheckbox){
										subVal = elObj.multiCheckbox[c].idCheckbox;
									}
									if(subVal == ''){
									    subVal = elObj.name;
									}

									var subClass = 'form-check-input';
                                    if (typeof elObj.multiCheckbox[c].class != "undefined" && elObj.multiCheckbox[c].class){
                                    		subClass = elObj.multiCheckbox[c].class;
                                    }
									if(typeof elObj.multiCheckbox[c].checkboxLabel != "undefined" || typeof elObj.multiCheckbox[c].idCheckbox != "undefined"){

									if(elObj.name =='globalOptIn'){

										optInMsg = sublabel;
										//console.log("optin from multi box"+optInMsg);

										// new logic starts
										if(existed && (softOptInValue == 1 ||  optInValue == 1)){

								if(elObj.name == 'globalOptIn' && (geoOnLoad =='US' || geoOnLoad =='LTAM')){
									//console.log("step1 check");

									selCheckBox += '<div class="checkbox"><label id="global"><input style="display: none;" type="checkbox" value=' + '1' + '  name=' + elObj.name + ' '+req+' '+'>' + sublabel + '</label></div>';

								}else if(elObj.name == 'globalOptIn' && (!checkThree.includes(onLoadCountry))){
									//console.log("step 2 check country");
									var resLabel="";
									if((geoOnLoad == 'EMEA' || geoOnLoad == 'APAC')){
										//console.log("step 2 geo check");
										if(optOutMsg !='' && optOutMsg != undefined){

										 resLabel = optOutMsg;
									}else{
										resLabel = sublabel;
									}
									selCheckBox += '<div class="checkbox"><label id="global"><input style="margin-top:2px;" type="checkbox" id="globalOptOut" value=' + '1' + '  name=' + elObj.name + ' '+req+' '+'>' + resLabel + '</label></div>';
										}
								}else if(elObj.name == 'globalOptIn' && checkThree.includes(onLoadCountry)){

									selCheckBox += '<div class="checkbox"><label id="global"><input style="margin-top:2px;" checked="true" type="checkbox" value=' + '1' + '  name=' + elObj.name + ' '+req+' '+'>' + sublabel + '</label></div>';
										//console.log("step 3 check");
								}}else{

									//console.log("on-load user dont exist");

								if(elObj.name == 'globalOptIn' && (geoOnLoad =='US' || geoOnLoad =='LTAM') && (!checkThree.includes(onLoadCountry))){
									//console.log("onload-irrespective of user, checkbox for us and ltam");
									selCheckBox += '<div class="checkbox"><label id="global"><input style="display: none;" type="checkbox" value=' + '1' + '  name=' + elObj.name + ' '+req+' '+'>' + sublabel + '</label></div>';
								}else{
										//console.log("onload-not a us or ltam")
									selCheckBox += '<div class="checkbox"><label id="global"><input style="margin-top:2px;" type="checkbox" value=' + '0' + '  name=' + subVal + '  id='+subVal+ '  '+req+' '+'>' + sublabel + '</label></div>';
								}}}else{
									selCheckBox += '<div class="form-check"><input  type="checkbox" class="'+subClass +'" value=' + '0' + '  name=' + subVal + '  id='+ subVal + '  ' +req+' '+'><label for="'+ elObj.name +'">' + sublabel + '</label></div>';
								}

								//new logic ends

									}
								}
							}
							formInnerHtml += '<div class="radio-group">' + selCheckBox + '</div>';
							break;

					case "textarea":
							if (elObj.required == 'true') {
									var req = 'required='+ elObj.required;
							}
							formInnerHtml += '<textarea class="'+inputElementClass+'" name=' + elObj.name + ' '+req+ ' '+elAttr+'></textarea>';
							break;

					case "select":
							var selOpts = '';
							for (var j in elObj.multiDrop) {
									selOpts += '<option value="' + elObj.multiDrop[j].dropDownValue + '">' + elObj.multiDrop[j].dropDownLabel + '</option>';
							}
							formInnerHtml += '<select class="'+inputElementClass+' form-select" '+' ' + elAttr + '>' + selOpts + '</select>';
							break;

					case "multiSelect":
							var mulSelOpts = '';
							for (var j in elObj.multiDrop) {
									if( j == 0){
										mulSelOpts += '<option selected="selected" value="' + elObj.multiDrop[j].dropDownValue + '">' + elObj.multiDrop[j].dropDownLabel + '</option>';
									} else{
										mulSelOpts += '<option value="' + elObj.multiDrop[j].dropDownValue + '">' + elObj.multiDrop[j].dropDownLabel + '</option>';
									}

							}
							formInnerHtml += '<select multiple class="'+inputElementClass+' form-select" '+' ' + elAttr + '>' + mulSelOpts + '</select>';
							break;

					case "button":
							var btns = '';
							for (var b in elObj.button) {
								if (typeof elObj.button[b].buttonType != "undefined") {
								if(elObj.button[b].buttonType =='link'){
									btns += '<a class="dynFormCtaLink btn btn-primary btn-link '+elObj.button[b].buttonClass+'"  id='+elObj.button[b].idButton+' type='+elObj.button[b].buttonType+' href='+elObj.button[b].btnLink+'>' + elObj.button[b].buttontext + '</a>';
								}
								else{
									btns += '<button class="dynFormCta btn btn-primary '+elObj.button[b].buttonClass+'"  id='+elObj.button[b].idButton+' type='+elObj.button[b].buttonType+'>' + elObj.button[b].buttontext + '</button>';
									}
								}
							}
							formInnerHtml += '<div class="btn-bar">' + btns + '</div>';
							break;

					case "hidden":
							formInnerHtml += '<input class="'+inputElementClass+'" ' + elAttr + '  />';
							break;

					case "description":
						formInnerHtml += '<div class="description">'+elObj.description+'</div>';
						break;

                    case "textcaptcha":
                          formInnerHtml += '<input id="captcha" class="'+inputElementClass+'" ' + elAttr + '  />';
                          break;

				}

	            //creating label for each elements
				if (elObj.type != 'button' && elObj.name != 'globalOptIn') {

					if(elObj.name != undefined && elObj.label != undefined){
						 formInnerHtml += '<label for=' + elObj.name + ' name=' + elObj.name +' >' + elObj.label + '</label>';
					}else{
						  formInnerHtml += '<label></label>';
					}
                        var required='';
					if (elObj.required == 'true') {
						    required = ' <div class="invalid-feedback">';
							if(elObj.requiredMessage == null || elObj.requiredMessage =="" ){
								elObj.requiredMessage = "This field is required";
							}
								//var reqValidation = ' data-parsley-required ' + 'data-parsley-required-message="'+elObj.requiredMessage+'" ';
								required = required+elObj.requiredMessage;
								required = required +"</div>";
								 formInnerHtml +=required;

					}

				}

                if (elObj.type == 'textcaptcha') {
                        formInnerHtml +=	'<div class="simplecaptcha-container"> <img style="padding-top:2%;width: 50%; margin-right:2%" id="captchaImageID" alt="Captcha" src="/corpcomsvc/captchaServlet?q=31718387">'+
                		'<a id="simpleCaptchaID" href="javascript:;" onclick="captchaServletForm(event)">Refresh</a></div>';

                }

				formInnerHtml += '</div>';
			};


		$.fn.serializeObject = function()
	  {
		var o = {};
		var a = this.serializeArray();
		$.each(a, function() {
        if (o[this.name]) {
            if (!o[this.name].push) {
                o[this.name] = [o[this.name]];
            }
            o[this.name].push(this.value || '');
        } else {
            o[this.name] = this.value || '';
        }
		});
		return o;
		};

		function formatFormData(Obj){
			var str="";
			for(var p in Obj){
				if(Obj.hasOwnProperty(p)){
					str += p + '=' + Obj[p] + '&';
				}
			}
			return str;
		};



		/**
		* Returns the html decoded string contained within content.
		* @memberOf DF
		* @name htmlDecode
		* @param {String} content The html decoded string.
		* @returns {String} Returns an html decoded string.
		* @function: to check cookie exist on browser
		*/
		// ------------------------------------------------------------------------------------------------------------------
		submitForm = function () {
			$('#otpModal').modal({show:false,backdrop:'static'});
			 $('#otp').keypress((event)=>{
                  var keycode = (event.keyCode ? event.keyCode : event.which);
                  if(keycode == '13'){$( "#otpSubmit" ).trigger( "click" );}
              if(keycode!= 8 && keycode != 0 && keycode < 48 || keycode > 57){event.preventDefault();}});


			$(document).on('click', '.dynFormCta',  function(e){
					var form = $('#dynForm .dynForm');
					$("button.btn-close").click(()=>{$("#submit").removeAttr("disabled"); });
                    $('button.dynFormCta').prop("disabled", true);
					e.preventDefault();					
				
					if (form[0].checkValidity()){
						   form.addClass('was-validated');						

							 if($('#captcha').length>0 && $('#isOTPValidate').length){								 
								 
								submitFormData("onlyCaptchaValidate");
								
							 }else if($('#isOTPValidate').length){
								 enableOTPModal();
								 
							 }else{
									submitFormData();
							 }
								

					} else{
								form.addClass('was-validated');
								$('button.dynFormCta').prop("disabled", false);
								
					}

			});


$(document).on('click', '#otpSubmit',  function(e){
				//	$('#otpSubmit').prop("disabled", true);
					e.preventDefault();
					$('#errmessage').hide();
					var form = $('#otpForm');

					//validateCountryState();
					form.parsley().validate();

						if (form.parsley().isValid()){

							submitFormData($('#otp').val());


						}

				});

				$(document).on('click', '#reotp',  function(e){
					//$('#reotp').prop("disabled", true);
				    $('#otpSubmit').prop("disabled", true);
					$('#otp').val("");
					e.preventDefault();

					var form = $('#reotp');

					//validateCountryState();
					form.parsley().validate();

						if (form.parsley().isValid()){
							var formData = $('form.dynForm').serializeObject();
									sendOTP(formData.email);


						}

				});
		};


function enableOTPModal(){

	if($('#isOTPValidate').length >0){

		$('#errmessage').hide();
		$('#errmessage').empty();
		$('#otp').val("");
		$('#otpModal').modal('show');

		if($('#otpTitle').val().length>0){
			$('.modal-title').text($('#otpTitle').val());
		}

			// disabling OTP submit
			$('#otpSubmit').prop("disabled", true);

			$("#otp").on("input",function(){

				if($("#otp").hasClass("text-danger")){
					 $("#otp").removeClass("text-danger");
				}

				if(!$("#otpSubmit").attr("disabled")){
					$('#otpSubmit').prop("disabled", true);
				}
					// if OTP length is >5 , enabling the button
				if( $("#otp").val().length>5){
					$("#otpSubmit").removeAttr("disabled");
				}
			});

				var formData = $('form.dynForm').serializeObject();
				 sendOTP(formData.email);

	}


}

function sendOTP(email){
	console.log("email:"+email);
	$('#errmessage').empty();
	openModal();

   var jsonInput = $('#displayFormjson').val();
		var	displayJson = JSON.parse(jsonInput);
         var formActionObj = displayJson.formData.formhandler;
         
         var form = $('#dynForm .dynForm');
		 var metaPageName = $('meta[name="page-name"]').attr("content");

	console.log(formActionObj.formid);

	setTimeout(function () {
		$.ajax({
			 url: "/corpcomsvc/otp?requestType=generate&email="+email+"&formPath="+formActionObj.formid+"&formname="+formActionObj.formName,
			type: "POST",
			contentType: "application/json;charset=utf-8",
			beforeSend: function(){
				//showLoader();
			},
			success: function (resp) {
				if(resp !=null && resp.status==true){

				if($('#otpSentMsg').val().length>0){
                				$('#errmessage').append($('#otpSentMsg').val()+" "+email);
                				}else{
                					$('#errmessage').append("OTP sent to "+email);
                					}
					$('#errmessage').show();

				}else{
				if($('#otpSentFailedMsg').val().length>0){
                				$('#errmessage').append($('#otpSentFailedMsg').val()+" "+email);
                				}else{
                					$('#errmessage').append("Unable sent to "+email);
                					}
					$('#errmessage').show();
				}

			},
			 error: function(msg){
				if($('#otpSentFailedMsg').val().length>0){
                                				$('#errmessage').append($('#otpSentFailedMsg').val()+" "+email);
                                				}else{
                                					$('#errmessage').append("Unable sent to "+email);
                                					}
				$('#errmessage').show();
			 }

		 }).always(function() {
                   closeModal();
                    $('button.dynFormCta').prop("disabled", false);

          });
	 }, 300);



}



	submitFormData = function (otp) {


					var hiddenObj = collectHiddenObj();
					var form = $('#dynForm .dynForm');
					var formData = $('form.dynForm').serializeObject();
					var metaPageName = $('meta[name="page-name"]').attr("content");
					var formTrackingObj = {formName: metaPageName, pageName : window.location.pathname, formid:"not available",formAOI: "not available"};

                    if(form[0] !=null && $(form[0]).attr("id") !=null){
                        formTrackingObj.formid =  $(form[0]).attr("id");
                    }

                    if(formData["productType"] !=null){
                        formTrackingObj.formAOI = formData["productType"];
                    }

                    if(window._satellite != undefined && typeof(_satellite.track) === typeof(Function)){
                    	console.log("form_submit , "+JSON.stringify(formTrackingObj));
                    	_satellite.track('form_submit', formTrackingObj);
                    }

					if (form[0].checkValidity()){
						   form.addClass('was-validated');

					    //When it is partial submit then lastSubmittedData field contains remaining previous data
						var data = lastSubmittedData;
						if(restFormData){
						    //Manual submit
						    $.extend(data, restFormData);
						}
						$.extend(data, hiddenObj);


						$('form.dynForm input:checkbox:not(:checked)').each(function (){ formData [$(this).attr('name')] = $(this).val();});

						var formHandler = $("#formHandler").val();
						if(formHandler != undefined && formHandler !="" && !formData.hasOwnProperty("formHandler")){
							formData["formHandler"] = formHandler;

						}

						if($('#captcha').length >0 && otp != undefined && otp =="onlyCaptchaValidate"){
                        	formData["onlyCaptchaValidate"] = true;
                        }

						if($('#isOTPValidate').length >0 && otp != undefined && otp !=""){
							formData["otp"] = otp;
							formData["isOTPValidate"] = true;

						}

						if($('#captcha').length >0 && formData["captcha"] == null ){
						    formData["captcha"] = $('#captcha').val();
						}

						$.extend(data, formData);

						//console.log(data);

						//Ajax form Submit
						 setTimeout(function () {
							 $.ajax({
								 url: formAction,
								 type: "POST",
								 data: data,
								 contentType: "application/x-www-form-urlencoded;charset=utf-8",
								 beforeSend: function(){
										//showLoader();
									 },
								 success: function (resp) {
								           if($("#pardotFail").is(":visible")){
												$('#pardotFail').hide();
										}


                                        if (resp && resp == "invalid-captcha") {
                                            console.log(resp);
                                             captchaServletForm();
                                             $('#captcha').val('');
                                             if($('#captcha').parent().find('.invalid-feedback')[0] != null){
                                                 $('#captcha').parent().find('.invalid-feedback')[0].innerText = "Wrong Captcha Value";
                                              }
                                             $('button.dynFormCta').prop("disabled", false);
                                              return false;
                                        } else if (formData["onlyCaptchaValidate"] && resp && resp == "valid-captcha") {
												if($('#isOTPValidate').length){
													enableOTPModal();
								 
												}
                                            return true;
                                        }

										if($('#isOTPValidate').length && resp != null && (typeof resp == 'object') && resp.status == false){
											$('#errmessage').empty();
										//	$('#errmessage').append(resp.message);
										   var errorMsgTag="Entered Otp is Expired."==resp.message?"#otpExpiryMsg":"#otpErrorMsg";
										    $('#errmessage').append($(errorMsgTag).val());
										    // updating otp color in red incase of invalid
										    $('#otp').addClass('text-danger');
											$('#errmessage').show();

										}else if(resp == null || ( (typeof resp == 'string') && resp.trim()=="Fail") || ((typeof resp == 'object') && resp.status == false)) {
                                                if($("#pardotFailText").val()!=''){
													$('#pardotFail').show();
													$("#pardotFail").html($("#pardotFailText").val())
                                                }
													$('html, body').animate({ scrollTop: 0 }, 'fast');
													   $('button.dynFormCta').prop("disabled", false);
													if(window._satellite != undefined &&  typeof(_satellite.track) === typeof(Function)){
                                                    	 console.log("form_failure1 ,"+JSON.stringify(formTrackingObj));
                                                    	_satellite.track('form_failure',formTrackingObj);
                                                    }
                                        }
                                         else if(resp !=null && (typeof resp == 'string') && resp.indexOf("- ")>-1 && resp.indexOf(".html")<0){
                                               	$('#pardotFail').show();
												$("#pardotFail").html($("#pardotFail").html()+"<br>"+resp);
                                               	$('html, body').animate({ scrollTop: 0 }, 'fast');
                                               	   $('button.dynFormCta').prop("disabled", false);
                                               	   if( window._satellite != undefined && typeof(_satellite.track) === typeof(Function)){
                                                        console.log("form_failure2 , "+JSON.stringify(formTrackingObj));
                                                        _satellite.track('form_failure', formTrackingObj);
                                                     }

                                        }else{

                                              $('#otp').addClass('text-success');
                                             if(window._satellite != undefined &&  typeof(_satellite.track) === typeof(Function)){
                                            	console.log("form_success ,"+JSON.stringify(formTrackingObj));
                                            	_satellite.track('form_success', formTrackingObj);
                                             }
								            window.location = resp;
										}

										},
                                 error: function(msg){
											$('#otpModal').modal({show:false});
                                           $('button.dynFormCta').prop("disabled", false);
										   alert("Form Submission Failed");
										   if( window._satellite != undefined && typeof(_satellite.track) === typeof(Function)){
                                           		console.log("form_failure3 , "+JSON.stringify(formTrackingObj));
                                           		_satellite.track('form_failure',formTrackingObj);
                                           }

                                       }
								 })
							 }, 300);

						} else{


						    $('button.dynFormCta').prop("disabled", false);
							 if( window._satellite != undefined && typeof(_satellite.track) === typeof(Function)){
                            	    console.log("form_failure4 , "+JSON.stringify(formTrackingObj));
                            	    _satellite.track('form_failure', formTrackingObj);
                            	}
						}


				};

				/**
				 * Function to make state mandatory if country is selected.
				 * @memberOf DF
				 * @name validateCountryState
				 */
				/*validateCountryState = function() {
					var countryFound = false;
					var stateFound = false;
					var countryName;
					var stateName;
					var obj = JSON.parse($("#displayFormjson").val());
					if (obj != undefined || obj != null) {
						var fields = obj.formData.formfield;
						for (i = 0; i < fields.length; i++) {
							if (fields[i].name != undefined) {
								if (fields[i].name.toLowerCase().indexOf("state") > -1) {
									stateName = fields[i].name;
									if (fields[i].type === "select") {
										stateFound = true;
									}
								} else if (fields[i].name.toLowerCase().indexOf("country") > -1) {
									countryName = fields[i].name;
									if (fields[i].type === "select") {
										countryFound = true;
									}
								}
							}
						}

						if (countryFound === true && stateFound === true) {
							if ($("select[name=" + countryName + "]").val() != null && $("select[name=" + countryName + "]").val() != "") {
									$("select[name=" + stateName + "]").prop("required", "true");
								} else {
									$("select[name=" + stateName + "]").removeAttr("required");
								}
							}
					}
				};*/


		/**
		* Returns the html decoded string contained within content.
		*
		* <p>
		* </p>
		*
		* @memberOf DF
		* @name htmlDecode
		* @param {String} content The html decoded string.
		* @returns {String} Returns an html decoded string.
		* @function: to check cookie exist on browser
		*/
		// ------------------------------------------------------------------------------------------------------------------
		autoBlindSubmit = function(){
                if(lookup != null && lookup != undefined){
                    if(lookup == "contactid"){
                        formDataObj.formMode = "blind_id";
                    } else if(lookup == "cookie" || lookup == "both") {
                        formDataObj.formMode = "blind";
                    }
                }
				var hiddenObj = collectHiddenObj();
				var blindFormData = hiddenObj;
				for (i = 0; i < assetsLookupReturnArr.length; i++) {
				    var obj = {};
                    obj[assetsLookupReturnArr[i].name] = assetsLookupReturnArr[i].value;
                    $.extend(blindFormData, obj);
                }
				$.extend(blindFormData, lookupData);
				for (i = 0; i < arrDisplayJSON.length; i++) {
					if(arrDisplayJSON[i].type == 'hidden'){
					    var hiddenEleName = arrDisplayJSON[i].name;
						var hiddenVal;
						if(arrDisplayJSON[i].queryparam != undefined && getParameterByName(arrDisplayJSON[i].queryparam) !=null  && getParameterByName(arrDisplayJSON[i].queryparam) !=""){
							hiddenVal = getParameterByName(arrDisplayJSON[i].queryparam);
						}else{
							hiddenVal = arrDisplayJSON[i].value;
						}
						if(hiddenVal){
						    var obj = {};
                            obj[hiddenEleName] = hiddenVal;
                            $.extend(blindFormData, obj);
						}
					}
				}

                if( customFieldInfo ){
                    var customFieldInfoData = JSON.stringify(customFieldInfo);
                    $.extend(blindFormData, { "customFieldInfo" :  customFieldInfoData });
                }

				var formHandler = $("#formHandler").val();
						if(formHandler != undefined && formHandler !="" && !blindFormData.hasOwnProperty("formHandler")){
							blindFormData["formHandler"] = formHandler;

						}

                var allowsubmit = true;
				if((window.location.hostname.indexOf("-author.")>0 || window.location.hostname.indexOf("auth1.")>0) && window.location.href.indexOf("wcmmode=")<0){
					allowsubmit = false;
					//console.log("href:"+window.location.href);
				}

				//console.log("allowsubmit:"+allowsubmit);
				if(allowsubmit){
				 setTimeout(function () {
				 $.ajax({
						 url: formAction,
						 type: "POST",
						 data: blindFormData,
						 beforeSend: function(){
								//showLoader();
							 },
						 success: function (resp) {
									window.location = resp;
								}
						 })
					 }, 200);
			 }
		}

		/**
		 * Returns the html decoded string contained within content.
		 *
		 * <p>
		 * </p>
		 *
		 * @memberOf DF
		 * @name htmlDecode
		 * @param {String} content The html decoded string.
		 * @returns {String} Returns an html decoded string.
		 * @function: to check cookie exist on browser
		 */
		// ------------------------------------------------------------------------------------------------------------------
		 manualBlindSubmit = function () {
			 		var manualArray = [];
            	 	var countryElem;
            		var countryValue;
					for (i = 0; i < arrDisplayJSON.length; i++) {
                        if (arrDisplayJSON[i].name == 'firstName' || arrDisplayJSON[i].name == 'lastName' || arrDisplayJSON[i].name == 'country' || arrDisplayJSON[i].name == 'email'  || arrDisplayJSON[i].type == 'button' || arrDisplayJSON[i].type == 'description' || arrDisplayJSON[i].name == 'globalOptIn'){
                            switch (arrDisplayJSON[i].name) {
                                case "firstName":
                                    arrDisplayJSON[i].value=lookupData.firstName;
                                    break;
                                case "lastName":
                                    arrDisplayJSON[i].value=lookupData.lastName;
                                    break;
                                case "country":
                                    arrDisplayJSON[i].value=lookupData.country;
                                    countryElem = arrDisplayJSON[i].name;
									                  countryValue = arrDisplayJSON[i].value;
                                    break;
                                case "email":
                                    arrDisplayJSON[i].value=lookupData.email;
                                    break;
                                case "globalOptIn":
                                    arrDisplayJSON[i].value=lookupData.optIn;
                                    break;

                                default:
                                    //console.log('no element push to arrDisplayJSON');
                                }
                                manualArray.push(arrDisplayJSON[i]);
                        }
                        if(arrDisplayJSON[i].type == 'hidden'){
							manualArray.push(arrDisplayJSON[i]);
						}
					};

					$.each(lookupData, function (key, val) {
						if (!(key == 'firstName' || key == 'lastName' || key == 'country' || key == 'email')){
								restFormData[key] = val;
						}
					});
					createDynamicForm(manualArray);
					$("select[name='country']").trigger("change");

             		if(countryValue != undefined && countryValue != null && countryValue != ""){
                        $("form").find('select[name="' + countryElem +'"] option').map(function () {
                            if ($(this).text().toLowerCase() == countryValue.toLowerCase()){
                                return this;
                            }
                        }).prop('selected', true);
                    }
				}

		/**
		 * Returns the html decoded string contained within content.
		 * @memberOf DF
		 * @name htmlDecode
		 * @param {String} content The html decoded string.
		 * @returns {String} Returns an html decoded string.
		 * @function: to check cookie exist on browser
		 */
		// ------------------------------------------------------------------------------------------------------------------
		 showLoader = function () {
			 var $elOverlay = $(document).find('.ajaxOverlay');
			 if(!($elOverlay.length > 0)){
				$('html body').css({
							//'overflow':'hidden'
				})
				$('body').append('<div class="ajaxOverlay"><div class="imgLoader"></div></div>')
				var winH = $(document).height(), winW = $(window).width();
				$('.ajaxOverlay').show().css({
					'height':winH,
					'width':winW
					})
					$('.ajaxOverlay .imgLoader').css({
						'top':($(window).height()-40)/2 +'px',
						'left':($(window).width()-40)/2 +'px'
						});
				 }
				}

		/**
		 * Returns the html decoded string contained within content.
		 *
		 * <p>
		 * </p>
		 *
		 * @memberOf DF
		 * @name htmlDecode
		 * @param {String} content The html decoded string.
		 * @returns {String} Returns an html decoded string.
		 * @function: to check cookie exist on browser
		 */
		// ------------------------------------------------------------------------------------------------------------------
		 hideLoader = function(){
				$('.ajaxOverlay').fadeOut('slow');
				$('html body').css({
					//'overflow':'auto'
				})
			}

		/**
		* Returns the html decoded string contained within content.
		*
		* <p>
		* </p>
		*
		* @memberOf DF
		* @name htmlDecode
		* @param {String} content The html decoded string.
		* @returns {String} Returns an html decoded string.
		* @function: to check cookie exist on browser
		*/
		// ----------Self Invoke Function------------------------------------------------------------------------------------
		getAssetsLookupData = function (docID) {
			var formURl = window.location.href;
            var qrStr = window.location.search;
            qrStr = qrStr.split("?")[1];

			alDataObjQuery ="";
			if(docID){
			    alDataObjQuery += "docId=" + docID;
			}
			if(lookup){
			    alDataObjQuery += "&lookUp=" + lookup;
			}
			if(errorPage){
			    alDataObjQuery += "&errorPage=" + errorPage;
			}

			$.ajax({
				url: assetsLookupData,
				type: "GET",
				async: false,
				data: alDataObjQuery+'&formURl='+encodeURIComponent(formURl)+'&qrStr='+encodeURIComponent(qrStr),
				beforeSend: function(){
					//showLoader();
				 },
				success: function (resp) {
				        if(resp){
                        resp = JSON.parse(resp);

							for(var key in resp) {

							    if(key == "relAssets") {
							    continue;
							    }

								if(key === "errorPage") {
									window.location = resp[key];
								}
								var obj = {};
								obj.name = key;
								obj.value = resp[key];

								if(key == "campaignCode"){
								    var eidVal = getParameterByName("eid");
                                    if(eidVal){
                                        //console.log("Updating campaign code ( "+ resp[key] + " ) with eid value: "+ eidVal);
                                        obj.value = eidVal;
                                    }
								}

								assetsLookupReturnArr.push(obj);
							}


					}
				}
				})
			};

		/**
		* Returns the html decoded string contained within content.
		* @memberOf DF
		* @name htmlDecode
		* @param {String} content The html decoded string.
		* @returns {String} Returns an html decoded string.
		* @function: to check cookie exist on browser
		*/
		// ----------Self Invoke Function------------------------------------------------------------------------------------
		getDisplayJSON = (function () {
			// form action object
			formActionObj = displayFormjson.formData.formhandler;
				formAction= formActionObj.actiontype;
					lookup= formActionObj.lookup;
					globalBlindSubmit =formActionObj.globalBlindSubmit;
					blindSubmit = formActionObj.blindSubmit;
					campaignFormType= formActionObj.campaignFormType;
                    thankyoupage ="";
                    if(formActionObj.thankyoupage !=null){
                      thankyoupage =formActionObj.thankyoupage.replace("en-us/",getRegion() + "/" );
                    }
					//console.log("thankyoupage:"+thankyoupage);
					queryString = formActionObj.querystring;
					formType = formActionObj.formType;
					formName = formActionObj.formName;
					formid = formActionObj.formid;
					customFieldInfo = formActionObj.customFieldInfo;
					assetLookup =formActionObj.assetLookup;
					docID=formActionObj.docId;
					docIdParam=formActionObj.docIdParam;
					errorPage = formActionObj.errorPage;


			//form elements object
			var dispElementsObj = displayFormjson.formData.formfield;
				$.each(dispElementsObj, function (index, element) {
					arrDisplayJSON.push(element);
					if(element.name == 'country'){
						countries= element.countryList;
						}
					if(element.type == 'hidden'){
							arrDisplayHidden.push(element);
						}
				});
				//console.log(countries);

				getDocId();


				if(assetLookup!= null && assetLookup!= undefined &&  assetLookup!= ''){
					getAssetsLookupData(docID);
				}

				if(!isCookie && isCookie != undefined){
                    createDynamicForm(arrDisplayJSON);
                    //setCookie();
                } else {
                    getLookupType(lookup);
                }

				//collection of hidden fields/display/lookup/asset lookup data
			}());

		/**
		 * Returns the html decoded string contained within content.
		 *
		 * <p>
		 * </p>
		 *
		 * @memberOf DF
		 * @name htmlDecode
		 * @param {String} content The html decoded string.
		 * @returns {String} Returns an html decoded string.
		 * @function: to check cookie exist on browser
		 */
		// ------------------------------------------------------------------------------------------------------------------
		init = function () {
            if(formActionObj.formType=="SNS-Form"){
                submitSNSForm();
            }else{
				submitForm();
            }

		};





		/**
		 * Returns the html decoded string contained within content.
		 *
		 * <p>
		 * </p>
		 *
		 * @memberOf DF
		 * @name htmlDecode
		 * @param {String} content The html decoded string.
		 * @returns {String} Returns an html decoded string.
		 * @function: to check cookie exist on browser
		 */
		// --------------------------------------------------------------------------------------------------------------------
		return {
				init: init,
				showLoader:showLoader,
				hideLoader: hideLoader
		};
		/**
		 * Perform only, if dynamic form component is included on page should
		 * execute any actions or add any behaviors to page.
		 */
    }());
		// ---------------------------------------------------------------------------------------------------------------------
		$(document).ready(function () {
			localStorage.removeItem("form_start");
			DF.init();
			$(document).ajaxStart(function(){
				DF.showLoader();
			});
			//ajaxStart close loader
			$(document).ajaxComplete(function(){
				DF.hideLoader();
			});

            setTimeout(function() {
                $("input,select").focus(function(){
                    var isStart = localStorage.getItem("form_start");
                    if(isStart == null){
                        console.log("isStart :: false");
                        var metaPageName = $('meta[name="page-name"]').attr("content");
                        var formTrackingObj = {formName: metaPageName, pageName : window.location.pathname, formid:"not available",formAOI: "not available"};

                        var	displayJson = JSON.parse($('#displayFormjson').val());
                        var formActionObj = displayJson.formData.formhandler;
                         if(formActionObj != null && formActionObj.formName !=null){
                            var formid = formActionObj.formName.toLowerCase().replace(" " ,"-");
                            formTrackingObj.formid = formid;
                         }

                        if( window._satellite != undefined && typeof(_satellite.track) === typeof(Function)){
                            console.log("form_start , "+JSON.stringify(formTrackingObj));
                            _satellite.track('form_start',formTrackingObj);
                            localStorage.setItem("form_start",true);
                        }
                    }
                });
             }, 500);

			$(document).on('change',"input[name='globalOptIn'][id!= 'globalOptOut']", function() {
					if(this.checked){
						$(this).val("1")

					}
					else{
						$(this).val("0")

					}
			});

			$(document).on('change',"input[name='globalOptIn'][id= 'globalOptOut']", function() {
					if(this.checked){
						$(this).val("0")

					}
					else{
						$(this).val("1")

					}
			});

			$("input[type='checkbox']").change(function() {
				var checkBoxElem = $(this);
				// value = checkbox.val(); // Value of checkbox
					if(checkBoxElem.name != 'globalOptIn' && checkBoxElem.name != 'softOptIn'){
						if (checkBoxElem.is(':checked'))
						{
							$(this).val('1');
						}else
						{
							$(this).val('0');
						}
					}
			});

			if($("#captcha").length>0){
                             $("#captcha").click(function () {
                                        if($('#captcha').parent().find('.invalid-feedback')[0] != null && $('#captcha').attr('requiredmessage') !=null){
                                                 $('#captcha').parent().find('.invalid-feedback')[0].innerText = $('#captcha').attr('requiredmessage');

                                        }

                             });
            }

		});

			//Generate Dynamic form Json -required in dynmaic form --Start
			function generateDynamicFormJson() {
				var generateDynamicFormPath = $("#generateDynamicFormPath").val();
				$.ajax({
					url: "/corpcomsvc/campaign/dynamicformservlet",
					type: "POST",
					data: {
						path: generateDynamicFormPath
					},
					success: function(resp) {
						window.open(resp, "_blank");
					}
			});

		}

		 function openModal() {
            var vModal = document.getElementsByClassName('Tabmodal');
            for (i = 0; i < vModal.length; i++) {
                vModal[i].style.display = 'block';
            }

            var vFade = document.getElementsByClassName('Tabfade');
            for (i = 0; i < vFade.length; i++) {
                vFade[i].style.display = 'block';
            }
        }

        function closeModal() {
            var vModal = document.getElementsByClassName('Tabmodal');
            for (i = 0; i < vModal.length; i++) {
                vModal[i].style.display = 'none';
            }

            var vFade = document.getElementsByClassName('Tabfade');
            for (i = 0; i < vFade.length; i++) {
                vFade[i].style.display = 'none';
            }
			
			captchaServletForm();
        }

        function captchaServletForm() {
                     if($("#captchaImageID").length > 0 && $("#captcha").length > 0){
                        	    $('#captcha').val('');
                        		var number = Math.floor((1 + Math.random()) * 0x1000000);
                                var xx=  "/corpcomsvc/captchaServlet?q="+number;
                                $('#captchaImageID').attr("src", xx);
                        	}
                 }

       
