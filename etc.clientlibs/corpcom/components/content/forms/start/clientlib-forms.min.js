var MCMID = "";
var clone={};
 function fileClicked(event) {
        var fileElement = event.target;
        if (fileElement.value != "") {
        clone[fileElement.id] = $(fileElement).clone();
        }

    }
    function fileChanged(event) {
        var fileElement = event.target;
        if (fileElement.value == "") {
            clone[fileElement.id].insertBefore(fileElement);
            $(fileElement).remove();
        }

    }
$(function() {
    captchaServletForm();
    $.fn.rememberTrialForm = function(formName) {
        if ($("#tpr_rememberMe").is(":checked")) {
            $(formName + " input").each(function(index) {
                var input = $(this);
                var attributeType = input.attr("type");
                var attributeName = input.attr("name");
                if (attributeType == "checkbox") {
                    var attributeValue = input.prop("checked");
                    localStorage[attributeName] = attributeValue
                } else {
                    if (attributeType == "text") {
                        if (attributeName != "realCaptcha") {
                            var attributeValue = input.val();
                            localStorage[attributeName] = attributeValue
                        }
                    } else {
                        if (attributeType == "email") {
                            var attributeValue = input.val();
                            localStorage[attributeName] = attributeValue
                        }
                    }
                }
            });
            $(formName + " select").each(function(index) {
                var input = $(this);
                var attributeName = input.attr("name");
                var attributeValue = input.val();
                localStorage[attributeName] = attributeValue
            })
        } else {
            $(formName + " input").each(function(index) {
                var input = $(this);
                var attributeName = input.attr("name");
                localStorage[attributeName] = ""
            });
            $(formName + " select").each(function(index) {
                var input = $(this);
                var attributeName = input.attr("name");
                localStorage[attributeName] = ""
            })
        }
    };
    $.fn.rememberFormValues = function(formName) {
        if ($("#remFormValues").is(":checked")) {
            $(formName + " input").each(function(index) {
                var input = $(this);
                var attributeType = input.attr("type");
                var attributeName = input.attr("name");
                if (attributeType == "checkbox" && input.hasClass("remember")) {
                    var attributeValue = input.prop("checked");
                    localStorage[attributeName] = attributeValue
                } else {
                    if (attributeType == "radio" && input.hasClass("remember")) {
                        var attributeValue = input.prop("checked");
                        localStorage[attributeName] = attributeValue
                    } else {
                        if (attributeType == "text" && input.hasClass("remember")) {
                            var attributeValue = input.val();
                            localStorage[attributeName] = attributeValue
                        } else {
                            if (attributeType == "email" && input.hasClass("remember")) {
                                var attributeValue = input.val();
                                localStorage[attributeName] = attributeValue
                            } else {
                                localStorage.removeItem(attributeName)
                            }
                        }
                    }
                }
            });
            $(formName + " select").each(function(index) {
                var input = $(this);
                var attributeName = input.attr("name");
                if (input.hasClass("remember")) {
                    var attributeValue = input.val();
                    localStorage[attributeName] = attributeValue
                } else {
                    localStorage.removeItem(attributeName)
                }
            });
            $(formName + " textarea").each(function(index) {
                var input = $(this);
                var attributeName = input.attr("name");
                if (input.hasClass("remember")) {
                    var attributeValue = input.val();
                    localStorage[attributeName] = attributeValue
                } else {
                    localStorage.removeItem(attributeName)
                }
            })
        } else {
            $(formName + " input").each(function(index) {
                var input = $(this);
                var attributeName = input.attr("name");
                localStorage.removeItem(attributeName)
            });
            $(formName + " select").each(function(index) {
                var input = $(this);
                var attributeName = input.attr("name");
                localStorage.removeItem(attributeName)
            });
            $(formName + " textarea").each(function(index) {
                var input = $(this);
                var attributeName = input.attr("name");
                localStorage.removeItem(attributeName)
            })
        }
    };
    $.fn.fillTrialRememberMeForm = function(formName) {
        var welcomeText = $("#welcomeText").val();
        var welcomeAttrName = $("#welcomeAttrName").val();
        if (welcomeText != undefined && welcomeAttrName != undefined && welcomeText != "" && welcomeAttrName != "" && localStorage[welcomeAttrName] != undefined && localStorage[welcomeAttrName] != "") {
            $(".genericForm").prepend("<p style='padding-bottom:1%;'>" + welcomeText + " " + localStorage[welcomeAttrName] + "</p>")
        }
        $(formName + " input").each(function(index) {
            var input = $(this);
            var attributeType = input.attr("type");
            var attributeName = input.attr("name");
            if (attributeType == "checkbox") {
                if (localStorage[attributeName] == "true") {
                    input.prop("checked", localStorage[attributeName])
                }
            } else {
                if (attributeType == "text") {
                    if (attributeName != "realCaptcha") {
                        input.val(localStorage[attributeName])
                    }
                } else {
                    if (attributeType == "email") {
                        input.val(localStorage[attributeName])
                    }
                }
            }
        });
        $(formName + " select").each(function(index) {
            var input = $(this);
            var attributeName = input.attr("name");
            if (localStorage[attributeName] != undefined) {
                input.val(localStorage[attributeName]).attr("selected", "selected")
            }
        })
    };
    $.fn.fillBetaRememberMe = function(formName) {
        var betaRememberMe = readBetaCookie("TrellixBetaRem");
        if (betaRememberMe == "true") {
            var emailAddress = localStorage.betaEmailAddress;
            var betaPassword = localStorage.betaPassword;
            if (emailAddress != null && emailAddress != undefined && emailAddress != "") {
                $("#betaEmailAddress").val(emailAddress)
            }
            if (betaPassword != null && betaPassword != undefined && betaPassword != "") {
                var decryptedPassword = CryptoJS.AES.decrypt(betaPassword, "");
                decryptedPassword = decryptedPassword.toString(CryptoJS.enc.Utf8);
                $("#betaPassword").val(decryptedPassword)
            }
        }
    };
    $.fn.fillRememberMeFormValues = function(formName) {
        $(formName + " input").each(function(index) {
            var input = $(this);
            var attributeType = input.attr("type");
            var attributeName = input.attr("name");
            if (attributeType == "checkbox" && input.hasClass("remember")) {
                input.prop("checked", localStorage[attributeName])
            } else {
                if (attributeType == "radio" && input.hasClass("remember")) {
                    input.prop("checked", localStorage[attributeName])
                } else {
                    if (attributeType == "text" && input.hasClass("remember")) {
                        input.val(localStorage[attributeName])
                    }
                }
            }
        });
        $(formName + " select").each(function(index) {
            var input = $(this);
            var attributeName = input.attr("name");
            if (input.hasClass("remember")) {
                input.val(localStorage[attributeName]).attr("selected", "selected")
            }
        });
        $(formName + " textarea").each(function(index) {
            var input = $(this);
            var attributeName = input.attr("name");
            if (input.hasClass("remember")) {
                input.val(localStorage[attributeName])
            }
        })
    };
    $.fn.fileExtCheck = function() {
        var fname = $(".fileTypeSelect").val();
        if (undefined == fname || fname == "") {
            return true
        }
        var fileTypes = $(".fileTypeSelect").attr("accept");
        if (fileTypes == undefined || fileTypes == null) {
            fileTypes = ""
        }
        var fileTypeMatched = false;
        if (fileTypes != "") {
            var ext = fname.match(/\.([^\.]+)$/)[1];
            var splitFileTypes = fileTypes.split(",");
            for (var i = 0; i < splitFileTypes.length; i++) {
                if (splitFileTypes[i] == ext) {
                    fileTypeMatched = true
                }
            }
        }
        if (fileTypeMatched) {
            $(".file-size-error").remove();
            $(".file-type-error").remove();
            return true
        } else {
            $(".file-size-error").remove();
            $(".file-type-error").remove();
            $(".fileTypeSelect").after('<p class="file-type-error error-field">' + $("#fileTypeMessage").val() + "</p>");
            return false
        }
    };
    $.fn.fileSizeCheck = function() {
        if (window.File && window.FileReader && window.FileList && window.Blob) {
            var fileSize = $(".fileTypeSelect").attr("filesize");
            if ($("#fileUpload")[0].files[0] == undefined) {
                return true
            } else {
                var fsize = $("#fileUpload")[0].files[0].size;
                fsize = fsize / 1048576;
                if (fsize > fileSize) {
                    $(".file-size-error").remove();
                    $(".file-type-error").remove();
                    $(".fileTypeSelect").after('<p class="file-size-error error-field">' + $("#fileSizeMessage").val() + fileSize + " MB</p>");
                    return false
                } else {
                    $(".file-size-error").remove();
                    $(".file-type-error").remove();
                    return true
                }
            }
        } else {
            $(".fileTypeSelect").after('<p class="file-size-error error-field">Please upgrade your browser, because your current browser lacks some new features we need!</p>');
            return false
        }
    };
    $.fn.confirmPasswordCheck = function(confirmPassword) {
          if (confirmPassword.value !== $("#password").val()) {
            confirmPassword.setCustomValidity(confirmPassword.getAttribute("data-parsley-equalto-message"));
            confirmPassword.reportValidity();
          } else {
            confirmPassword.setCustomValidity(""); // is valid
          }
    };
     $.fn.betaConfirmChangePasswordCheck = function(betaConfirmChangePassword) {
           if (betaConfirmChangePassword.value !== $("#betaChangePassword").val()) {
              betaConfirmChangePassword.setCustomValidity(betaConfirmChangePassword.getAttribute("data-parsley-equalto-message"));
              betaConfirmChangePassword.reportValidity();
           } else {
              betaConfirmChangePassword.setCustomValidity(""); // is valid
           }
     };
     $.fn.emailDomainCheck = function(emailInput) {
        if(emailInput[0].getAttribute('data-parsley-emaildomain')!=null){
           var blacklistedDomains=emailInput[0].getAttribute('data-parsley-emaildomain').split(',');
           var inputDomain=emailInput[0].value.substring(emailInput[0].value.trim().lastIndexOf('.')+1);
           if(jQuery.inArray(inputDomain, blacklistedDomains) == -1){
           emailInput[0].setCustomValidity("");
           $("#email").parent().find(".invalid-feedback").html(emailInput[0].getAttribute('data-parsley-required-message'));
           } else {
            emailInput[0].setCustomValidity(" ");

            emailInput.parent().addClass('was-validated');

           emailInput.parent().find(".invalid-feedback").html("Please enter the valid email domain");
           }
       }
     };
     $.fn.passwordStrengthCheck = function(password){
           var regex = new RegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*])(?=.{8,})");
           if(regex.test(password[0].value)){
           password[0].setCustomValidity("");
           } else{
           password[0].setCustomValidity(" ");
           password.parent().addClass('was-validated');
           password.parent().find(".invalid-feedback").html(password[0].getAttribute('data-parsley-required-message'));
           }
     }
});


var loaderModal;
try{
 loaderModal= new bootstrap.Modal(document.querySelector('#loaderModal'), {backdrop: 'static"}'})
}
catch(err) {}

var genericForm = (function() {
    var binServlet = "/corpcomsvc/SearchResult";
    var postFormData = function(requestType, methodName, isMultipart) {
        var realCaptchaResp = $("#realCaptcha").val();
        if (realCaptchaResp == undefined) {
            realCaptchaResp = ""
        }
        var googleCaptchaResp = $("#g-recaptcha-response").val();
        var formData = "";
        var contentTypeVal;
        if (isMultipart == "multipart") {
            formData = new FormData($("form.generalForm")[0]);
            contentTypeVal = false
        } else {
            formData = $("form.generalForm :not(input[name=statesId])").serialize();
            contentTypeVal = "application/x-www-form-urlencoded"
        }
        var currentPagePath = window.location.pathname;
        var param = $("#param").val();
        var urlString = "/corpcomsvc/processForm?reqType=" + requestType + "&methodName=" + methodName + "&eval=" + getUrlParameter("eval") + "&realCaptcha=" + realCaptchaResp + "&emailAddress=" + getUrlParameter("emailAddress");
        if (requestType == "productLogin" && methodName == "GetGrantStatusAndLicenses") {
            formData = btoa(formData);
            var gno = btoa(document.getElementById("grantNumber").value);
            var emailId = btoa(document.getElementById("email").value);
            urlString = "/corpcomsvc/processForm?reqType=" + requestType + "&methodName=" + methodName + "&eval=" + getUrlParameter("eval") + "&grantNumber=" + gno + "&email=" + emailId + "&realCaptcha=" + realCaptchaResp
        }
        if (requestType == "betaRegistration" && methodName == "getBetaRegistration") {
            var validationURL = $("#validationURL").attr("data-validation");
            validationURL = window.location.origin + validationURL;
            urlString = "/corpcomsvc/processForm?reqType=" + requestType + "&methodName=" + methodName + "&eval=" + getUrlParameter("eval") + "&realCaptcha=" + realCaptchaResp + "&emailAddress=" + getUrlParameter("emailAddress") + "&validationURL=" + encodeURIComponent(validationURL)
        }
        if (requestType == "whiteListingService") {
            if (methodName == "whiteListLogIn" || methodName == "whiteListPasswordRecovery" || methodName == "whiteListSignUpSubmit") {
                WhiteListForm.postFormData(requestType, methodName);
                return true
            }
            if (methodName == "whiteListChangePasswordSubmit") {
                urlString = "/corpcomsvc/processForm?reqType=" + requestType + "&methodName=" + methodName + "&token=" + getUrlParameter("token") + "&sid=" + getUrlParameter("sid")
            }
        }
        if (requestType == "trialPostingCampaign" && methodName == "trialProductUserRegistration") {
            urlString = "/corpcomsvc/processForm?reqType=" + requestType + "&methodName=" + methodName + "&eval=" + getUrlParameter("eval") + "&currentPagePath=" + currentPagePath
        }
        if (googleCaptchaResp && googleCaptchaResp.length > 0) {
            urlString += "&g-recaptcha-response=" + googleCaptchaResp
        }
        console.log("URL:" + urlString);
                callTracking('form_submit');

       var userAgent = navigator.userAgent;
       formData = formData +"&userAgent="+encodeURIComponent( userAgent);
       formData = formData +"&formURL="+encodeURIComponent( window.location.href);
        formData = formData +"&region="+encodeURIComponent( getRegion());

        if (urlString != undefined) {
        if(loaderModal){
        loaderModal.show();
        }
            $("button.submitBtn").attr("disabled", true)
        }
        $.ajax({
            type: "POST",
            url: urlString,
            data: formData,
            processData: false,
            contentType: contentTypeVal,
            timeout: 600000,
            cache: false,
            error: function(msg) {
                console.log("error in form submit");
                callTracking('form_failure');

                if (requestType == "whiteListingService") {
                    onWhiteListingResponse(msg.responseJSON, methodName)
                }
                captchaServletForm();
                console.log("fail call");
                if(loaderModal){
                        loaderModal.hide();
                        }
                $("button.submitBtn").attr("disabled", false);
                if (requestType == "trialPostingCampaign" && methodName == "trialProductUserRegistration") {
                    alert("Form Submission Failed")
                }
            },
            success: function(msg) {
                console.log("success call");

                $("button.submitBtn").attr("disabled", false);
                if (msg && msg == "invalid-captcha") {
                    if($('#realCaptcha').parent().find('.invalid-feedback')[0] != null){
                              $('#realCaptcha').parent().find('.invalid-feedback')[0].innerText = $("#captchaText").val() ;
                    }
                    captchaServletForm();
                    if(loaderModal){
                       setTimeout(function () {
                             $('#loaderModal').modal('hide')
                       }, 1000)
                    }
                    return
                }

                $("p.error-field").remove();
                if (requestType == "productLogin" && methodName == "GetGrantStatusAndLicenses") {
                    localStorage.cancelOnAuth = "";
                    $("form.generalForm").find('button[type="submit"]').attr("disabled", true);
                    if (msg.GetGrantStatusAndLicenses == "embargoedCountry") {
						if(loaderModal){
                   			loaderModal.hide();
                 		}
                        console.log("embargoed received");
                        $("#grantNumber").parent().parent().before('<p class="error-field text-center">' + $("#ipValidation").attr("data-ipValidation") + "</p>");

                        captchaServletForm();
                        callTracking('form_failure');
                    } else {
                        if (msg.GetGrantStatusAndLicenses == "valid") {
                            callTracking('form_success');
                            var redirectData = $("#redirectURL").attr("data-redirect") == undefined ? "" : $("#redirectURL").attr("data-redirect");
                            localStorage.productListingPageURL = redirectData;
                            sessionStorage.redirectToLogin = "no";
                            var redirectURL = window.location.origin + redirectData;
                            window.location = redirectURL
                        } else {
			               if(loaderModal){
		                   		loaderModal.hide();
		                 	}


                            if (msg.GetGrantStatusAndLicenses == "invalid") {
                                console.log("invalid received");
                                callTracking('form_failure');

                                $("#grantNumber").parent().parent().before('<p class="error-field text-center">' + $("#loginValidation").attr("data-loginValidation") + "</p>")
                            } else {
                                if (msg.GetGrantStatusAndLicenses == "invalidCaptcha") {
                                    console.log("invalidCaptcha received");
                                    $("#grantNumber").parent().parent().before('<p class="error-field text-center">You have missed the captcha.</p>');
                                    captchaServletForm();
                                    callTracking('form_failure');
                                } else {
                                    if (msg.GetGrantStatusAndLicenses == "expired") {
                                        console.log("expired received");
                                        $("#grantNumber").parent().parent().before('<p class="error-field text-center">' + $("#grantNumberValidation").attr("data-grantNumberValidation") + "</p>");
                                        captchaServletForm();
                                        callTracking('form_failure');
                                    } else {
                                        if (msg.GetGrantStatusAndLicenses == "noDownloads") {
                                            var redirectData = $("#confirmationURL").attr("data-confirmation") == undefined ? "" : $("#confirmationURL").attr("data-confirmation");
                                            var redirectURL = window.location.origin + redirectData;
                                            callTracking('form_success');
                                            window.location = redirectURL;
                                        } else {
                                            if (msg.GetGrantStatusAndLicenses == "authenticate") {
                                                var redirectData = $("#authenticateURL").attr("data-authenticate") == undefined ? "" : $("#authenticateURL").attr("data-authenticate");
                                                var authenticateURL = window.location.origin + redirectData;
                                                console.log("authenticate");
                                                callTracking('form_success');
                                                window.location = authenticateURL;
                                            } else {
                                                console.log("exception received");
                                                $("#grantNumber").parent().parent().before('<p class="error-field text-center">' + $("#loginValidation").attr("data-loginValidation") + "</p>");
                                                captchaServletForm();
                                                callTracking('form_failure');
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if (requestType == "trialPostingCampaign" && methodName == "trialProductUserRegistration") {
                        if ($("#thankYou").val() != undefined && $("#thankYou").val() != "") {
                            if ($("#pardotFail").is(":visible")) {
                                $("#pardotFail").hide()
                            }
                            if (msg.trim() == "DPLFail") {
                                if ($("#authText").val() != undefined) {
                                    if ($("p[name=DPLfailp]").length == 0) {
                                        $(".genericForm").prepend("<p name='DPLfailp' style='color:red'>" + $("#authText").val() + "</p>")
                                    }
                                    $("html, body").animate({
                                        scrollTop: 0
                                    }, "fast");
                                    captchaServletForm();
                                    callTracking('form_failure');
                                }
                            } else {
                                if (msg.trim() == "Fail") {
                                    $("#pardotFail").show();
                                    if ($("#pardotFailText").val() != "") {
                                        $("#pardotFail").html($("#pardotFailText").val())
                                    }
                                    $("html, body").animate({
                                        scrollTop: 0
                                    }, "fast");
                                    captchaServletForm();
                                    callTracking('form_failure');
                                } else {
                                    if (msg.trim().length > 0) {
                                        $("#pardotFail").show();
                                        $("#pardotFail").html($("#pardotFail").html() + "<br>" + msg);
                                        $("html, body").animate({
                                            scrollTop: 0
                                        }, "fast");
                                        captchaServletForm();
                                        callTracking('form_failure');
                                    } else {
                                        var parameters = getAllParams(window.location.href);
                                        var separator = "";
                                        var parameterString = "";
                                        for (var params in parameters) {
                                            if (parameters.hasOwnProperty(params)) {
                                                parameterString += separator;
                                                parameterString += params + "=" + parameters[params];
                                                if (separator == "") {
                                                    separator = "&"
                                                }
                                            }
                                        }
                                        if (parameterString == undefined || parameterString == null) {
                                            parameterString = ""
                                        }
                                        if (parameterString == "") {
                                            parameterString = "?showeval=no"
                                        } else {
                                            parameterString = "?" + parameterString + "&showeval=no"
                                        }
                                        var thankYouPage = $("#thankYou").val();
                                        thankYouPage = thankYouPage + parameterString;
                                        var evalSpecificThankYouPage = "";
                                        if ($("#trialThankYou").length > 0 && $("#trialThankYou").val() != undefined && $("#trialThankYou").val() != "") {
                                            evalSpecificThankYouPage = $("#trialThankYou").val();
                                            if (evalSpecificThankYouPage.indexOf("~") != -1 && $("#trialThankYou2").length > 0 && $("#trialThankYou2").text() != undefined && $("#trialThankYou2").text() != "" && evalSpecificThankYouPage != $("#trialThankYou2").text()) {
                                                evalSpecificThankYouPage = $("#trialThankYou2").text()
                                            }
                                        }
                                        if (evalSpecificThankYouPage == undefined || evalSpecificThankYouPage == null) {
                                            evalSpecificThankYouPage = ""
                                        }
                                        if (evalSpecificThankYouPage != "") {
                                            thankYouPage = evalSpecificThankYouPage
                                        }
                                        callTracking('form_success');
                                        window.location = thankYouPage
                                    }
                                }
                            }
                        }
                    } else {
                        if (requestType == "websiteFormService" && methodName == "getThankYouPage") {
                            console.log(msg.Thankyou);
                            var redirectURL = window.location.origin + msg.Thankyou + ".html";
                            console.log(redirectURL);
                            callTracking('form_success');
                            window.location = redirectURL
                        } else {
                            if (requestType == "betaDownload" && methodName == "betaDownloadLogin") {
                                if ($("#thankYou").val() != undefined && $("#thankYou").val() != "") {
                                    var thankYouPage = $("#thankYou").val();
                                    thankYouPage = thankYouPage.replace("/content", "");
                                    var betaListingPage = $("#redirectUrl").val();
                                    betaListingPage = betaListingPage.replace("/content", "");
                                    if (msg.trim() == "true") {
                                        var betaEmailAddress = $("#betaEmailAddress").val();
                                        var betaPassword = $("#betaPassword").val();
                                        var betaForgotPwdCookie = readBetaCookie("McAfeeBetaForgotPwd");
                                        if (betaForgotPwdCookie.trim() == "true") {
                                            if ($("#changePwdUrl").val() != undefined && $("#changePwdUrl").val() != "") {
                                                window.location = $("#changePwdUrl").val() + "?emailAddress=" + betaEmailAddress
                                            }
                                        } else {
                                            var encryptedPassword = CryptoJS.AES.encrypt(betaPassword, "");
                                            var cookieValue = "&email=" + betaEmailAddress + "&pwd=" + encryptedPassword;
                                            var cookieExpireDate = new Date;
                                            cookieExpireDate.setFullYear(cookieExpireDate.getFullYear() + 1);
                                            setBetaCookie("McAfeeBeta", cookieValue, "");
                                            if ($("#beta_rememberMe").is(":checked")) {
                                                setBetaCookie("TrellixBetaRem", "true", cookieExpireDate.toGMTString());
                                                localStorage.betaEmailAddress = betaEmailAddress;
                                                localStorage.betaPassword = encryptedPassword
                                            } else {
                                                setBetaCookie("TrellixBetaRem", "false", cookieExpireDate.toGMTString());
                                                localStorage.removeItem("betaEmailAddress");
                                                localStorage.removeItem("betaPassword")
                                            }
                                            var betaCookie = readBetaCookie("betaDownloadId");
                                            if (betaCookie == null || betaCookie == undefined || betaCookie == "") {
                                                window.location = betaListingPage
                                            } else {
                                                var betaDownloadRes = readBetaCookie("betaDownloadRes");
                                                if (betaDownloadRes != null && betaDownloadRes != undefined && betaDownloadRes != "") {
                                                    betaDownloadRes = betaDownloadRes.replace("/content", "");
                                                    betaDownloadRes = betaDownloadRes.replace(/\/jcr:content.*/, ".html?beta=true");
                                                    window.location = betaDownloadRes
                                                } else {
                                                    thankYouPage = thankYouPage + "?beta=true";
                                                    callTracking('form_success');
                                                    window.location = thankYouPage
                                                }
                                            }
                                        }
                                    } else {
                                        if(loaderModal){
                                            setTimeout(function () {
                                            $('#loaderModal').modal('hide')
                                            }, 1000)
                                        }
                                        $(".submitBtn").before('<p class="error-field" id="beta-login-error" style="color:red">' + $("#authText").val() + "</p>");
                                        captchaServletForm();
                                        callTracking('form_failure');
                                    }
                                }
                            } else {
                                if (requestType == "betaDownloadForgotPassword" && methodName == "betaDownloadRetrieveForgotPassword") {
                                    if ($("#thankYou").val() != undefined && $("#thankYou").val() != "") {
                                        if (msg.trim() == "true") {
                                            setBetaCookie("McAfeeBetaForgotPwd", "true", "");
                                            var emailAddress = $("#betaForgotEmailAddress").val();
                                            var thankYouPage = $("#thankYou").val();
                                            thankYouPage = thankYouPage + "?emailAddress=" + emailAddress;
                                            callTracking('form_success');
                                            window.location = thankYouPage
                                        } else {
                                            setBetaCookie("McAfeeBetaForgotPwd", "false", "");
                                            $(".submitBtn").before('<p class="error-field" id="beta-pwd-error">' + $("#authText").val() + "</p>");
                                            captchaServletForm();
                                            callTracking('form_failure');
                                        }
                                    }
                                } else {
                                    if (requestType == "betaDownloadChangePassword" && methodName == "betaDownloadRetrieveChangePassword") {
                                        if ($("#thankYou").val() != undefined && $("#thankYou").val() != "") {
                                            if (msg.trim() == "true") {
                                                setBetaCookie("McAfeeBetaForgotPwd", "false", "");
                                                var thankYouPage = $("#thankYou").val();
                                                window.location = thankYouPage
                                            } else {
                                                setBetaCookie("McAfeeBetaForgotPwd", "true", "");
                                                $(".submitBtn").before('<p class="error-field" id="beta-pwd-change-error">' + $("#authText").val() + "</p>");
                                                captchaServletForm();
                                                callTracking('form_failure');
                                            }
                                        }
                                    } else {
                                        if (requestType == "betaDownloadFeedback" && methodName == "betaDownloadSubmitFeedback") {
                                            if ($("#thankYou").val() != undefined && $("#thankYou").val() != "") {
                                                var thankYouPage = $("#thankYou").val();
                                                callTracking('form_success');
                                                window.location = thankYouPage
                                            }
                                        } else {
                                            if (requestType == "mcAfeeLabService" && methodName == "saveMcAfeeLabFormData") {
                                                if (undefined !== msg.Message && msg.message === "invalid.email") {
                                                    $("#form.generalForm").after("<p class='error-field'>Invalid email, enter valid email</p>");
                                                    captchaServletForm()
                                                } else {
                                                    if (undefined !== msg.Message && msg.message === "invalid.attachment") {
                                                        $("#form.generalForm").after("<p class='error-field'>Invalid attachment file type or size</p>");
                                                        captchaServletForm();
                                                        callTracking('form_failure');
                                                    } else {
                                                        if (undefined !== msg.Message && msg.message === "embargoed.country.checked.failed") {
                                                            $("#form.generalForm").after("<p class='error-field'>Embargoed country checked failed</p>");
                                                            captchaServletForm()
                                                        } else {
                                                            if ($("#thankYou").val() != undefined && $("#thankYou").val() != "") {
                                                                var thankYouPage = $("#thankYou").val();
                                                                callTracking('form_success');
                                                                window.location = thankYouPage
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if (requestType == "countryCheck" && methodName == "getRegion") {
                                                    var redirectData = $("#thankYou").attr("value") == undefined ? "" : $("#thankYou").attr("value");
                                                    console.log(redirectData);
                                                    var redirectURL = window.location.origin + redirectData;
                                                    console.log(redirectURL);
                                                    callTracking('form_success');
                                                    window.location = redirectURL
                                                } else {
                                                    if (requestType == "customerFormService" && methodName == "validateCustomerForm") {
                                                        var redirectData = $("#thankYou").attr("value") == undefined ? "" : $("#thankYou").attr("value");
                                                        console.log(redirectData);
                                                        var redirectURL = window.location.origin + redirectData;
                                                        console.log(redirectURL);
                                                        callTracking('form_success');
                                                        window.location = redirectURL
                                                    } else {
                                                        if (requestType == "grantAuth" && methodName == "GetGrantAuthorization") {
                                                            if (msg.GetGrantAuthorization == "false") {
                                                                console.log("inside if");
                                                                $("#grantAuthorization").before('<p class="error-field">The grant number you entered did not match any grant number in your group. Please retry or click Cancel to only display the grant number you entered to login.</p>');
                                                                captchaServletForm()
                                                            } else {
                                                                console.log("inside else");
                                                                localStorage.addGroupOnAuth = "add";
                                                                var redirectData = $("#redirectURL").attr("data-redirect") == undefined ? "" : $("#redirectURL").attr("data-redirect");
                                                                var redirectURL = window.location.origin + redirectData;
                                                                window.location = redirectURL
                                                            }
                                                        } else {
                                                            if (requestType == "betaRegistration" && methodName == "getBetaRegistration") {
                                                                if(loaderModal){
                                                                   setTimeout(function () {
                                                                         $('#loaderModal').modal('hide')
                                                                   }, 1000)
                                                                }
                                                                if (msg.getBetaRegistration == "embargoed country check failed") {
                                                                    $(".genericForm").prepend('<p class="error-field" style="color:red">embargoed country check failed</p>');
                                                                    $("html, body").animate({
                                                                        scrollTop: 0
                                                                    }, "fast");
                                                                    captchaServletForm()
                                                                } else {
                                                                    if (msg.getBetaRegistration == "restricted third party") {
                                                                        $(".genericForm").prepend('<p class="error-field" style="color:red">' + $("#authText").val() + "</p>");
                                                                        $("html, body").animate({
                                                                            scrollTop: 0
                                                                        }, "fast");
                                                                        captchaServletForm();
                                                                        callTracking('form_failure');
                                                                    } else {
                                                                        if (msg.getBetaRegistration == "email id already exist") {
                                                                            var redirectData = $("#authenticateURL").attr("data-authenticate") == undefined ? "" : $("#authenticateURL").attr("data-authenticate");
                                                                            var authenticateURL = window.location.origin + redirectData;
                                                                            window.location = authenticateURL
                                                                        } else {
                                                                            var redirectData = $("#confirmationURL").attr("data-confirmation") == undefined ? "" : $("#confirmationURL").attr("data-confirmation");
                                                                            var redirectURL = window.location.origin + redirectData;
                                                                            callTracking('form_success');
                                                                            window.location = redirectURL
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if (requestType == "whiteListingService") {
                                                                    onWhiteListingResponse(msg, methodName)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        })
    };

    function onWhiteListingResponse(msg, methodName) {
        if (msg == undefined) {
            return
        }
        if (methodName == "whiteListChangePasswordSubmit" || methodName == "whiteListSampleUploadSubmit") {
            var wLErrorLblEle = $("#wLErrorLbl");
            wLErrorLblEle.hide();
            if (msg.errors) {
                wLErrorLblEle.html(msg.errors);
                wLErrorLblEle.show();
                captchaServletForm()
            } else {
                if (msg.lblConfirmation) {
                    var wLFormContainerDivEle = $("#wLFormContainerDiv");
                    wLFormContainerDivEle.hide();
                    var wLSuccessMsgDivEle = $("#wLSuccessMsgDiv");
                    wLSuccessMsgDivEle.show();
                    var wLSucsLblEle = $("#wLSucsLbl");
                    wLSucsLblEle.html(msg.lblConfirmation)
                }
            }
        }
    }
    var onFormSubmitClick = function() {

        var strlUrl = window.location.href;
        var requestType = $("form.generalForm").attr("requesttype");
        var methodName = $("form.generalForm").attr("methodname");
        var isMultipart = $("form.generalForm").attr("multipartForm");
        $(".fileTypeSelect").parent().find("p.file-type-error").remove();
        if ($(".fileTypeSelect").length > 0) {
            if (!$.fn.fileExtCheck()) {
                return false
            }
            if (!$.fn.fileSizeCheck()) {
                return false
            }
        }
        var newURL = strlUrl + "?requestType=" + requestType + "&methodName=" + methodName;
        genericForm.postFormData(requestType, methodName, isMultipart)

    };
    var setSubmitButtonDisableState = function() {
        $("form.generalForm").find('button[type="submit"]').attr("disabled", true);
        var formElementsList = $("form.generalForm").find('input[type="text"],input[type="password"],input[type="email"]');
        var emptyFlag = true;
        $.each(formElementsList, function() {
            if ($.trim($(this).val()) == "") {
                emptyFlag = false;
                return false
            }
        });
        if (emptyFlag) {
            if ($("ul.parsley-errors-list li").length == 0) {
                $("form.generalForm").find('button[type="submit"]').removeAttr("disabled")
            } else {
                $("form.generalForm").find('button[type="submit"]').attr("disabled", true)
            }
        }
    };
    var setAuthGrantSubmitButtonDisableState = function() {
        $("form.generalForm").find('button[type="submit"]').attr("disabled", true);
        var formElementsList = $("form.generalForm").find('input[type="text"]');
        var emptyFlag = true;
        $.each(formElementsList, function() {
            if ($.trim($(this).val()) == "") {
                emptyFlag = false;
                return false
            }
        });
        if (emptyFlag) {
            $("form.generalForm").find('button[type="submit"]').removeAttr("disabled")
        }
    };
    var formElementsKeyInputEvent = function() {
        var formType = $("form.generalForm").attr("requesttype");
        if (undefined != formType && formType == "productLogin") {
            $("form.generalForm").find('button[type="submit"]').attr("disabled", true);
            var formElementsList = $("form.generalForm").find('input[type="text"],input[type="password"],input[type="email"]');
            $.each(formElementsList, function() {
                $(this).on("focusin focusout change keyup", function() {
                    setSubmitButtonDisableState()
                })
            })
        }
    };
    var AuthenticateGrantInputEvent = function() {
        var formType = $("form.generalForm").attr("requesttype");
        if (undefined != formType && formType == "grantAuth") {
            $("form.generalForm").find('button[type="submit"]').attr("disabled", true);
            var formElementsList = $("form.generalForm").find('input[type="text"]');
            $.each(formElementsList, function() {
                $(this).on("focusin focusout change keyup", function() {
                    setAuthGrantSubmitButtonDisableState()
                })
            })
        }
    };
    return {
        postFormData: postFormData,
        onFormSubmitClick: onFormSubmitClick,
        setSubmitButtonDisableState: setSubmitButtonDisableState,
        formElementsKeyInputEvent: formElementsKeyInputEvent,
        AuthenticateGrantInputEvent: AuthenticateGrantInputEvent,
        setAuthGrantSubmitButtonDisableState: setAuthGrantSubmitButtonDisableState
    }
})();

function setAllDropdown() {
    var allDropdown = $("form.generalForm").find("select");
    $.each(allDropdown, function() {
        $(this).removeAttr("selected").find("option:first").attr("selected", "selected")
    })
}

function whiteListPrepare() {
    if (window.location == null || !window.location.pathname.indexOf("whitelisting") > 0) {
        return
    }
    var textEmailAddress = $("#textEmailAddress");
    var submitterEmail = $("#submitterEmail");
    if (textEmailAddress != null && submitterEmail != null) {
        var emailVal = submitterEmail.val();
        if (emailVal && emailVal.length > 0) {
            textEmailAddress.val(emailVal);
            textEmailAddress.prop("disabled", true)
        }
    }
    var wLErrorLblEle = $("#wLErrorLbl");
    if (wLErrorLblEle != null) {
        wLErrorLblEle.hide()
    }
    var wLSuccessMsgDivEle = $("#wLSuccessMsgDiv");
    if (wLSuccessMsgDivEle) {
        wLSuccessMsgDivEle.hide()
    }
    var submitterStatusEl = $("#submitterStatus");
    if (submitterStatusEl != null && window.location.pathname.indexOf("sample-upload") > 0) {
        var submitterStatus = submitterStatusEl.val();
        if (submitterStatus) {
            if (submitterStatus === "Active") {
                var wLNotRegisteredUserDiv = $("#wLNotRegisteredUserDiv");
                if (wLNotRegisteredUserDiv) {
                    wLNotRegisteredUserDiv.hide()
                }
            } else {
                if (submitterStatus === "Registered") {
                    var wLFormContainerDiv = $("#wLFormContainerDiv");
                    if (wLFormContainerDiv) {
                        wLFormContainerDiv.hide()
                    }
                }
            }
        }
    }
}
$(document).ready(function() {
    /*const invalidDomains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'aol.com', 'live.com', 'outlook.com', 'gmx.com', 'icloud.com', 'titan.email', 'zoho.com', 'yandex.com', 'mail.com', 'protonmail.com', 're.cu', 're.ir','re.sy'];
    const submitBtn = $('.submitBtn');

    submitBtn.click(()=>{
            const email = $('#emailAddress');
        	const domainPart = email.val().split('@')[1];
                if(invalidDomains.indexOf(domainPart) !== -1) {
                         $('.invalid-feedback').html('please enter the valid email domain');
          				 return false;
       			}
        		else{
         			return true;
        		}

     });*/
         localStorage.removeItem("form_start");
           var email =$("#email");
           var emailTrail = $("#emailAddress");
           var password =$("#password");
           var betaChangePassword =$("#betaChangePassword");
            if(emailTrail.length >0){
                 emailTrail.on("input",()=>{ $.fn.emailDomainCheck(emailTrail)});
             }else if(email.length>0){
             email.on("input",(event)=>{ $.fn.emailDomainCheck(email)});}
             if(betaChangePassword.length>0){
                betaChangePassword.on("input",()=>{ $.fn.passwordStrengthCheck(betaChangePassword)});
             }
             if(password.length>0){
                password.on("input",()=>{ $.fn.passwordStrengthCheck(password)});
             }
             if($('#telephone').length>0){
                      $('#telephone').keypress((event)=>{
                       var keyCode = (event.keyCode ? event.keyCode : event.which);
                        if (!(keyCode >= 48 && keyCode <= 57)) {
                            event.preventDefault();
                          } });}
    $("#directToCustomer").attr("checked", true);
    $("#3rdPartyBundle").attr("checked", true);
    $("#3rdPartyNotBundle").attr("checked", true);
    var requestTypePD = $("form.generalForm").attr("requesttype");
    if (requestTypePD == "productLogin") {
        localStorage.productLoginPageURL = window.location.pathname
    }

    getMIDFromCookie();
    $("#existingCookieID").val(MCMID);
    if ($(".tldThreatName").length > 0) {
        $(".tldThreatName").click(function() {
            document.cookie = "SelectorKey=" + $(this).text() + ";path=/"
        });
        var threatName = $(".tldThreatName").closest("li.active").find("a").text();
        if (threatName != "" && threatName != undefined) {
            document.cookie = "SelectorKey=" + threatName + ";path=/"
        }
    }
    if ($("#tldThreatDetailName").length > 0) {
        var threatName = $("#tldThreatDetailName").html();
        if (threatName != "" && threatName != undefined) {
            document.cookie = "SelectorKey=" + threatName.trim() + ";path=/"
        }
    }
    if ($(".tldHomeName").length > 0) {
        $(".tldHomeName").click(function() {
            var value = "";
            document.cookie = "SelectorKey=" + value + ";path=/;"
        })
    }
    var threatName = readCookieValue("SelectorKey").replace('"', "").replace('"', "");
    if (threatName == undefined || threatName == null) {
        threatName = ""
    }
    if (threatName != "") {
        $("#threatType").html(threatName);
        $("#threatType").show()
    }
    genericForm.formElementsKeyInputEvent();
    genericForm.AuthenticateGrantInputEvent();
    $("#reset").click(function() {
        var selectedCountry = "";
        if ($("#country").length > 0) {
            selectedCountry = $("#country").val()
        }
        $("form.generalForm").parsley().reset();
        if ($("#country").length > 0) {
            setTimeout(function() {
                $("#country").val(selectedCountry)
            }, 1000)
        }
        captchaServletForm()
    });
    $("#cancelAuthId").click(function() {
        localStorage.cancelOnAuth = "cancel"
    });
    if($("#realCaptcha").length>0){
             $("#realCaptcha").click(function () {
                   if($('#realCaptcha').parent().find('.invalid-feedback')[0] != null && $('#realCaptcha').attr('requiredmessage') !=null){
                   $('#realCaptcha').parent().find('.invalid-feedback')[0].innerText = $('#realCaptcha').attr('requiredmessage');                                   }

             });
        }

                           setTimeout(function() {
                             $("input,select").focus(function(){
                                 var isStart = localStorage.getItem("form_start");
                                 if(isStart == null){
                                     console.log("isStart :: true");
                                    callTracking('form_start');
                                    localStorage.setItem("form_start",true);
                                 }else{
                                     console.log("isStart :: false");
                                 }
                             });
                          }, 500);
  $(".submitBtn").on("click", function(event) {
        event.preventDefault();
        var rememberMe = $("#tpr_rememberMe").length;
        if (rememberMe > 0) {
            var formName = "form.generalForm";
            $.fn.rememberTrialForm(formName)
        }
        var remFormValues = $("#remFormValues").length;
        if (remFormValues > 0) {
            var formName = "form.generalForm";
            $.fn.rememberFormValues(formName)
        }
        var confPassword = $("#confirmPassword").length;
        if(confPassword > 0) {
            var confirmPassword = $("#confirmPassword");
            $.fn.confirmPasswordCheck(confirmPassword[0])
        }
        var betaConfirmChangePassword = $("#betaConfirmChangePassword").length;
        if(betaConfirmChangePassword > 0) {
              var betaConfirmChangePassword = $("#betaConfirmChangePassword");
              $.fn.betaConfirmChangePasswordCheck(betaConfirmChangePassword[0])
        }
        if (($("form.generalForm.genericForm")) || ($("form").hasClass("preferenceCenterForm")) || ($("form").hasClass("snsForm"))) {
            console.log("call your form submit function here");
            if (!($("form").hasClass("preferenceCenterForm")) && !($("form").hasClass("snsForm"))) {

                                    var forms = $('form.generalForm.genericForm');
                                        if(forms[0].checkValidity()){
                                            forms.addClass('was-validated');
                                            genericForm.onFormSubmitClick();
                                         }else{
                                             forms.addClass('was-validated');

                                         }
              } else {
                                    var errorCount = 0;
                                    $("input, select").each(function() {
                                        if ($(this).hasClass("parsley-error")) {
                                            $(this).removeClass("parsley-error")
                                        }
                                    });
                                    if ($("input[name='globalOptIn']").attr("checked") == "checked") {
                                        $("input, select").each(function() {
                                            if (($(this).attr("required") == "required" && $(this).attr("name") == "email")) {
                                                if ($(this).attr("value") == "") {
                                                    $(this).removeClass("parsley-success");
                                                    $(this).addClass("parsley-error");
                                                    errorCount++
                                                }
                                            }
                                        })
                                    } else {
                                         $("input, select").each(function() {
                                            if ($(this).attr("required") == "required") {
                                                if ($(this).attr("value") == "") {
                                                    //console.log("apend feedbackone");
                                                    $(this).removeClass("parsley-success");
                                                    $(this).addClass("parsley-error");
                                                    errorCount++
                                                    // $(this).append("<div class=" + "invalid-feedback" + ">This value is required</div>");
                                                }
                                            }
                                        });
                                    }
                                    if (errorCount == 0) {
                                        if ($("form").hasClass("preferenceCenterForm")) {
                                            preferencePost()
                                        } else {
                                            snsFormPOST()
                                        }
                                    }
                 }

        } else {
            console.log("form is not valid")
        }
    });
    var liArray = $(".threatTypeLI a");
    $.each(liArray, function(key, val) {
        if ($(val).attr("data-filter") == $("#threatTypeDiv").attr("data-dbname")) {
            $(this).parent().addClass("active")
        } else {
            $(this).parent().removeClass("active")
        }
    });
    var formName = "form.generalForm";
    if ($(formName).length > 0) {
        $.fn.fillTrialRememberMeForm(formName);
        $.fn.fillBetaRememberMe(formName);
        $.fn.fillRememberMeFormValues(formName)
    }
    if ($("form").hasClass("preferenceCenterForm")) {
        var reqInput = [];
        $("input, select").each(function() {
            if ($(this).attr("required") == "required") {
                reqInput.push(this.name)
            }
        });
        var json_response = "";
        if (MCMID != null && MCMID != "" && MCMID >= 0) {
            $("#existingCookieID").val(MCMID);
            $.ajax({
                type: "GET",
                url: "/corpcomsvc/campaign/preferencecentre",
                cache: false,
                data: {
                    campaignId: MCMID
                },
                error: function(msg) {},
                success: function(msg) {
                    json_response = msg;
                    if ($.isEmptyObject(json_response)) {
                        defalutCheckboxBehaviour("empty_json")
                    } else {
                        $.each(msg, function(key, val) {
                            var key = key,
                                val = val;
                            checkBoxValue(key, val)
                        })
                    }
                    autoPopulate(json_response)
                },
                error: function(msg) {
                    console.log("Error in customer data")
                }
            })
        } else {
            defalutCheckboxBehaviour("filled_json");
            $("#existingCookieID").val(MCMID)
        }

        function defalutCheckboxBehaviour(load_instance) {
            var checkBoxVal = $(this).closest("input[type='checkbox']").attr("name");
            if (load_instance == "empty_json") {
                $(".preferenceCenterForm").find("input[type='checkbox']").each(function() {
                    $(this).attr("checked", "checked");
                    $(this).val("1")
                })
            } else {
                $(".preferenceCenterForm").find("input[type='checkbox']").each(function() {
                    var val = $(this).closest("input[type='checkbox']").attr("name");
                    if (getCookie("CampaignVistorID") == "") {
                        $(this).attr("checked", "checked");
                        $(this).val("1")
                    } else {
                        checkBoxFromJson()
                    }
                })
            }
            $("#globalOptIn").removeAttr("checked");
            $("#globalOptIn").val("1")
        }

        function checkBoxValue(key, val) {
            $(".pref-CC-Subs .preferenceCenterForm").find("input[type='checkbox']").each(function() {
                if (key == $(this).attr("id")) {
                    $(this).val(val);
                    if (val == 1 && key != "globalOptIn") {
                        $(this).attr("checked", "checked")
                    }
                    if (val == 0 && key == "globalOptIn") {
                        $(this).attr("checked", "checked")
                    }
                }
            })
        }

        function checkBoxFromJson() {
            $(".preferenceCenterForm").find("input[type='checkbox']").each(function() {
                var val = $(this).closest("input[type='checkbox']").attr("name");
                if (check(val, json_response) == true) {
                    $(this).attr("checked", "checked")
                }
            })
        }
        $(".preferenceCenterForm").find("input[type='checkbox']").change(function() {
            if (this.checked) {
                if ($(this).attr("id") != "globalOptIn") {
                    if ($("#globalOptIn").val() == "0") {
                        $("#globalOptIn").removeAttr("checked");
                        $("#globalOptIn").val("1")
                    }
                    $(this).val("1")
                } else {
                    $(this).val("0")
                }
            } else {
                if ($(this).attr("id") != "globalOptIn") {
                    $(this).val("0")
                } else {
                    $(this).val("1")
                }
            }
            $.each(reqInput, function(i, val) {
                if ($("input[name='globalOptIn']").attr("checked") == "checked") {
                    $("input, select").each(function() {
                        if (($(this).attr("name") == val && $(this).attr("name") != "email")) {
                            $(this).removeAttr("required");
                            $(this).removeAttr("data-parsley-required");
                            if ($(this).hasClass("parsley-error")) {
                                $(this).removeClass("parsley-error")
                            }
                            if ($(this).find(".parsley-errors-list")) {
                                $("ul.parsley-errors-list li").remove()
                            }
                        }
                    })
                } else {
                    $("input, select").each(function() {
                        if ($(this).attr("name") == val) {
                            if (!($(this).attr("required") == "required")) {
                                $(this).attr("required", "required")
                            }
                        }
                    })
                }
            })
        });
        $("#globalOptIn").on("click", function(e) {
            if ($("#globalOptIn")) {
                $(".preferenceCenterForm").find("input[type='checkbox']").each(function() {
                    var val = $(this).closest("input[type='checkbox']").attr("name");
                    if (val != "globalOptIn") {
                        $(this).removeAttr("checked");
                        $(this).val("0")
                    }
                })
            }
        });

        function check(val, json) {
            if ($.isEmptyObject(json_response)) {
                console.log("empty preference json returned");
                return false
            } else {
                if (json.preferenceData.hasOwnProperty(val)) {
                    if (json.preferenceData[val] == "1") {
                        return true
                    }
                    return false
                }
            }
        }

        function autoPopulate(json) {
            if (json) {
                if (json.hasOwnProperty("customerData")) {
                    var customerData = json.customerData;
                    for (var key in customerData) {
                        var selector = key;
                        if (key.toLowerCase().indexOf("state") > -1) {
                            selector = "states"
                        }
                        if ($("form").find('input[name="' + selector + '"]').length > 0) {
                            $("form").find('input[name="' + selector + '"]').val(customerData[key])
                        } else {
                            if ($("form").find('select[name="' + selector + '"]').length > 0) {
                                $("form").find('select[name="' + selector + '"] option').map(function() {
                                    if ($(this).text().toLowerCase() == customerData[key].toLowerCase()) {
                                        return this
                                    }
                                }).attr("selected", "selected");
                                if (key.toLowerCase().indexOf("country") > -1) {
                                    $("form").find('select[name="' + selector + '"]').trigger("change")
                                }
                            }
                        }
                    }
                } else {
                    var customerData = json;
                    for (var key in customerData) {
                        var selector = key;
                        if (key.toLowerCase().indexOf("state") > -1) {
                            selector = "states"
                        }
                        if ($("form").find('input[name="' + selector + '"]').length > 0) {
                            $("form").find('input[name="' + selector + '"]').val(customerData[key])
                        } else {
                            if ($("form").find('select[name="' + selector + '"]').length > 0) {
                                $("form").find('select[name="' + selector + '"] option').map(function() {
                                    if ($(this).text().toLowerCase() == customerData[key].toLowerCase()) {
                                        return this
                                    }
                                }).attr("selected", "selected");
                                if (key.toLowerCase().indexOf("country") > -1) {
                                    $("form").find('select[name="' + selector + '"]').trigger("change")
                                }
                            }
                        }
                    }
                }
            }
        }

        function makeid() {
            var text = "";
            var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            for (var i = 0; i < 8; i++) {
                text += possible.charAt(Math.floor(Math.random() * possible.length))
            }
            return text
        }
    }

    function getMIDFromCookie() {
        var pairs = document.cookie.split(";");
        var cookieVal = "";
        var cookieValSplit;
        var pointer = -1;
        for (var i = 0; i < pairs.length; i++) {
            var pair = pairs[i].split("=");
            if (pair[0] != null && pair[0].indexOf("AMCV_A729776A5245B1590A490D44") > -1) {
                pointer = pair[1].indexOf("MCMID");
                if (pointer > -1) {
                    cookieVal = pair[1].substring(pointer, pair[1].indexOf("MCAAMLH"));
                    cookieValSplit = cookieVal.split("%7C");
                    if (cookieValSplit.length >= 2) {
                        MCMID = cookieValSplit[1]
                    }
                }
            } else {
                continue
            }
        }
        return MCMID
    }

    function getCookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(";");
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == " ") {
                c = c.substring(1)
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length)
            }
        }
        return ""
    }
    $(document).on("change", "#beta_featureModification", function() {
        if (this.checked) {
            $(formName + " input").each(function(index) {
                var input = $(this);
                var attributeType = input.attr("type");
                var attributeName = input.attr("name");
                if (attributeType == "text" && input.hasClass("disable")) {
                    input.attr("disabled", "disabled");
                    input.removeAttr("required");
                    input.css("background-color", "#dddddd")
                }
            });
            $(formName + " select").each(function(index) {
                var input = $(this);
                if (input.hasClass("disable")) {
                    input.attr("disabled", "disabled");
                    input.removeAttr("required")
                }
            });
            $(formName + " textarea").each(function(index) {
                var input = $(this);
                if (input.hasClass("disable")) {
                    input.attr("disabled", "disabled");
                    input.removeAttr("required")
                }
            })
        } else {
            $(formName + " input").each(function(index) {
                var input = $(this);
                var attributeType = input.attr("type");
                var attributeName = input.attr("name");
                if (attributeType == "text" && input.hasClass("disable")) {
                    input.removeAttr("disabled");
                    input.css("background-color", "#fff");
                    input.attr("required", "")
                }
            });
            $(formName + " select").each(function(index) {
                var input = $(this);
                if (input.hasClass("disable")) {
                    input.removeAttr("disabled");
                    input.attr("required", "")
                }
            });
            $(formName + " textarea").each(function(index) {
                var input = $(this);
                if (input.hasClass("disable")) {
                    input.removeAttr("disabled");
                    input.attr("required", "")
                }
            })
        }
    });
    whiteListPrepare()

 var evalParameter = getUrlParameter("eval");
    var showEval = getUrlParameter("showeval");
    if(evalParameter != "" && evalParameter != undefined && evalParameter != null && showEval != "no"){
    	getTrialName(evalParameter);
    }

 getRegion = function () {
						region = (window.location.href.match(/\/..-..\//g)!= null) ?window.location.href.match(/\/..-..\//g)[0]:'en-us' ;
                        region = region.replace(/\//ig,'');
						return  region;
				   };

});

function getTrialName(eval){
	var actionUrl = "/corpcomsvc/productDownloadName?eval="+eval;
	$.ajax({
        url: actionUrl,
        type: 'POST',
        timeout: 20000,
        cache: true,
        error: function(){
        	//window.location.reload();
        },
        success: function(data){
        	var trialText = $("#trialText").val();
        	if(trialText == undefined || trialText == null){
        		trialText = "";
        	}
        	if(data == undefined || data == null){
        		data = "";
        	}
        	if(data != ""){
        		$("#trialName").html(trialText+data);
            	$("#trialName").show();
        	    trialText ="";
                trialText =$("#trialName").html();
                $("#trialName").html(trialText+'<p id="trialThankYou2" style="display:none">'+$("#trialThankYou").val()+"</p>");
            }


		 var trialType = $("#trialType").val();
        	if(trialType != undefined && trialType != null && trialType =="R"){
				$("#hiddenContactMeFlag").val("1");
				$("#hiddenContactMeFlag").prop("checked", true);
				$("#hiddenContactMeFlag").parent().hide();
			}else{
				$("#hiddenContactMeFlag").val("0");
				$("#hiddenContactMeFlag").prop("checked", false);
				$("#hiddenContactMeFlag").parent().show();

			}
    	}
    });
}

function getBetaFormValues(cookieValue, name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
    var results = regex.exec(cookieValue);
    return results === null ? "" : results[1]
}

function getUrlParameter(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
    var results = regex.exec(location.search);
    return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "))
}

function getAllParams(url) {
    var params = {};
    var parser = document.createElement("a");
    parser.href = url;
    var query = parser.search.substring(1);
    var vars = query.split("&");
    for (var i = 0; i < vars.length; i++) {
        var pair = vars[i].split("=");
        params[pair[0]] = decodeURIComponent(pair[1])
    }
    return params
}

function readCookieValue(name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(";");
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == " ") {
            c = c.substring(1, c.length)
        }
        if (c.indexOf(nameEQ) == 0) {
            return c.substring(nameEQ.length, c.length)
        }
    }
    return ""
}



function preferencePost() {
    formDataPref = new FormData($("form.preferenceCenterForm")[0]);
    var uncheckedBoxes = [];
    var uncheckedBoxesResult = "";
    notCheckedCheckboxes();

    function notCheckedCheckboxes() {
        $("form.preferenceCenterForm input[type=checkbox]:not(:checked)").each(function() {
            var uncheckedBoxesValue = this.name + "=" + $(this).val();
            uncheckedBoxes.push(uncheckedBoxesValue)
        });
        uncheckedBoxes = uncheckedBoxes.join("&");
        uncheckedBoxesResult = "&" + uncheckedBoxes
    }
    var cidVal = getParameterByName("cid");
    var tagVal = getParameterByName("tag");
    if (cidVal != null) {
        $("#cid").val(cidVal)
    }
    var preferenceCookieVal2 = MCMID;
    var preferenceData = $("form.preferenceCenterForm :not(input[name=statesId])").serialize() + uncheckedBoxesResult + "&campaignId=" + preferenceCookieVal2;
    $.ajax({
        type: "POST",
        url: "/corpcomsvc/campaign/preferencecentre",
        data: preferenceData,
        error: function(msg) {},
        success: function(msg) {
            if ($("#pardotFail").is(":visible")) {
                $("#pardotFail").hide()
            }
            if (msg.trim() == "Fail") {
                $("#pardotFail").show();
                if ($("#pardotFailText").val() != "") {
                    $("#pardotFail").html($("#pardotFailText").val());
                    $("html, body").animate({
                        scrollTop: 0
                    }, "fast")
                }
            } else {
                $("form.preferenceCenterForm").html;
                var formData1 = new FormData($("form.preferenceCenterForm")[0]);
                var parameters = getAllParams(window.location.href);
                var separator = "";
                var parameterString = "?";
                for (var params in parameters) {
                    if (parameters.hasOwnProperty(params)) {
                        parameterString += separator;
                        parameterString += params + "=" + parameters[params];
                        if (separator == "") {
                            separator = "&"
                        }
                    }
                }
                var thankYouPage = $("#redirectURL").attr("data-redirect");
                if (parameterString == "?=undefined") {
                    parameterString = ""
                }
                thankYouPage = thankYouPage + parameterString;
                window.location = thankYouPage
            }
        },
        error: function(msg) {
            console.log("Error in customer data");
            alert("Form Submission Failed");
            if (msg.trim() == "Fail") {
                $("#pardotFail").show();
                if ($("#pardotFailText").val() != "") {
                    $("#pardotFail").html($("#pardotFailText").val());
                    $("html, body").animate({
                        scrollTop: 0
                    }, "fast")
                }
            }
        }
    })
}

function getParameterByName(name, url) {
    if (!url) {
        url = window.location.href
    }
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) {
        return null
    }
    if (!results[2]) {
        return ""
    }
    return decodeURIComponent(results[2].replace(/\+/g, " "))
}

function generateDynamicFormJson() {
    var generateDynamicFormPath = $("#generateDynamicFormPath").val();
    $.ajax({
        url: "/corpcomsvc/campaign/dynamicformservlet",
        type: "POST",
        data: {
            path: generateDynamicFormPath
        },
        success: function(resp) {
            window.open(resp, "_blank")
        }
    })
}

function captchaServletForm() {
    if ($("#captchaImageID").length > 0 && $("#realCaptcha").length > 0) {
        $("#realCaptcha").val("");
        var number = Math.floor((1 + Math.random()) * 16777216);
        var xx = "/corpcomsvc/captchaServlet?q=" + number;
        $("#captchaImageID").attr("src", xx)
    }
}

function callTracking(trigger){
var metaPageName = $('meta[name="page-name"]').attr("content");
        var formTrackingObj = {formName: metaPageName, pageName : window.location.pathname, formid:"not available",formAOI: "not available"};
        var formId = $("#formId").val();
            if(formId !=null){
                     formTrackingObj.formid =  formId.toLowerCase().replace(" ","-");
             }
 if( window._satellite != undefined && typeof(_satellite.track) === typeof(Function)){
            console.log(trigger+" ,"+JSON.stringify(formTrackingObj));
                _satellite.track(trigger, formTrackingObj);
 }

}

/*!
* Parsley.js
* Version 2.4.4 - built Thu, Aug 4th 2016, 9:54 pm
* http://parsleyjs.org
* Guillaume Potier - <guillaume@wisembly.com>
* Marc-Andre Lafortune - <petroselinum@marc-andre.ca>
* MIT Licensed
*/
function _toConsumableArray(e){if(Array.isArray(e)){for(var t=0,i=Array(e.length);t<e.length;t++)i[t]=e[t];return i}return Array.from(e)}var _slice=Array.prototype.slice;!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],t):e.parsley=t(e.jQuery)}(this,function(e){"use strict";function t(e,t){return e.parsleyAdaptedCallback||(e.parsleyAdaptedCallback=function(){var i=Array.prototype.slice.call(arguments,0);i.unshift(this),e.apply(t||R,i)}),e.parsleyAdaptedCallback}function i(e){return 0===e.lastIndexOf(q,0)?e.substr(q.length):e}/**
   * inputevent - Alleviate browser bugs for input events
   * https://github.com/marcandre/inputevent
   * @version v0.0.3 - (built Thu, Apr 14th 2016, 5:58 pm)
   * @author Marc-Andre Lafortune <github@marc-andre.ca>
   * @license MIT
   */
function n(){var t=this,i=window||global;e.extend(this,{isNativeEvent:function(e){return e.originalEvent&&e.originalEvent.isTrusted!==!1},fakeInputEvent:function(i){t.isNativeEvent(i)&&e(i.target).trigger("input")},misbehaves:function(i){t.isNativeEvent(i)&&(t.behavesOk(i),e(document).on("change.inputevent",i.data.selector,t.fakeInputEvent),t.fakeInputEvent(i))},behavesOk:function(i){t.isNativeEvent(i)&&e(document).off("input.inputevent",i.data.selector,t.behavesOk).off("change.inputevent",i.data.selector,t.misbehaves)},install:function(){if(!i.inputEventPatched){i.inputEventPatched="0.0.3";for(var n=["select",'input[type="checkbox"]','input[type="radio"]','input[type="file"]'],r=0;r<n.length;r++){var s=n[r];e(document).on("input.inputevent",s,{selector:s},t.behavesOk).on("change.inputevent",s,{selector:s},t.misbehaves)}}},uninstall:function(){delete i.inputEventPatched,e(document).off(".inputevent")}})}var r=1,s={},a={attr:function(e,t,i){var n,r,s,a=new RegExp("^"+t,"i");if("undefined"==typeof i)i={};else for(n in i)i.hasOwnProperty(n)&&delete i[n];if("undefined"==typeof e||"undefined"==typeof e[0])return i;for(s=e[0].attributes,n=s.length;n--;)r=s[n],r&&r.specified&&a.test(r.name)&&(i[this.camelize(r.name.slice(t.length))]=this.deserializeValue(r.value));return i},checkAttr:function(e,t,i){return e.is("["+t+i+"]")},setAttr:function(e,t,i,n){e[0].setAttribute(this.dasherize(t+i),String(n))},generateID:function(){return""+r++},deserializeValue:function(t){var i;try{return t?"true"==t||("false"==t?!1:"null"==t?null:isNaN(i=Number(t))?/^[\[\{]/.test(t)?e.parseJSON(t):t:i):t}catch(n){return t}},camelize:function(e){return e.replace(/-+(.)?/g,function(e,t){return t?t.toUpperCase():""})},dasherize:function(e){return e.replace(/::/g,"/").replace(/([A-Z]+)([A-Z][a-z])/g,"$1_$2").replace(/([a-z\d])([A-Z])/g,"$1_$2").replace(/_/g,"-").toLowerCase()},warn:function(){var e;window.console&&"function"==typeof window.console.warn&&(e=window.console).warn.apply(e,arguments)},warnOnce:function(e){s[e]||(s[e]=!0,this.warn.apply(this,arguments))},_resetWarnings:function(){s={}},trimString:function(e){return e.replace(/^\s+|\s+$/g,"")},namespaceEvents:function(t,i){return t=this.trimString(t||"").split(/\s+/),t[0]?e.map(t,function(e){return e+"."+i}).join(" "):""},difference:function(t,i){var n=[];return e.each(t,function(e,t){-1==i.indexOf(t)&&n.push(t)}),n},all:function(t){return e.when.apply(e,_toConsumableArray(t).concat([42,42]))},objectCreate:Object.create||function(){var e=function(){};return function(t){if(arguments.length>1)throw Error("Second argument not supported");if("object"!=typeof t)throw TypeError("Argument must be an object");e.prototype=t;var i=new e;return e.prototype=null,i}}(),_SubmitSelector:'input[type="submit"], button:submit'},o=a,l={namespace:"data-parsley-",inputs:"input, textarea, select",excluded:"input[type=button], input[type=submit], input[type=reset]",priorityEnabled:!0,multiple:null,group:null,uiEnabled:!0,validationThreshold:3,focus:"first",trigger:!1,triggerAfterFailure:"input",errorClass:"parsley-error",successClass:"parsley-success",classHandler:function(e){},errorsContainer:function(e){},errorsWrapper:'<ul class="parsley-errors-list"></ul>',errorTemplate:"<li></li>"},u=function(){this.__id__=o.generateID()};u.prototype={asyncSupport:!0,_pipeAccordingToValidationResult:function(){var t=this,i=function(){var i=e.Deferred();return!0!==t.validationResult&&i.reject(),i.resolve().promise()};return[i,i]},actualizeOptions:function(){return o.attr(this.$element,this.options.namespace,this.domOptions),this.parent&&this.parent.actualizeOptions&&this.parent.actualizeOptions(),this},_resetOptions:function(e){this.domOptions=o.objectCreate(this.parent.options),this.options=o.objectCreate(this.domOptions);for(var t in e)e.hasOwnProperty(t)&&(this.options[t]=e[t]);this.actualizeOptions()},_listeners:null,on:function(e,t){this._listeners=this._listeners||{};var i=this._listeners[e]=this._listeners[e]||[];return i.push(t),this},subscribe:function(t,i){e.listenTo(this,t.toLowerCase(),i)},off:function(e,t){var i=this._listeners&&this._listeners[e];if(i)if(t)for(var n=i.length;n--;)i[n]===t&&i.splice(n,1);else delete this._listeners[e];return this},unsubscribe:function(t,i){e.unsubscribeTo(this,t.toLowerCase())},trigger:function(e,t,i){t=t||this;var n,r=this._listeners&&this._listeners[e];if(r)for(var s=r.length;s--;)if(n=r[s].call(t,t,i),n===!1)return n;return this.parent?this.parent.trigger(e,t,i):!0},reset:function(){if("ParsleyForm"!==this.__class__)return this._resetUI(),this._trigger("reset");for(var e=0;e<this.fields.length;e++)this.fields[e].reset();this._trigger("reset")},destroy:function(){if(this._destroyUI(),"ParsleyForm"!==this.__class__)return this.$element.removeData("Parsley"),this.$element.removeData("ParsleyFieldMultiple"),void this._trigger("destroy");for(var e=0;e<this.fields.length;e++)this.fields[e].destroy();this.$element.removeData("Parsley"),this._trigger("destroy")},asyncIsValid:function(e,t){return o.warnOnce("asyncIsValid is deprecated; please use whenValid instead"),this.whenValid({group:e,force:t})},_findRelated:function(){return this.options.multiple?this.parent.$element.find("["+this.options.namespace+'multiple="'+this.options.multiple+'"]'):this.$element}};var d={string:function(e){return e},integer:function(e){if(isNaN(e))throw'Requirement is not an integer: "'+e+'"';return parseInt(e,10)},number:function(e){if(isNaN(e))throw'Requirement is not a number: "'+e+'"';return parseFloat(e)},reference:function(t){var i=e(t);if(0===i.length)throw'No such reference: "'+t+'"';return i},"boolean":function(e){return"false"!==e},object:function(e){return o.deserializeValue(e)},regexp:function(e){var t="";return/^\/.*\/(?:[gimy]*)$/.test(e)?(t=e.replace(/.*\/([gimy]*)$/,"$1"),e=e.replace(new RegExp("^/(.*?)/"+t+"$"),"$1")):e="^"+e+"$",new RegExp(e,t)}},h=function(e,t){var i=e.match(/^\s*\[(.*)\]\s*$/);if(!i)throw'Requirement is not an array: "'+e+'"';var n=i[1].split(",").map(o.trimString);if(n.length!==t)throw"Requirement has "+n.length+" values when "+t+" are needed";return n},p=function(e,t){var i=d[e||"string"];if(!i)throw'Unknown requirement specification: "'+e+'"';return i(t)},c=function(e,t,i){var n=null,r={};for(var s in e)if(s){var a=i(s);"string"==typeof a&&(a=p(e[s],a)),r[s]=a}else n=p(e[s],t);return[n,r]},f=function(t){e.extend(!0,this,t)};f.prototype={validate:function(t,i){if(this.fn)return arguments.length>3&&(i=[].slice.call(arguments,1,-1)),this.fn.call(this,t,i);if(e.isArray(t)){if(!this.validateMultiple)throw"Validator `"+this.name+"` does not handle multiple values";return this.validateMultiple.apply(this,arguments)}if(this.validateNumber)return isNaN(t)?!1:(arguments[0]=parseFloat(arguments[0]),this.validateNumber.apply(this,arguments));if(this.validateString)return this.validateString.apply(this,arguments);throw"Validator `"+this.name+"` only handles multiple values"},parseRequirements:function(t,i){if("string"!=typeof t)return e.isArray(t)?t:[t];var n=this.requirementType;if(e.isArray(n)){for(var r=h(t,n.length),s=0;s<r.length;s++)r[s]=p(n[s],r[s]);return r}return e.isPlainObject(n)?c(n,t,i):[p(n,t)]},requirementType:"string",priority:2};var m=function(e,t){this.__class__="ParsleyValidatorRegistry",this.locale="en",this.init(e||{},t||{})},g={email:/^(([^<>()\[\]\\.,;:\s@\"]+(\.[^<>()\[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/i,number:/^-?(\d*\.)?\d+(e[-+]?\d+)?$/i,integer:/^-?\d+$/,digits:/^\d+$/,alphanum:/^\w+$/i,url:new RegExp("^(?:(?:https?|ftp)://)?(?:\\S+(?::\\S*)?@)?(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:/\\S*)?$","i")};g.range=g.number;var v=function(e){var t=(""+e).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);return t?Math.max(0,(t[1]?t[1].length:0)-(t[2]?+t[2]:0)):0};m.prototype={init:function(t,i){this.catalog=i,this.validators=e.extend({},this.validators);for(var n in t)this.addValidator(n,t[n].fn,t[n].priority);window.Parsley.trigger("parsley:validator:init")},setLocale:function(e){if("undefined"==typeof this.catalog[e])throw new Error(e+" is not available in the catalog");return this.locale=e,this},addCatalog:function(e,t,i){return"object"==typeof t&&(this.catalog[e]=t),!0===i?this.setLocale(e):this},addMessage:function(e,t,i){return"undefined"==typeof this.catalog[e]&&(this.catalog[e]={}),this.catalog[e][t]=i,this},addMessages:function(e,t){for(var i in t)this.addMessage(e,i,t[i]);return this},addValidator:function(e,t,i){if(this.validators[e])o.warn('Validator "'+e+'" is already defined.');else if(l.hasOwnProperty(e))return void o.warn('"'+e+'" is a restricted keyword and is not a valid validator name.');return this._setValidator.apply(this,arguments)},updateValidator:function(e,t,i){return this.validators[e]?this._setValidator.apply(this,arguments):(o.warn('Validator "'+e+'" is not already defined.'),this.addValidator.apply(this,arguments))},removeValidator:function(e){return this.validators[e]||o.warn('Validator "'+e+'" is not defined.'),delete this.validators[e],this},_setValidator:function(e,t,i){"object"!=typeof t&&(t={fn:t,priority:i}),t.validate||(t=new f(t)),this.validators[e]=t;for(var n in t.messages||{})this.addMessage(n,e,t.messages[n]);return this},getErrorMessage:function(e){var t;if("type"===e.name){var i=this.catalog[this.locale][e.name]||{};t=i[e.requirements]}else t=this.formatMessage(this.catalog[this.locale][e.name],e.requirements);return t||this.catalog[this.locale].defaultMessage||this.catalog.en.defaultMessage},formatMessage:function(e,t){if("object"==typeof t){for(var i in t)e=this.formatMessage(e,t[i]);return e}return"string"==typeof e?e.replace(/%s/i,t):""},validators:{notblank:{validateString:function(e){return/\S/.test(e)},priority:2},required:{validateMultiple:function(e){return e.length>0},validateString:function(e){return/\S/.test(e)},priority:512},type:{validateString:function(e,t){var i=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],n=i.step,r=void 0===n?"1":n,s=i.base,a=void 0===s?0:s,o=g[t];if(!o)throw new Error("validator type `"+t+"` is not supported");if(!o.test(e))return!1;if("number"===t&&!/^any$/i.test(r||"")){var l=Number(e),u=Math.max(v(r),v(a));if(v(l)>u)return!1;var d=function(e){return Math.round(e*Math.pow(10,u))};if((d(l)-d(a))%d(r)!=0)return!1}return!0},requirementType:{"":"string",step:"string",base:"number"},priority:256},pattern:{validateString:function(e,t){return t.test(e)},requirementType:"regexp",priority:64},minlength:{validateString:function(e,t){return e.length>=t},requirementType:"integer",priority:30},maxlength:{validateString:function(e,t){return e.length<=t},requirementType:"integer",priority:30},length:{validateString:function(e,t,i){return e.length>=t&&e.length<=i},requirementType:["integer","integer"],priority:30},mincheck:{validateMultiple:function(e,t){return e.length>=t},requirementType:"integer",priority:30},maxcheck:{validateMultiple:function(e,t){return e.length<=t},requirementType:"integer",priority:30},check:{validateMultiple:function(e,t,i){return e.length>=t&&e.length<=i},requirementType:["integer","integer"],priority:30},min:{validateNumber:function(e,t){return e>=t},requirementType:"number",priority:30},max:{validateNumber:function(e,t){return t>=e},requirementType:"number",priority:30},range:{validateNumber:function(e,t,i){return e>=t&&i>=e},requirementType:["number","number"],priority:30},equalto:{validateString:function(t,i){var n=e(i);return n.length?t===n.val():t===i},priority:256}}};var y={},_=function k(e,t,i){for(var n=[],r=[],s=0;s<e.length;s++){for(var a=!1,o=0;o<t.length;o++)if(e[s].assert.name===t[o].assert.name){a=!0;break}a?r.push(e[s]):n.push(e[s])}return{kept:r,added:n,removed:i?[]:k(t,e,!0).added}};y.Form={_actualizeTriggers:function(){var e=this;this.$element.on("submit.Parsley",function(t){e.onSubmitValidate(t)}),this.$element.on("click.Parsley",o._SubmitSelector,function(t){e.onSubmitButton(t)}),!1!==this.options.uiEnabled&&this.$element.attr("novalidate","")},focus:function(){if(this._focusedField=null,!0===this.validationResult||"none"===this.options.focus)return null;for(var e=0;e<this.fields.length;e++){var t=this.fields[e];if(!0!==t.validationResult&&t.validationResult.length>0&&"undefined"==typeof t.options.noFocus&&(this._focusedField=t.$element,"first"===this.options.focus))break}return null===this._focusedField?null:this._focusedField.focus()},_destroyUI:function(){this.$element.off(".Parsley")}},y.Field={_reflowUI:function(){if(this._buildUI(),this._ui){var e=_(this.validationResult,this._ui.lastValidationResult);this._ui.lastValidationResult=this.validationResult,this._manageStatusClass(),this._manageErrorsMessages(e),this._actualizeTriggers(),!e.kept.length&&!e.added.length||this._failedOnce||(this._failedOnce=!0,this._actualizeTriggers())}},getErrorsMessages:function(){if(!0===this.validationResult)return[];for(var e=[],t=0;t<this.validationResult.length;t++)e.push(this.validationResult[t].errorMessage||this._getErrorMessage(this.validationResult[t].assert));return e},addError:function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],i=t.message,n=t.assert,r=t.updateClass,s=void 0===r?!0:r;this._buildUI(),this._addError(e,{message:i,assert:n}),s&&this._errorClass()},updateError:function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],i=t.message,n=t.assert,r=t.updateClass,s=void 0===r?!0:r;this._buildUI(),this._updateError(e,{message:i,assert:n}),s&&this._errorClass()},removeError:function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],i=t.updateClass,n=void 0===i?!0:i;this._buildUI(),this._removeError(e),n&&this._manageStatusClass()},_manageStatusClass:function(){this.hasConstraints()&&this.needsValidation()&&!0===this.validationResult?this._successClass():this.validationResult.length>0?this._errorClass():this._resetClass()},_manageErrorsMessages:function(t){if("undefined"==typeof this.options.errorsMessagesDisabled){if("undefined"!=typeof this.options.errorMessage)return t.added.length||t.kept.length?(this._insertErrorWrapper(),0===this._ui.$errorsWrapper.find(".parsley-custom-error-message").length&&this._ui.$errorsWrapper.append(e(this.options.errorTemplate).addClass("parsley-custom-error-message")),this._ui.$errorsWrapper.addClass("filled").find(".parsley-custom-error-message").html(this.options.errorMessage)):this._ui.$errorsWrapper.removeClass("filled").find(".parsley-custom-error-message").remove();for(var i=0;i<t.removed.length;i++)this._removeError(t.removed[i].assert.name);for(i=0;i<t.added.length;i++)this._addError(t.added[i].assert.name,{message:t.added[i].errorMessage,assert:t.added[i].assert});for(i=0;i<t.kept.length;i++)this._updateError(t.kept[i].assert.name,{message:t.kept[i].errorMessage,assert:t.kept[i].assert})}},_addError:function(t,i){var n=i.message,r=i.assert;this._insertErrorWrapper(),this._ui.$errorsWrapper.addClass("filled").append(e(this.options.errorTemplate).addClass("parsley-"+t).html(n||this._getErrorMessage(r)))},_updateError:function(e,t){var i=t.message,n=t.assert;this._ui.$errorsWrapper.addClass("filled").find(".parsley-"+e).html(i||this._getErrorMessage(n))},_removeError:function(e){this._ui.$errorsWrapper.removeClass("filled").find(".parsley-"+e).remove()},_getErrorMessage:function(e){var t=e.name+"Message";return"undefined"!=typeof this.options[t]?window.Parsley.formatMessage(this.options[t],e.requirements):window.Parsley.getErrorMessage(e)},_buildUI:function(){if(!this._ui&&!1!==this.options.uiEnabled){var t={};this.$element.attr(this.options.namespace+"id",this.__id__),t.$errorClassHandler=this._manageClassHandler(),t.errorsWrapperId="parsley-id-"+(this.options.multiple?"multiple-"+this.options.multiple:this.__id__),t.$errorsWrapper=e(this.options.errorsWrapper).attr("id",t.errorsWrapperId),t.lastValidationResult=[],t.validationInformationVisible=!1,this._ui=t}},_manageClassHandler:function(){if("string"==typeof this.options.classHandler&&e(this.options.classHandler).length)return e(this.options.classHandler);var t=this.options.classHandler.call(this,this);return"undefined"!=typeof t&&t.length?t:this._inputHolder()},_inputHolder:function(){return!this.options.multiple||this.$element.is("select")?this.$element:this.$element.parent()},_insertErrorWrapper:function(){var t;if(0!==this._ui.$errorsWrapper.parent().length)return this._ui.$errorsWrapper.parent();if("string"==typeof this.options.errorsContainer){if(e(this.options.errorsContainer).length)return e(this.options.errorsContainer).append(this._ui.$errorsWrapper);o.warn("The errors container `"+this.options.errorsContainer+"` does not exist in DOM")}else"function"==typeof this.options.errorsContainer&&(t=this.options.errorsContainer.call(this,this));return"undefined"!=typeof t&&t.length?t.append(this._ui.$errorsWrapper):this._inputHolder().after(this._ui.$errorsWrapper)},_actualizeTriggers:function(){var e,t=this,i=this._findRelated();i.off(".Parsley"),this._failedOnce?i.on(o.namespaceEvents(this.options.triggerAfterFailure,"Parsley"),function(){t.validate()}):(e=o.namespaceEvents(this.options.trigger,"Parsley"))&&i.on(e,function(e){t._eventValidate(e)})},_eventValidate:function(e){!(!/key|input/.test(e.type)||this._ui&&this._ui.validationInformationVisible)&&this.getValue().length<=this.options.validationThreshold||this.validate()},_resetUI:function(){this._failedOnce=!1,this._actualizeTriggers(),"undefined"!=typeof this._ui&&(this._ui.$errorsWrapper.removeClass("filled").children().remove(),this._resetClass(),this._ui.lastValidationResult=[],this._ui.validationInformationVisible=!1)},_destroyUI:function(){this._resetUI(),"undefined"!=typeof this._ui&&this._ui.$errorsWrapper.remove(),delete this._ui},_successClass:function(){this._ui.validationInformationVisible=!0,this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass)},_errorClass:function(){this._ui.validationInformationVisible=!0,this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass)},_resetClass:function(){this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass)}};var w=function(t,i,n){this.__class__="ParsleyForm",this.$element=e(t),this.domOptions=i,this.options=n,this.parent=window.Parsley,this.fields=[],this.validationResult=null},b={pending:null,resolved:!0,rejected:!1};w.prototype={onSubmitValidate:function(e){var t=this;if(!0!==e.parsley){var i=this._$submitSource||this.$element.find(o._SubmitSelector).first();if(this._$submitSource=null,this.$element.find(".parsley-synthetic-submit-button").prop("disabled",!0),!i.is("[formnovalidate]")){var n=this.whenValidate({event:e});"resolved"===n.state()&&!1!==this._trigger("submit")||(e.stopImmediatePropagation(),e.preventDefault(),"pending"===n.state()&&n.done(function(){t._submit(i)}))}}},onSubmitButton:function(t){this._$submitSource=e(t.currentTarget)},_submit:function(t){if(!1!==this._trigger("submit")){if(t){var i=this.$element.find(".parsley-synthetic-submit-button").prop("disabled",!1);0===i.length&&(i=e('<input class="parsley-synthetic-submit-button" type="hidden">').appendTo(this.$element)),i.attr({name:t.attr("name"),value:t.attr("value")})}this.$element.trigger(e.extend(e.Event("submit"),{parsley:!0}))}},validate:function(t){if(arguments.length>=1&&!e.isPlainObject(t)){o.warnOnce("Calling validate on a parsley form without passing arguments as an object is deprecated.");var i=_slice.call(arguments),n=i[0],r=i[1],s=i[2];t={group:n,force:r,event:s}}return b[this.whenValidate(t).state()]},whenValidate:function(){var t,i=this,n=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],r=n.group,s=n.force,a=n.event;this.submitEvent=a,a&&(this.submitEvent=e.extend({},a,{preventDefault:function(){o.warnOnce("Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`"),i.validationResult=!1}})),this.validationResult=!0,this._trigger("validate"),this._refreshFields();var l=this._withoutReactualizingFormOptions(function(){return e.map(i.fields,function(e){return e.whenValidate({force:s,group:r})})});return(t=o.all(l).done(function(){i._trigger("success")}).fail(function(){i.validationResult=!1,i.focus(),i._trigger("error")}).always(function(){i._trigger("validated")})).pipe.apply(t,_toConsumableArray(this._pipeAccordingToValidationResult()))},isValid:function(t){if(arguments.length>=1&&!e.isPlainObject(t)){o.warnOnce("Calling isValid on a parsley form without passing arguments as an object is deprecated.");var i=_slice.call(arguments),n=i[0],r=i[1];t={group:n,force:r}}return b[this.whenValid(t).state()]},whenValid:function(){var t=this,i=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],n=i.group,r=i.force;this._refreshFields();var s=this._withoutReactualizingFormOptions(function(){return e.map(t.fields,function(e){return e.whenValid({group:n,force:r})})});return o.all(s)},_refreshFields:function(){return this.actualizeOptions()._bindFields()},_bindFields:function(){var t=this,i=this.fields;return this.fields=[],this.fieldsMappedById={},this._withoutReactualizingFormOptions(function(){t.$element.find(t.options.inputs).not(t.options.excluded).each(function(e,i){var n=new window.Parsley.Factory(i,{},t);"ParsleyField"!==n.__class__&&"ParsleyFieldMultiple"!==n.__class__||!0===n.options.excluded||"undefined"==typeof t.fieldsMappedById[n.__class__+"-"+n.__id__]&&(t.fieldsMappedById[n.__class__+"-"+n.__id__]=n,t.fields.push(n))}),e.each(o.difference(i,t.fields),function(e,t){t._trigger("reset")})}),this},_withoutReactualizingFormOptions:function(e){var t=this.actualizeOptions;this.actualizeOptions=function(){return this};var i=e();return this.actualizeOptions=t,i},_trigger:function(e){return this.trigger("form:"+e)}};var F=function(t,i,n,r,s){if(!/ParsleyField/.test(t.__class__))throw new Error("ParsleyField or ParsleyFieldMultiple instance expected");var a=window.Parsley._validatorRegistry.validators[i],o=new f(a);e.extend(this,{validator:o,name:i,requirements:n,priority:r||t.options[i+"Priority"]||o.priority,isDomConstraint:!0===s}),this._parseRequirements(t.options)},C=function(e){var t=e[0].toUpperCase();return t+e.slice(1)};F.prototype={validate:function(e,t){var i;return(i=this.validator).validate.apply(i,[e].concat(_toConsumableArray(this.requirementList),[t]))},_parseRequirements:function(e){var t=this;this.requirementList=this.validator.parseRequirements(this.requirements,function(i){return e[t.name+C(i)]})}};var $=function(t,i,n,r){this.__class__="ParsleyField",this.$element=e(t),"undefined"!=typeof r&&(this.parent=r),this.options=n,this.domOptions=i,this.constraints=[],this.constraintsByName={},this.validationResult=!0,this._bindConstraints()},x={pending:null,resolved:!0,rejected:!1};$.prototype={validate:function(t){arguments.length>=1&&!e.isPlainObject(t)&&(o.warnOnce("Calling validate on a parsley field without passing arguments as an object is deprecated."),t={options:t});var i=this.whenValidate(t);if(!i)return!0;switch(i.state()){case"pending":return null;case"resolved":return!0;case"rejected":return this.validationResult}},whenValidate:function(){var e,t=this,i=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],n=i.force,r=i.group;return this.refreshConstraints(),!r||this._isInGroup(r)?(this.value=this.getValue(),this._trigger("validate"),(e=this.whenValid({force:n,value:this.value,_refreshed:!0}).always(function(){t._reflowUI()}).done(function(){t._trigger("success")}).fail(function(){t._trigger("error")}).always(function(){t._trigger("validated")})).pipe.apply(e,_toConsumableArray(this._pipeAccordingToValidationResult()))):void 0},hasConstraints:function(){return 0!==this.constraints.length},needsValidation:function(e){return"undefined"==typeof e&&(e=this.getValue()),!(!e.length&&!this._isRequired()&&"undefined"==typeof this.options.validateIfEmpty)},_isInGroup:function(t){return e.isArray(this.options.group)?-1!==e.inArray(t,this.options.group):this.options.group===t},isValid:function(t){if(arguments.length>=1&&!e.isPlainObject(t)){o.warnOnce("Calling isValid on a parsley field without passing arguments as an object is deprecated.");var i=_slice.call(arguments),n=i[0],r=i[1];t={force:n,value:r}}var s=this.whenValid(t);return s?x[s.state()]:!0},whenValid:function(){var t=this,i=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],n=i.force,r=void 0===n?!1:n,s=i.value,a=i.group,l=i._refreshed;if(l||this.refreshConstraints(),!a||this._isInGroup(a)){if(this.validationResult=!0,!this.hasConstraints())return e.when();if("undefined"!=typeof s&&null!==s||(s=this.getValue()),!this.needsValidation(s)&&!0!==r)return e.when();var u=this._getGroupedConstraints(),d=[];return e.each(u,function(i,n){var r=o.all(e.map(n,function(e){return t._validateConstraint(s,e)}));return d.push(r),"rejected"===r.state()?!1:void 0}),o.all(d)}},_validateConstraint:function(t,i){var n=this,r=i.validate(t,this);return!1===r&&(r=e.Deferred().reject()),o.all([r]).fail(function(e){n.validationResult instanceof Array||(n.validationResult=[]),n.validationResult.push({assert:i,errorMessage:"string"==typeof e&&e})})},getValue:function(){var e;return e="function"==typeof this.options.value?this.options.value(this):"undefined"!=typeof this.options.value?this.options.value:this.$element.val(),"undefined"==typeof e||null===e?"":this._handleWhitespace(e)},refreshConstraints:function(){return this.actualizeOptions()._bindConstraints()},addConstraint:function(e,t,i,n){if(window.Parsley._validatorRegistry.validators[e]){var r=new F(this,e,t,i,n);"undefined"!==this.constraintsByName[r.name]&&this.removeConstraint(r.name),this.constraints.push(r),this.constraintsByName[r.name]=r}return this},removeConstraint:function(e){for(var t=0;t<this.constraints.length;t++)if(e===this.constraints[t].name){this.constraints.splice(t,1);break}return delete this.constraintsByName[e],this},updateConstraint:function(e,t,i){return this.removeConstraint(e).addConstraint(e,t,i)},_bindConstraints:function(){for(var e=[],t={},i=0;i<this.constraints.length;i++)!1===this.constraints[i].isDomConstraint&&(e.push(this.constraints[i]),t[this.constraints[i].name]=this.constraints[i]);this.constraints=e,this.constraintsByName=t;for(var n in this.options)this.addConstraint(n,this.options[n],void 0,!0);return this._bindHtml5Constraints()},_bindHtml5Constraints:function(){(this.$element.hasClass("required")||this.$element.attr("required"))&&this.addConstraint("required",!0,void 0,!0),"string"==typeof this.$element.attr("pattern")&&this.addConstraint("pattern",this.$element.attr("pattern"),void 0,!0),"undefined"!=typeof this.$element.attr("min")&&"undefined"!=typeof this.$element.attr("max")?this.addConstraint("range",[this.$element.attr("min"),this.$element.attr("max")],void 0,!0):"undefined"!=typeof this.$element.attr("min")?this.addConstraint("min",this.$element.attr("min"),void 0,!0):"undefined"!=typeof this.$element.attr("max")&&this.addConstraint("max",this.$element.attr("max"),void 0,!0),"undefined"!=typeof this.$element.attr("minlength")&&"undefined"!=typeof this.$element.attr("maxlength")?this.addConstraint("length",[this.$element.attr("minlength"),this.$element.attr("maxlength")],void 0,!0):"undefined"!=typeof this.$element.attr("minlength")?this.addConstraint("minlength",this.$element.attr("minlength"),void 0,!0):"undefined"!=typeof this.$element.attr("maxlength")&&this.addConstraint("maxlength",this.$element.attr("maxlength"),void 0,!0);var e=this.$element.attr("type");return"undefined"==typeof e?this:"number"===e?this.addConstraint("type",["number",{step:this.$element.attr("step"),base:this.$element.attr("min")||this.$element.attr("value")}],void 0,!0):/^(email|url|range)$/i.test(e)?this.addConstraint("type",e,void 0,!0):this},_isRequired:function(){return"undefined"==typeof this.constraintsByName.required?!1:!1!==this.constraintsByName.required.requirements},_trigger:function(e){return this.trigger("field:"+e)},_handleWhitespace:function(e){return!0===this.options.trimValue&&o.warnOnce('data-parsley-trim-value="true" is deprecated, please use data-parsley-whitespace="trim"'),"squish"===this.options.whitespace&&(e=e.replace(/\s{2,}/g," ")),"trim"!==this.options.whitespace&&"squish"!==this.options.whitespace&&!0!==this.options.trimValue||(e=o.trimString(e)),e},_getGroupedConstraints:function(){if(!1===this.options.priorityEnabled)return[this.constraints];for(var e=[],t={},i=0;i<this.constraints.length;i++){var n=this.constraints[i].priority;t[n]||e.push(t[n]=[]),t[n].push(this.constraints[i])}return e.sort(function(e,t){return t[0].priority-e[0].priority}),e}};var E=$,P=function(){this.__class__="ParsleyFieldMultiple"};P.prototype={addElement:function(e){return this.$elements.push(e),this},refreshConstraints:function(){var t;if(this.constraints=[],this.$element.is("select"))return this.actualizeOptions()._bindConstraints(),this;for(var i=0;i<this.$elements.length;i++)if(e("html").has(this.$elements[i]).length){t=this.$elements[i].data("ParsleyFieldMultiple").refreshConstraints().constraints;for(var n=0;n<t.length;n++)this.addConstraint(t[n].name,t[n].requirements,t[n].priority,t[n].isDomConstraint)}else this.$elements.splice(i,1);return this},getValue:function(){if("function"==typeof this.options.value)return this.options.value(this);if("undefined"!=typeof this.options.value)return this.options.value;if(this.$element.is("input[type=radio]"))return this._findRelated().filter(":checked").val()||"";if(this.$element.is("input[type=checkbox]")){var t=[];return this._findRelated().filter(":checked").each(function(){t.push(e(this).val())}),t}return this.$element.is("select")&&null===this.$element.val()?[]:this.$element.val()},_init:function(){return this.$elements=[this.$element],this}};var V=function(t,i,n){this.$element=e(t);var r=this.$element.data("Parsley");if(r)return"undefined"!=typeof n&&r.parent===window.Parsley&&(r.parent=n,r._resetOptions(r.options)),"object"==typeof i&&e.extend(r.options,i),r;if(!this.$element.length)throw new Error("You must bind Parsley on an existing element.");if("undefined"!=typeof n&&"ParsleyForm"!==n.__class__)throw new Error("Parent instance must be a ParsleyForm instance");return this.parent=n||window.Parsley,this.init(i)};V.prototype={init:function(e){return this.__class__="Parsley",this.__version__="2.4.4",this.__id__=o.generateID(),this._resetOptions(e),this.$element.is("form")||o.checkAttr(this.$element,this.options.namespace,"validate")&&!this.$element.is(this.options.inputs)?this.bind("parsleyForm"):this.isMultiple()?this.handleMultiple():this.bind("parsleyField")},isMultiple:function(){return this.$element.is("input[type=radio], input[type=checkbox]")||this.$element.is("select")&&"undefined"!=typeof this.$element.attr("multiple")},handleMultiple:function(){var t,i,n=this;if(this.options.multiple||("undefined"!=typeof this.$element.attr("name")&&this.$element.attr("name").length?this.options.multiple=t=this.$element.attr("name"):"undefined"!=typeof this.$element.attr("id")&&this.$element.attr("id").length&&(this.options.multiple=this.$element.attr("id"))),
this.$element.is("select")&&"undefined"!=typeof this.$element.attr("multiple"))return this.options.multiple=this.options.multiple||this.__id__,this.bind("parsleyFieldMultiple");if(!this.options.multiple)return o.warn("To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.",this.$element),this;this.options.multiple=this.options.multiple.replace(/(:|\.|\[|\]|\{|\}|\$)/g,""),"undefined"!=typeof t&&e('input[name="'+t+'"]').each(function(t,i){e(i).is("input[type=radio], input[type=checkbox]")&&e(i).attr(n.options.namespace+"multiple",n.options.multiple)});for(var r=this._findRelated(),s=0;s<r.length;s++)if(i=e(r.get(s)).data("Parsley"),"undefined"!=typeof i){this.$element.data("ParsleyFieldMultiple")||i.addElement(this.$element);break}return this.bind("parsleyField",!0),i||this.bind("parsleyFieldMultiple")},bind:function(t,i){var n;switch(t){case"parsleyForm":n=e.extend(new w(this.$element,this.domOptions,this.options),new u,window.ParsleyExtend)._bindFields();break;case"parsleyField":n=e.extend(new E(this.$element,this.domOptions,this.options,this.parent),new u,window.ParsleyExtend);break;case"parsleyFieldMultiple":n=e.extend(new E(this.$element,this.domOptions,this.options,this.parent),new P,new u,window.ParsleyExtend)._init();break;default:throw new Error(t+"is not a supported Parsley type")}return this.options.multiple&&o.setAttr(this.$element,this.options.namespace,"multiple",this.options.multiple),"undefined"!=typeof i?(this.$element.data("ParsleyFieldMultiple",n),n):(this.$element.data("Parsley",n),n._actualizeTriggers(),n._trigger("init"),n)}};var M=e.fn.jquery.split(".");if(parseInt(M[0])<=1&&parseInt(M[1])<8)throw"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.";M.forEach||o.warn("Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim");var O=e.extend(new u,{$element:e(document),actualizeOptions:null,_resetOptions:null,Factory:V,version:"2.4.4"});e.extend(E.prototype,y.Field,u.prototype),e.extend(w.prototype,y.Form,u.prototype),e.extend(V.prototype,u.prototype),e.fn.parsley=e.fn.psly=function(t){if(this.length>1){var i=[];return this.each(function(){i.push(e(this).parsley(t))}),i}return e(this).length?new V(this,t):void o.warn("You must bind Parsley on an existing element.")},"undefined"==typeof window.ParsleyExtend&&(window.ParsleyExtend={}),O.options=e.extend(o.objectCreate(l),window.ParsleyConfig),window.ParsleyConfig=O.options,window.Parsley=window.psly=O,window.ParsleyUtils=o;var A=window.Parsley._validatorRegistry=new m(window.ParsleyConfig.validators,window.ParsleyConfig.i18n);window.ParsleyValidator={},e.each("setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator".split(" "),function(t,i){window.Parsley[i]=e.proxy(A,i),window.ParsleyValidator[i]=function(){var e;return o.warnOnce("Accessing the method '"+i+"' through ParsleyValidator is deprecated. Simply call 'window.Parsley."+i+"(...)'"),(e=window.Parsley)[i].apply(e,arguments)}}),window.Parsley.UI=y,window.ParsleyUI={removeError:function(e,t,i){var n=!0!==i;return o.warnOnce("Accessing ParsleyUI is deprecated. Call 'removeError' on the instance directly. Please comment in issue 1073 as to your need to call this method."),e.removeError(t,{updateClass:n})},getErrorsMessages:function(e){return o.warnOnce("Accessing ParsleyUI is deprecated. Call 'getErrorsMessages' on the instance directly."),e.getErrorsMessages()}},e.each("addError updateError".split(" "),function(e,t){window.ParsleyUI[t]=function(e,i,n,r,s){var a=!0!==s;return o.warnOnce("Accessing ParsleyUI is deprecated. Call '"+t+"' on the instance directly. Please comment in issue 1073 as to your need to call this method."),e[t](i,{message:n,assert:r,updateClass:a})}}),!1!==window.ParsleyConfig.autoBind&&e(function(){e("[data-parsley-validate]").length&&e("[data-parsley-validate]").parsley()});var R=e({}),T=function(){o.warnOnce("Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley")},q="parsley:";e.listen=function(e,n){var r;if(T(),"object"==typeof arguments[1]&&"function"==typeof arguments[2]&&(r=arguments[1],n=arguments[2]),"function"!=typeof n)throw new Error("Wrong parameters");window.Parsley.on(i(e),t(n,r))},e.listenTo=function(e,n,r){if(T(),!(e instanceof E||e instanceof w))throw new Error("Must give Parsley instance");if("string"!=typeof n||"function"!=typeof r)throw new Error("Wrong parameters");e.on(i(n),t(r))},e.unsubscribe=function(e,t){if(T(),"string"!=typeof e||"function"!=typeof t)throw new Error("Wrong arguments");window.Parsley.off(i(e),t.parsleyAdaptedCallback)},e.unsubscribeTo=function(e,t){if(T(),!(e instanceof E||e instanceof w))throw new Error("Must give Parsley instance");e.off(i(t))},e.unsubscribeAll=function(t){T(),window.Parsley.off(i(t)),e("form,input,textarea,select").each(function(){var n=e(this).data("Parsley");n&&n.off(i(t))})},e.emit=function(e,t){var n;T();var r=t instanceof E||t instanceof w,s=Array.prototype.slice.call(arguments,r?2:1);s.unshift(i(e)),r||(t=window.Parsley),(n=t).trigger.apply(n,_toConsumableArray(s))};e.extend(!0,O,{asyncValidators:{"default":{fn:function(e){return e.status>=200&&e.status<300},url:!1},reverse:{fn:function(e){return e.status<200||e.status>=300},url:!1}},addAsyncValidator:function(e,t,i,n){return O.asyncValidators[e]={fn:t,url:i||!1,options:n||{}},this}}),O.addValidator("remote",{requirementType:{"":"string",validator:"string",reverse:"boolean",options:"object"},validateString:function(t,i,n,r){var s,a,o={},l=n.validator||(!0===n.reverse?"reverse":"default");if("undefined"==typeof O.asyncValidators[l])throw new Error("Calling an undefined async validator: `"+l+"`");i=O.asyncValidators[l].url||i,i.indexOf("{value}")>-1?i=i.replace("{value}",encodeURIComponent(t)):o[r.$element.attr("name")||r.$element.attr("id")]=t;var u=e.extend(!0,n.options||{},O.asyncValidators[l].options);s=e.extend(!0,{},{url:i,data:o,type:"GET"},u),r.trigger("field:ajaxoptions",r,s),a=e.param(s),"undefined"==typeof O._remoteCache&&(O._remoteCache={});var d=O._remoteCache[a]=O._remoteCache[a]||e.ajax(s),h=function(){var t=O.asyncValidators[l].fn.call(r,d,i,n);return t||(t=e.Deferred().reject()),e.when(t)};return d.then(h,h)},priority:-1}),O.on("form:submit",function(){O._remoteCache={}}),window.ParsleyExtend.addAsyncValidator=function(){return ParsleyUtils.warnOnce("Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`"),O.addAsyncValidator.apply(O,arguments)},O.addMessages("en",{defaultMessage:"This value seems to be invalid.",type:{email:"This value should be a valid email.",url:"This value should be a valid url.",number:"This value should be a valid number.",integer:"This value should be a valid integer.",digits:"This value should be digits.",alphanum:"This value should be alphanumeric."},notblank:"This value should not be blank.",required:"This value is required.",pattern:"This value seems to be invalid.",min:"This value should be greater than or equal to %s.",max:"This value should be lower than or equal to %s.",range:"This value should be between %s and %s.",minlength:"This value is too short. It should have %s characters or more.",maxlength:"This value is too long. It should have %s characters or fewer.",length:"This value length is invalid. It should be between %s and %s characters long.",mincheck:"You must select at least %s choices.",maxcheck:"You must select %s choices or fewer.",check:"You must select between %s and %s choices.",equalto:"This value should be the same."}),O.setLocale("en");var D=new n;D.install();var I=O;return I});
//# sourceMappingURL=parsley.min.js.map


var objCountries = {
'PS':'Palestinian Territory',
'ME':'Montenegro',
'GB':'United Kingdom',
'RS':'Serbia',
'AF':'Afghanistan',
'AL':'Albania',
'DZ':'Algeria',
'AS':'American Samoa',
'AD':'Andorra',
'AO':'Angola',
'AI':'Anguilla',
'AQ':'Antarctica',
'AG':'Antigua And Barbuda',
'AR':'Argentina',
'AM':'Armenia',
'AW':'Aruba',
'AU':'Australia',
'AT':'Austria',
'AZ':'Azerbaijan',
'BS':'Bahamas',
'BH':'Bahrain',
'BD':'Bangladesh',
'BB':'Barbados',
'BY':'Belarus',
'BE':'Belgium',
'BZ':'Belize',
'BJ':'Benin',
'BM':'Bermuda',
'BT':'Bhutan',
'BO':'Bolivia',
'BA':'Bosnia And Herzegovina',
'BW':'Botswana',
'BV':'Bouvet Island',
'BR':'Brazil',
'IO':'British Indian Ocean Territory',
'BN':'Brunei',
'BG':'Bulgaria',
'BF':'Burkina Faso',
'BI':'Burundi',
'KH':'Cambodia',
'CM':'Cameroon',
'CA':'Canada',
'CV':'Cape Verde',
'KY':'Cayman Islands',
'CF':'Central African Republic',
'TD':'Chad',
'CL':'Chile',
'CN':'China',
'CX':'Christmas Island',
'CC':'Cocos (Keeling) Islands',
'CO':'Colombia',
'KM':'Comoros',
'CG':'Congo',
'CK':'Cook Islands',
'CR':'Costa Rica',
'CI':'Cote D\'Ivorie (Ivory Coast)',
'HR':'Croatia (Hrvatska)',
'CU':'Cuba',
'CY':'Cyprus',
'CZ':'Czech Republic',
'CD':'Democratic Republic Of Congo (Zaire)',
'DK':'Denmark',
'DJ':'Djibouti',
'DM':'Dominica',
'DO':'Dominican Republic',
'TP':'East Timor',
'EC':'Ecuador',
'EG':'Egypt',
'SV':'El Salvador',
'GQ':'Equatorial Guinea',
'ER':'Eritrea',
'EE':'Estonia',
'ET':'Ethiopia',
'FK':'Falkland Islands (Malvinas)',
'FO':'Faroe Islands',
'FJ':'Fiji',
'FI':'Finland',
'FR':'France',
'FX':'France, Metropolitan',
'GF':'French Guinea',
'PF':'French Polynesia',
'TF':'French Southern Territories',
'GA':'Gabon',
'GM':'Gambia',
'GE':'Georgia',
'DE':'Germany',
'GB':'Great Britain',
'GH':'Ghana',
'GI':'Gibraltar',
'GR':'Greece',
'GL':'Greenland',
'GD':'Grenada',
'GP':'Guadeloupe',
'GU':'Guam',
'GT':'Guatemala',
'GN':'Guinea',
'GW':'Guinea-Bissau',
'GY':'Guyana',
'HT':'Haiti',
'HM':'Heard And McDonald Islands',
'HN':'Honduras',
'HK':'Hong Kong',
'HU':'Hungary',
'IS':'Iceland',
'IN':'India',
'ID':'Indonesia',
'IR':'Iran',
'IQ':'Iraq',
'IE':'Ireland',
'IL':'Israel',
'IT':'Italy',
'JM':'Jamaica',
'JP':'Japan',
'JO':'Jordan',
'KZ':'Kazakhstan',
'KE':'Kenya',
'KI':'Kiribati',
'KW':'Kuwait',
'KG':'Kyrgyzstan',
'LA':'Laos',
'LV':'Latvia',
'LB':'Lebanon',
'LS':'Lesotho',
'LR':'Liberia',
'LY':'Libya',
'LI':'Liechtenstein',
'LT':'Lithuania',
'LU':'Luxembourg',
'MO':'Macau',
'MK':'Macedonia',
'MG':'Madagascar',
'MW':'Malawi',
'MY':'Malaysia',
'MV':'Maldives',
'ML':'Mali',
'MT':'Malta',
'MH':'Marshall Islands',
'MQ':'Martinique',
'MR':'Mauritania',
'MU':'Mauritius',
'YT':'Mayotte',
'MX':'Mexico',
'FM':'Micronesia',
'MD':'Moldova',
'MC':'Monaco',
'MN':'Mongolia',
'MS':'Montserrat',
'MA':'Morocco',
'MZ':'Mozambique',
'MM':'Myanmar (Burma)',
'NA':'Namibia',
'NR':'Nauru',
'NP':'Nepal',
'NL':'Netherlands',
'AN':'Netherlands Antilles',
'NC':'New Caledonia',
'NZ':'New Zealand',
'NI':'Nicaragua',
'NE':'Niger',
'NG':'Nigeria',
'NU':'Niue',
'NF':'Norfolk Island',
'KP':'North Korea',
'MP':'Northern Mariana Islands',
'NO':'Norway',
'OM':'Oman',
'PK':'Pakistan',
'PW':'Palau',
'PA':'Panama',
'PG':'Papua New Guinea',
'PY':'Paraguay',
'PE':'Peru',
'PH':'Philippines',
'PN':'Pitcairn',
'PL':'Poland',
'PT':'Portugal',
'PR':'Puerto Rico',
'QA':'Qatar',
'RE':'Reunion',
'RO':'Romania',
'RU':'Russia',
'RW':'Rwanda',
'SH':'Saint Helena',
'KN':'Saint Kitts And Nevis',
'LC':'Saint Lucia',
'PM':'Saint Pierre And Miquelon',
'VC':'Saint Vincent And The Grenadines',
'SM':'San Marino',
'ST':'Sao Tome And Principe',
'SA':'Saudi Arabia',
'SN':'Senegal',
'SC':'Seychelles',
'SL':'Sierra Leone',
'SG':'Singapore',
'SK':'Slovak Republic',
'SI':'Slovenia',
'SB':'Solomon Islands',
'SO':'Somalia',
'ZA':'South Africa',
'GS':'South Georgia And South Sandwich Islands',
'KR':'South Korea',
'ES':'Spain',
'LK':'Sri Lanka',
'SD':'Sudan',
'SR':'Suriname',
'SJ':'Svalbard And Jan Mayen',
'SZ':'Swaziland',
'SE':'Sweden',
'CH':'Switzerland',
'SY':'Syria',
'TW':'Taiwan',
'TJ':'Tajikistan',
'TZ':'Tanzania',
'TH':'Thailand',
'TG':'Togo',
'TK':'Tokelau',
'TO':'Tonga',
'TT':'Trinidad And Tobago',
'TN':'Tunisia',
'TR':'Turkey',
'TM':'Turkmenistan',
'TC':'Turks And Caicos Islands',
'TV':'Tuvalu',
'UG':'Uganda',
'UA':'Ukraine',
'AE':'United Arab Emirates',
'UK':'United Kingdom',
'US':'United States',
'UM':'United States Minor Outlying Islands',
'UY':'Uruguay',
'UZ':'Uzbekistan',
'VU':'Vanuatu',
'VA':'Vatican City (Holy See)',
'VE':'Venezuela',
'VN':'Vietnam',
'VG':'Virgin Islands (British)',
'VI':'Virgin Islands (US)',
'WF':'Wallis And Futuna Islands',
'EH':'Western Sahara',
'WS':'Western Samoa',
'YE':'Yemen',
'YU':'Yugoslavia',
'ZM':'Zambia',
'ZW':'Zimbabwe'
};
/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
var CryptoJS=CryptoJS||function(u,p){var d={},l=d.lib={},s=function(){},t=l.Base={extend:function(a){s.prototype=this;var c=new s;a&&c.mixIn(a);c.hasOwnProperty("init")||(c.init=function(){c.$super.init.apply(this,arguments)});c.init.prototype=c;c.$super=this;return c},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&&(this[c]=a[c]);a.hasOwnProperty("toString")&&(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},
r=l.WordArray=t.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=p?c:4*a.length},toString:function(a){return(a||v).stringify(this)},concat:function(a){var c=this.words,e=a.words,j=this.sigBytes;a=a.sigBytes;this.clamp();if(j%4)for(var k=0;k<a;k++)c[j+k>>>2]|=(e[k>>>2]>>>24-8*(k%4)&255)<<24-8*((j+k)%4);else if(65535<e.length)for(k=0;k<a;k+=4)c[j+k>>>2]=e[k>>>2];else c.push.apply(c,e);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<<
32-8*(c%4);a.length=u.ceil(c/4)},clone:function(){var a=t.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],e=0;e<a;e+=4)c.push(4294967296*u.random()|0);return new r.init(c,a)}}),w=d.enc={},v=w.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var e=[],j=0;j<a;j++){var k=c[j>>>2]>>>24-8*(j%4)&255;e.push((k>>>4).toString(16));e.push((k&15).toString(16))}return e.join("")},parse:function(a){for(var c=a.length,e=[],j=0;j<c;j+=2)e[j>>>3]|=parseInt(a.substr(j,
2),16)<<24-4*(j%8);return new r.init(e,c/2)}},b=w.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var e=[],j=0;j<a;j++)e.push(String.fromCharCode(c[j>>>2]>>>24-8*(j%4)&255));return e.join("")},parse:function(a){for(var c=a.length,e=[],j=0;j<c;j++)e[j>>>2]|=(a.charCodeAt(j)&255)<<24-8*(j%4);return new r.init(e,c)}},x=w.Utf8={stringify:function(a){try{return decodeURIComponent(escape(b.stringify(a)))}catch(c){throw Error("Malformed UTF-8 data");}},parse:function(a){return b.parse(unescape(encodeURIComponent(a)))}},
q=l.BufferedBlockAlgorithm=t.extend({reset:function(){this._data=new r.init;this._nDataBytes=0},_append:function(a){"string"==typeof a&&(a=x.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var c=this._data,e=c.words,j=c.sigBytes,k=this.blockSize,b=j/(4*k),b=a?u.ceil(b):u.max((b|0)-this._minBufferSize,0);a=b*k;j=u.min(4*a,j);if(a){for(var q=0;q<a;q+=k)this._doProcessBlock(e,q);q=e.splice(0,a);c.sigBytes-=j}return new r.init(q,j)},clone:function(){var a=t.clone.call(this);
a._data=this._data.clone();return a},_minBufferSize:0});l.Hasher=q.extend({cfg:t.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){q.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(b,e){return(new a.init(e)).finalize(b)}},_createHmacHelper:function(a){return function(b,e){return(new n.HMAC.init(a,
e)).finalize(b)}}});var n=d.algo={};return d}(Math);
(function(){var u=CryptoJS,p=u.lib.WordArray;u.enc.Base64={stringify:function(d){var l=d.words,p=d.sigBytes,t=this._map;d.clamp();d=[];for(var r=0;r<p;r+=3)for(var w=(l[r>>>2]>>>24-8*(r%4)&255)<<16|(l[r+1>>>2]>>>24-8*((r+1)%4)&255)<<8|l[r+2>>>2]>>>24-8*((r+2)%4)&255,v=0;4>v&&r+0.75*v<p;v++)d.push(t.charAt(w>>>6*(3-v)&63));if(l=t.charAt(64))for(;d.length%4;)d.push(l);return d.join("")},parse:function(d){var l=d.length,s=this._map,t=s.charAt(64);t&&(t=d.indexOf(t),-1!=t&&(l=t));for(var t=[],r=0,w=0;w<
l;w++)if(w%4){var v=s.indexOf(d.charAt(w-1))<<2*(w%4),b=s.indexOf(d.charAt(w))>>>6-2*(w%4);t[r>>>2]|=(v|b)<<24-8*(r%4);r++}return p.create(t,r)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}})();
(function(u){function p(b,n,a,c,e,j,k){b=b+(n&a|~n&c)+e+k;return(b<<j|b>>>32-j)+n}function d(b,n,a,c,e,j,k){b=b+(n&c|a&~c)+e+k;return(b<<j|b>>>32-j)+n}function l(b,n,a,c,e,j,k){b=b+(n^a^c)+e+k;return(b<<j|b>>>32-j)+n}function s(b,n,a,c,e,j,k){b=b+(a^(n|~c))+e+k;return(b<<j|b>>>32-j)+n}for(var t=CryptoJS,r=t.lib,w=r.WordArray,v=r.Hasher,r=t.algo,b=[],x=0;64>x;x++)b[x]=4294967296*u.abs(u.sin(x+1))|0;r=r.MD5=v.extend({_doReset:function(){this._hash=new w.init([1732584193,4023233417,2562383102,271733878])},
_doProcessBlock:function(q,n){for(var a=0;16>a;a++){var c=n+a,e=q[c];q[c]=(e<<8|e>>>24)&16711935|(e<<24|e>>>8)&4278255360}var a=this._hash.words,c=q[n+0],e=q[n+1],j=q[n+2],k=q[n+3],z=q[n+4],r=q[n+5],t=q[n+6],w=q[n+7],v=q[n+8],A=q[n+9],B=q[n+10],C=q[n+11],u=q[n+12],D=q[n+13],E=q[n+14],x=q[n+15],f=a[0],m=a[1],g=a[2],h=a[3],f=p(f,m,g,h,c,7,b[0]),h=p(h,f,m,g,e,12,b[1]),g=p(g,h,f,m,j,17,b[2]),m=p(m,g,h,f,k,22,b[3]),f=p(f,m,g,h,z,7,b[4]),h=p(h,f,m,g,r,12,b[5]),g=p(g,h,f,m,t,17,b[6]),m=p(m,g,h,f,w,22,b[7]),
f=p(f,m,g,h,v,7,b[8]),h=p(h,f,m,g,A,12,b[9]),g=p(g,h,f,m,B,17,b[10]),m=p(m,g,h,f,C,22,b[11]),f=p(f,m,g,h,u,7,b[12]),h=p(h,f,m,g,D,12,b[13]),g=p(g,h,f,m,E,17,b[14]),m=p(m,g,h,f,x,22,b[15]),f=d(f,m,g,h,e,5,b[16]),h=d(h,f,m,g,t,9,b[17]),g=d(g,h,f,m,C,14,b[18]),m=d(m,g,h,f,c,20,b[19]),f=d(f,m,g,h,r,5,b[20]),h=d(h,f,m,g,B,9,b[21]),g=d(g,h,f,m,x,14,b[22]),m=d(m,g,h,f,z,20,b[23]),f=d(f,m,g,h,A,5,b[24]),h=d(h,f,m,g,E,9,b[25]),g=d(g,h,f,m,k,14,b[26]),m=d(m,g,h,f,v,20,b[27]),f=d(f,m,g,h,D,5,b[28]),h=d(h,f,
m,g,j,9,b[29]),g=d(g,h,f,m,w,14,b[30]),m=d(m,g,h,f,u,20,b[31]),f=l(f,m,g,h,r,4,b[32]),h=l(h,f,m,g,v,11,b[33]),g=l(g,h,f,m,C,16,b[34]),m=l(m,g,h,f,E,23,b[35]),f=l(f,m,g,h,e,4,b[36]),h=l(h,f,m,g,z,11,b[37]),g=l(g,h,f,m,w,16,b[38]),m=l(m,g,h,f,B,23,b[39]),f=l(f,m,g,h,D,4,b[40]),h=l(h,f,m,g,c,11,b[41]),g=l(g,h,f,m,k,16,b[42]),m=l(m,g,h,f,t,23,b[43]),f=l(f,m,g,h,A,4,b[44]),h=l(h,f,m,g,u,11,b[45]),g=l(g,h,f,m,x,16,b[46]),m=l(m,g,h,f,j,23,b[47]),f=s(f,m,g,h,c,6,b[48]),h=s(h,f,m,g,w,10,b[49]),g=s(g,h,f,m,
E,15,b[50]),m=s(m,g,h,f,r,21,b[51]),f=s(f,m,g,h,u,6,b[52]),h=s(h,f,m,g,k,10,b[53]),g=s(g,h,f,m,B,15,b[54]),m=s(m,g,h,f,e,21,b[55]),f=s(f,m,g,h,v,6,b[56]),h=s(h,f,m,g,x,10,b[57]),g=s(g,h,f,m,t,15,b[58]),m=s(m,g,h,f,D,21,b[59]),f=s(f,m,g,h,z,6,b[60]),h=s(h,f,m,g,C,10,b[61]),g=s(g,h,f,m,j,15,b[62]),m=s(m,g,h,f,A,21,b[63]);a[0]=a[0]+f|0;a[1]=a[1]+m|0;a[2]=a[2]+g|0;a[3]=a[3]+h|0},_doFinalize:function(){var b=this._data,n=b.words,a=8*this._nDataBytes,c=8*b.sigBytes;n[c>>>5]|=128<<24-c%32;var e=u.floor(a/
4294967296);n[(c+64>>>9<<4)+15]=(e<<8|e>>>24)&16711935|(e<<24|e>>>8)&4278255360;n[(c+64>>>9<<4)+14]=(a<<8|a>>>24)&16711935|(a<<24|a>>>8)&4278255360;b.sigBytes=4*(n.length+1);this._process();b=this._hash;n=b.words;for(a=0;4>a;a++)c=n[a],n[a]=(c<<8|c>>>24)&16711935|(c<<24|c>>>8)&4278255360;return b},clone:function(){var b=v.clone.call(this);b._hash=this._hash.clone();return b}});t.MD5=v._createHelper(r);t.HmacMD5=v._createHmacHelper(r)})(Math);
(function(){var u=CryptoJS,p=u.lib,d=p.Base,l=p.WordArray,p=u.algo,s=p.EvpKDF=d.extend({cfg:d.extend({keySize:4,hasher:p.MD5,iterations:1}),init:function(d){this.cfg=this.cfg.extend(d)},compute:function(d,r){for(var p=this.cfg,s=p.hasher.create(),b=l.create(),u=b.words,q=p.keySize,p=p.iterations;u.length<q;){n&&s.update(n);var n=s.update(d).finalize(r);s.reset();for(var a=1;a<p;a++)n=s.finalize(n),s.reset();b.concat(n)}b.sigBytes=4*q;return b}});u.EvpKDF=function(d,l,p){return s.create(p).compute(d,
l)}})();
CryptoJS.lib.Cipher||function(u){var p=CryptoJS,d=p.lib,l=d.Base,s=d.WordArray,t=d.BufferedBlockAlgorithm,r=p.enc.Base64,w=p.algo.EvpKDF,v=d.Cipher=t.extend({cfg:l.extend(),createEncryptor:function(e,a){return this.create(this._ENC_XFORM_MODE,e,a)},createDecryptor:function(e,a){return this.create(this._DEC_XFORM_MODE,e,a)},init:function(e,a,b){this.cfg=this.cfg.extend(b);this._xformMode=e;this._key=a;this.reset()},reset:function(){t.reset.call(this);this._doReset()},process:function(e){this._append(e);return this._process()},
finalize:function(e){e&&this._append(e);return this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(e){return{encrypt:function(b,k,d){return("string"==typeof k?c:a).encrypt(e,b,k,d)},decrypt:function(b,k,d){return("string"==typeof k?c:a).decrypt(e,b,k,d)}}}});d.StreamCipher=v.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var b=p.mode={},x=function(e,a,b){var c=this._iv;c?this._iv=u:c=this._prevBlock;for(var d=0;d<b;d++)e[a+d]^=
c[d]},q=(d.BlockCipherMode=l.extend({createEncryptor:function(e,a){return this.Encryptor.create(e,a)},createDecryptor:function(e,a){return this.Decryptor.create(e,a)},init:function(e,a){this._cipher=e;this._iv=a}})).extend();q.Encryptor=q.extend({processBlock:function(e,a){var b=this._cipher,c=b.blockSize;x.call(this,e,a,c);b.encryptBlock(e,a);this._prevBlock=e.slice(a,a+c)}});q.Decryptor=q.extend({processBlock:function(e,a){var b=this._cipher,c=b.blockSize,d=e.slice(a,a+c);b.decryptBlock(e,a);x.call(this,
e,a,c);this._prevBlock=d}});b=b.CBC=q;q=(p.pad={}).Pkcs7={pad:function(a,b){for(var c=4*b,c=c-a.sigBytes%c,d=c<<24|c<<16|c<<8|c,l=[],n=0;n<c;n+=4)l.push(d);c=s.create(l,c);a.concat(c)},unpad:function(a){a.sigBytes-=a.words[a.sigBytes-1>>>2]&255}};d.BlockCipher=v.extend({cfg:v.cfg.extend({mode:b,padding:q}),reset:function(){v.reset.call(this);var a=this.cfg,b=a.iv,a=a.mode;if(this._xformMode==this._ENC_XFORM_MODE)var c=a.createEncryptor;else c=a.createDecryptor,this._minBufferSize=1;this._mode=c.call(a,
this,b&&b.words)},_doProcessBlock:function(a,b){this._mode.processBlock(a,b)},_doFinalize:function(){var a=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){a.pad(this._data,this.blockSize);var b=this._process(!0)}else b=this._process(!0),a.unpad(b);return b},blockSize:4});var n=d.CipherParams=l.extend({init:function(a){this.mixIn(a)},toString:function(a){return(a||this.formatter).stringify(this)}}),b=(p.format={}).OpenSSL={stringify:function(a){var b=a.ciphertext;a=a.salt;return(a?s.create([1398893684,
1701076831]).concat(a).concat(b):b).toString(r)},parse:function(a){a=r.parse(a);var b=a.words;if(1398893684==b[0]&&1701076831==b[1]){var c=s.create(b.slice(2,4));b.splice(0,4);a.sigBytes-=16}return n.create({ciphertext:a,salt:c})}},a=d.SerializableCipher=l.extend({cfg:l.extend({format:b}),encrypt:function(a,b,c,d){d=this.cfg.extend(d);var l=a.createEncryptor(c,d);b=l.finalize(b);l=l.cfg;return n.create({ciphertext:b,key:c,iv:l.iv,algorithm:a,mode:l.mode,padding:l.padding,blockSize:a.blockSize,formatter:d.format})},
decrypt:function(a,b,c,d){d=this.cfg.extend(d);b=this._parse(b,d.format);return a.createDecryptor(c,d).finalize(b.ciphertext)},_parse:function(a,b){return"string"==typeof a?b.parse(a,this):a}}),p=(p.kdf={}).OpenSSL={execute:function(a,b,c,d){d||(d=s.random(8));a=w.create({keySize:b+c}).compute(a,d);c=s.create(a.words.slice(b),4*c);a.sigBytes=4*b;return n.create({key:a,iv:c,salt:d})}},c=d.PasswordBasedCipher=a.extend({cfg:a.cfg.extend({kdf:p}),encrypt:function(b,c,d,l){l=this.cfg.extend(l);d=l.kdf.execute(d,
b.keySize,b.ivSize);l.iv=d.iv;b=a.encrypt.call(this,b,c,d.key,l);b.mixIn(d);return b},decrypt:function(b,c,d,l){l=this.cfg.extend(l);c=this._parse(c,l.format);d=l.kdf.execute(d,b.keySize,b.ivSize,c.salt);l.iv=d.iv;return a.decrypt.call(this,b,c,d.key,l)}})}();
(function(){for(var u=CryptoJS,p=u.lib.BlockCipher,d=u.algo,l=[],s=[],t=[],r=[],w=[],v=[],b=[],x=[],q=[],n=[],a=[],c=0;256>c;c++)a[c]=128>c?c<<1:c<<1^283;for(var e=0,j=0,c=0;256>c;c++){var k=j^j<<1^j<<2^j<<3^j<<4,k=k>>>8^k&255^99;l[e]=k;s[k]=e;var z=a[e],F=a[z],G=a[F],y=257*a[k]^16843008*k;t[e]=y<<24|y>>>8;r[e]=y<<16|y>>>16;w[e]=y<<8|y>>>24;v[e]=y;y=16843009*G^65537*F^257*z^16843008*e;b[k]=y<<24|y>>>8;x[k]=y<<16|y>>>16;q[k]=y<<8|y>>>24;n[k]=y;e?(e=z^a[a[a[G^z]]],j^=a[a[j]]):e=j=1}var H=[0,1,2,4,8,
16,32,64,128,27,54],d=d.AES=p.extend({_doReset:function(){for(var a=this._key,c=a.words,d=a.sigBytes/4,a=4*((this._nRounds=d+6)+1),e=this._keySchedule=[],j=0;j<a;j++)if(j<d)e[j]=c[j];else{var k=e[j-1];j%d?6<d&&4==j%d&&(k=l[k>>>24]<<24|l[k>>>16&255]<<16|l[k>>>8&255]<<8|l[k&255]):(k=k<<8|k>>>24,k=l[k>>>24]<<24|l[k>>>16&255]<<16|l[k>>>8&255]<<8|l[k&255],k^=H[j/d|0]<<24);e[j]=e[j-d]^k}c=this._invKeySchedule=[];for(d=0;d<a;d++)j=a-d,k=d%4?e[j]:e[j-4],c[d]=4>d||4>=j?k:b[l[k>>>24]]^x[l[k>>>16&255]]^q[l[k>>>
8&255]]^n[l[k&255]]},encryptBlock:function(a,b){this._doCryptBlock(a,b,this._keySchedule,t,r,w,v,l)},decryptBlock:function(a,c){var d=a[c+1];a[c+1]=a[c+3];a[c+3]=d;this._doCryptBlock(a,c,this._invKeySchedule,b,x,q,n,s);d=a[c+1];a[c+1]=a[c+3];a[c+3]=d},_doCryptBlock:function(a,b,c,d,e,j,l,f){for(var m=this._nRounds,g=a[b]^c[0],h=a[b+1]^c[1],k=a[b+2]^c[2],n=a[b+3]^c[3],p=4,r=1;r<m;r++)var q=d[g>>>24]^e[h>>>16&255]^j[k>>>8&255]^l[n&255]^c[p++],s=d[h>>>24]^e[k>>>16&255]^j[n>>>8&255]^l[g&255]^c[p++],t=
d[k>>>24]^e[n>>>16&255]^j[g>>>8&255]^l[h&255]^c[p++],n=d[n>>>24]^e[g>>>16&255]^j[h>>>8&255]^l[k&255]^c[p++],g=q,h=s,k=t;q=(f[g>>>24]<<24|f[h>>>16&255]<<16|f[k>>>8&255]<<8|f[n&255])^c[p++];s=(f[h>>>24]<<24|f[k>>>16&255]<<16|f[n>>>8&255]<<8|f[g&255])^c[p++];t=(f[k>>>24]<<24|f[n>>>16&255]<<16|f[g>>>8&255]<<8|f[h&255])^c[p++];n=(f[n>>>24]<<24|f[g>>>16&255]<<16|f[h>>>8&255]<<8|f[k&255])^c[p++];a[b]=q;a[b+1]=s;a[b+2]=t;a[b+3]=n},keySize:8});u.AES=p._createHelper(d)})();

$(document).ready(function(){
    var betaPackageDownload = getUrlParameter("beta");
    if(betaPackageDownload == "true" ){
    	var betaDownloadId = readBetaCookie("betaDownloadId");
    	var betaDownloadRes = readBetaCookie("betaDownloadRes");
    	var betaDownloadCookie = readBetaCookie("TrellixBetaRem");
    	if(betaDownloadId != "" && betaDownloadRes != "" &&betaDownloadCookie!=""){
    		downloadBetaPackage(betaDownloadId,betaDownloadRes,betaDownloadCookie);
    	}
    }
});

function downloadBetaPackage(downloadId,betaDownloadRes,betaDownloadCookie) {
    if(betaDownloadCookie !="")
        {
         var indexst=betaDownloadCookie.indexOf("&pwd=");
                  var strbetasub=betaDownloadCookie.slice(indexst,betaDownloadCookie.length);
                     betaDownloadCookie=betaDownloadCookie.replace(strbetasub,"");
        }
    $.ajax({
        url: "/bin/betaDownload?downloadId="+downloadId+"&betaDownloadRes="+betaDownloadRes+betaDownloadCookie,
        type: 'POST',    
        timeout: 20000, 
        cache: true,   
        error: function(){
        	//window.location.reload();    
        },    
        success: function(data){ 
            if(data.indexOf("<a href") != -1){
                setTimeout(function() {
                	$("#downloadBetaPackage").html(data);
                	$('a#downloadBetaProduct')[0].click();
                	$("#downloadBetaPackage").html("");
                }, 1000);
            }
            deleteBetaCookie("betaDownloadId");
            deleteBetaCookie("betaDownloadRes");
    	}
    });
};

function betaDownloadAvailable(downloadId,nodeName,downloadOnNextPage){
    /*
    * Setting beta download cookie to retrieve it on
    * beta thank you page to make beta download avaialble
    */
	setBetaCookie("betaDownloadId",downloadId,"");
	var betaRes = $("#betaDownloadPath").val() + "/" + nodeName;
	setBetaCookie("betaDownloadRes",betaRes,"");
    
	var betaDownloadCookie = readBetaCookie("TrellixBetaRem");
	if(betaDownloadCookie == null || betaDownloadCookie == undefined || betaDownloadCookie == ""){
        var loginPageUrl = $("#betaDownloadLogin").val();
		loginPageUrl = loginPageUrl.replace("/content","");
        window.location = loginPageUrl;
    }
    else if(betaDownloadCookie != null && betaDownloadCookie != undefined && betaDownloadCookie !="" && downloadOnNextPage == 'Y'){
		var thankYouPageUrl = $("#betaDownloadThankYou").val();
		thankYouPageUrl = thankYouPageUrl.replace("/content","");
        window.location = thankYouPageUrl + "?beta=true";
    }
    else{
    	downloadBetaPackage(downloadId,betaRes,betaDownloadCookie);
    }
}

function readBetaCookie(name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(';');
    for(var i=0;i < ca.length;i++) {
        var c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1,c.length);
        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
    }
    return "";
}
function setBetaCookie(cookieName,cookieValue,expires){
	var ua = window.navigator.userAgent;
	if(expires =="" && ( ua.indexOf("MSIE ")>0 || ua.indexOf("Trident/")>0 || ua.indexOf("Edge/")>0)){
		var cookieExpireDate = new Date;
        cookieExpireDate.setTime(cookieExpireDate.getTime( ) +30*60000);
        expires = cookieExpireDate.toGMTString();

    }
    document.cookie = cookieName + "=" + cookieValue+";expires="+expires+";path=/";
}
function deleteBetaCookie(name) {
	document.cookie = name +'=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
}
